{
  "initial_state": "none",
  "workflow_name": "generating_gen_app_workflow_python",
  "states": {
    "none": {
      "transitions": {
        "start_workflow_generation": {
          "next": "started_workflow_generation"
        }
      }
    },
    "started_workflow_generation": {
      "transitions": {
        "save_workflow_code": {
          "next": "saved_workflow_code",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "input": {},
              "output": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Which workflow would you recommend for this code?",
                    " How would you split this code into functions and condition functions (return boolean) so that you can use them in the workflow transitions",

                    "{code}"

                  ]
                }
              ]
            }
          }
        }
      }
    },
    "saved_workflow_code": {
      "transitions": {
        "design_workflow_config_from_code": {
          "next": "designed_workflow_config_from_code",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "input": {},
              "output": {
                "local_fs": [
                  "entity/{entity_name}/workflow.json"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please construct workflow JSON using a typical FSM model based on your previous observations.",
                    "The FSM json should consist of an ordered dictionary of states. Each state has a dictionary of transitions. Each transition has a next attribute, with the next state.",
                    "Each transition may have an action (a name of a function).",
                    "Each transition may have a condition (a name of a condition function or a group condition).",
                    "Always start from an initial state 'none'.",
                    " Avoid loops. ",
                    "If we have multiple transitions from one state, each transition should have a condition to decide which to use\n",
                    "",
                    "JSON Example of the Workflow:",
                    "{{",
                    "  \"version\": \"1.0\",",
                    "  \"name\": \"Customer Workflow\",",
                    "  \"desc\": \"Description of the workflow\",",
                    "  \"initialState\": \"none\",",
                    "  \"active\": true,",
                    "  \"states\": {{",
                    "    \"none\": {{",
                    "      \"transitions\": [",
                    "        {{",
                    "          \"name\": \"transition_to_01\",",
                    "          \"next\": \"state_01\"",
                    "          \"manual\": false -- always false",
                    "        }}",
                    "      ]",
                    "    }},",
                    "    \"state_01\": {{",
                    "      \"transitions\": [",
                    "        {{",
                    "          \"name\": \"transition_to_02\",",
                    "          \"next\": \"state_02\",",
                    "          \"manual\": false -- always false",
                    "          \"processors\": [",
                    "            {{",
                    "              \"name\": \"function_name\", -- use snake case like a function name.",
                    "              \"executionMode\": \"ASYNC_NEW_TX\",",
                    "              \"config\": {{",
                    "                \"calculationNodesTags\": \"cyoda_application\" <-- always use this tag",
                    "              }}",
                    "            }}",
                    "          ]",
                    "        }}",
                    "      ]",
                    "    }},",
                    "    \"state_02\": {{",
                    "      \"transitions\": [",
                    "        {{",
                    "          \"name\": \"transition_with_criterion_simple\",",
                    "          \"next\": \"state_criterion_check_01\",",
                    "          \"manual\": false -- always false",
                    "          \"criterion\": {{",
                    "            \"type\": \"function\",",
                    "            \"function\": {{",
                    "              \"name\": \"function_name\",  -- use snake case like a function name.",
                    "              \"config\": {{",
                    "                \"calculationNodesTags\": \"cyoda_application\"<-- always use this tag",
                    "              }}",
                    "            }}",
                    "          }}",
                    "        }}",
                    "      ]",
                    "    }}",
                    "  }}",
                    "}}",
                    "Return only valid JSON without any extra text or markdown. Return states ordered for the best human readability, like an ordered dictionary."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "designed_workflow_config_from_code": {
      "transitions": {
        "enrich_workflow": {
          "next": "formatted_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
              },
              "memory_tags": [
                "format_workflow_json"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Return only valid JSON without any extra text without changes to the business logic. Please preserve original states order, it's an ordered dict."
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_design_schema",
                "description": "workflow design schema",
                "schema": {
                  "type": "object",
                  "required": [
                    "version",
                    "name",
                    "initialState",
                    "states"
                  ],
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "desc": {
                      "type": "string"
                    },
                    "initialState": {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "transitions"
                        ],
                        "properties": {
                          "transitions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "next",
                                "manual"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "next": {
                                  "type": "string"
                                },
                                "manual": {
                                  "type": "boolean",
                                  "enum": [
                                    false
                                  ]
                                },
                                "processors": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "config"
                                    ],
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "executionMode": {
                                        "type": "string",
                                        "enum": [
                                          "SYNC",
                                          "ASYNC_NEW_TX",
                                          "ASYNC_SAME_TX"
                                        ]
                                      },
                                      "config": {
                                        "type": "object",
                                        "required": [
                                          "calculationNodesTags"
                                        ],
                                        "properties": {
                                          "attachEntity": {
                                            "type": "boolean"
                                          },
                                          "calculationNodesTags": {
                                            "type": "string",
                                            "enum": [
                                              "cyoda_application"
                                            ]
                                          },
                                          "responseTimeoutMs": {
                                            "type": "integer"
                                          },
                                          "retryPolicy": {
                                            "type": "string",
                                            "enum": [
                                              "FIXED",
                                              "EXPONENTIAL",
                                              "LINEAR"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "criterion": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function",
                                        "group",
                                        "simple"
                                      ]
                                    },
                                    "function": {
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "config"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        },
                                        "config": {
                                          "type": "object",
                                          "required": [
                                            "calculationNodesTags"
                                          ],
                                          "properties": {
                                            "attachEntity": {
                                              "type": "boolean"
                                            },
                                            "calculationNodesTags": {
                                              "type": "string",
                                              "enum": [
                                                "cyoda_application"
                                              ]
                                            },
                                            "responseTimeoutMs": {
                                              "type": "integer"
                                            },
                                            "retryPolicy": {
                                              "type": "string",
                                              "enum": [
                                                "FIXED",
                                                "EXPONENTIAL",
                                                "LINEAR"
                                              ]
                                            }
                                          }
                                        },
                                        "criterion": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": [
                                                "simple",
                                                "group"
                                              ]
                                            },
                                            "jsonPath": {
                                              "type": "string"
                                            },
                                            "operation": {
                                              "type": "string",
                                              "enum": [
                                                "EQUALS",
                                                "GREATER_THAN",
                                                "GREATER_OR_EQUAL",
                                                "LESS_THAN",
                                                "LESS_OR_EQUAL",
                                                "NOT_EQUALS"
                                              ]
                                            },
                                            "value": {
                                              "oneOf": [
                                                {
                                                  "type": "string"
                                                },
                                                {
                                                  "type": "number"
                                                },
                                                {
                                                  "type": "boolean"
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "jsonPath": {
                                      "type": "string"
                                    },
                                    "operation": {
                                      "type": "string",
                                      "enum": [
                                        "EQUALS",
                                        "GREATER_THAN",
                                        "GREATER_OR_EQUAL",
                                        "LESS_THAN",
                                        "LESS_OR_EQUAL",
                                        "NOT_EQUALS"
                                      ]
                                    },
                                    "value": {
                                      "oneOf": [
                                        {
                                          "type": "string"
                                        },
                                        {
                                          "type": "number"
                                        },
                                        {
                                          "type": "boolean"
                                        }
                                      ]
                                    },
                                    "operator": {
                                      "type": "string",
                                      "enum": [
                                        "AND",
                                        "OR"
                                      ]
                                    },
                                    "conditions": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "type",
                                          "jsonPath",
                                          "operation",
                                          "value"
                                        ],
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": [
                                              "simple"
                                            ]
                                          },
                                          "jsonPath": {
                                            "type": "string"
                                          },
                                          "operation": {
                                            "type": "string",
                                            "enum": [
                                              "EQUALS",
                                              "GREATER_THAN",
                                              "GREATER_OR_EQUAL",
                                              "LESS_THAN",
                                              "LESS_OR_EQUAL",
                                              "NOT_EQUALS"
                                            ]
                                          },
                                          "value": {
                                            "oneOf": [
                                              {
                                                "type": "string"
                                              },
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "boolean"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "input": {
                "local_fs": [
                  "entity/{entity_name}/workflow.json"
                ]
              },
              "output": {
                "local_fs": [
                  "entity/{entity_name}/workflow.json"
                ]
              },
              "publish": false
            }
          }
        }
      }
    },
    "formatted_workflow_json": {
      "transitions": {
        "convert_workflow_to_cyoda_dto": {
          "next": "converted_workflow_to_cyoda_dto",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "publish": false,
              "function": {
                "name": "convert_workflow_to_dto",
                "description": "convert_workflow_to_dto",
                "parameters": {
                  "workflow_file_name": "entity/{entity_name}/workflow.json",
                  "output_file_name": "cyoda_dto/{entity_name}/workflow.json"
                }
              }
            }
          }
        }
      }
    },
    "converted_workflow_to_cyoda_dto": {
      "transitions": {
        "update_processors_according_to_workflow": {
          "next": "updated_processors_according_to_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please generate functions for the provided workflow json, base them on the initial code. So basically you need to split the initial code into these functions, so that it compiles.",
                    " Do not miss any logic from the initial code. ",
                    " {code} ",

                    "",
                    "Example:",
                    "async def function_name(entity: dict):",
                    "    final_result = do_some_user_request(...)",
                    "    entity[\"final_result\"] = final_result",
                    "    entity[\"workflowProcessed\"] = True",
                    "",
                    "Example for condition functions:",
                    "async def function_name(entity: dict) -> bool:\n        return True",

                    "These functions are async (example: async function_name(entity: dict): )",
                    "It can take only one argument entity data and can modify this entity data state, so please also remove any unnecessary entity_service.update(this entity) calls = as you can do it by changing entity attributes directly, e.g. entity['attribute'] = new_value.",
                    "No more additional arguments can be passed.",

                    "You cannot apply entity_service.add/update/delete on the current entity (passed as argument)! if you need to change this entity state - modify directly  e.g. entity['attribute'].  The new state will be persisted. Do not add any test/extra code.",
                    "please use correct logging, e.g.:\nimport logging\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nlogger.exception(e)",
                    "use 'from common.config.config import ENTITY_VERSION' to import ENTITY_VERSION",
                    "def get_services():",
                    " \"\"\"Lazy import services to avoid circular import issues.\"\"\"",
                    "   from app_init.app_init import entity_service, cyoda_auth_service",
                    "   return entity_service, cyoda_auth_service",
                    "then use: ",
                    "entity_service, cyoda_auth_service = get_services()",
                    "Use to log error stack trace logger.exception(e)",
                    " Response format: respond with only the full complete code. No markdown, no comments, no explanation. "
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "entity/{entity_name}/workflow.json"
                ]
              },
              "output": {
                "local_fs": [
                  "entity/{entity_name}/workflow.py"
                ]
              },
              "publish": false
            }
          }
        }
      }
    },
    "updated_processors_according_to_workflow": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}