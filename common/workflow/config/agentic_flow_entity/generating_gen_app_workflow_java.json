{
  "initial_state": "none",
  "workflow_name": "generating_gen_app_workflow_java",
  "states": {
    "none": {
      "transitions": {
        "start_workflow_generation": {
          "next": "started_workflow_generation"
        }
      }
    },
    "started_workflow_generation": {
      "transitions": {
        "save_workflow_code": {
          "next": "saved_workflow_code",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "output": {},
              "memory_tags": [
                "workflow_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Which workflow would you recommend for this code?",
                    " How would you split this code into functions and condition functions (return boolean) so that you can use them in the workflow transitions"
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/application/workflow_prototypes/{EntityName}.txt",
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              }
            }
          }
        }
      }
    },
    "saved_workflow_code": {
      "transitions": {
        "design_workflow_config_from_code": {
          "next": "designed_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "workflow_generation"
              ],
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/application/workflow/{EntityName}.json"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now that you've outlined the workflow from the prototype code, please,",
                    "generate workflow configuration json that represents the business workflow of the entity that can be executed on the entity persistence event and call add_application_resource",
                    "The FSM json should consist of an ordered dictionary of states. Each state has a list of transitions. Each transition has a next attribute, with the next state.",
                    "Each transition may have an processor (it represents a processor java class name which will have processing logic).",
                    "Each transition may have a criterion (it represents a criterion java class name which will have processing logic).",
                    "Always start from an initial state 'none'.",
                    " Avoid loops. ",
                    "If we have multiple transitions from one state, each transition should have a condition to decide which to use\n",
                    "",
                    "CRITICAL: Processor name is unique per workflow, never reuse it.",
                    " Max 3 processors per workflow.",
                    " It is ok not to have any processors in the workflow for business entities.",
                    " An orchestration entity like 'Job' or 'Task' should have more than one processors.",
                    " If you add one processor to the workflow you should call it '{EntityName}Processor'",
                    " It is ok to have more transitions than processors. Actually your workflow can be very interesting, but have only one processor. You do not need a processor for each transition - it is recommended to have zero to one processor per business entity workflow, and one to three processors per orchestration entity workflow.",
                    " At least one business entity workflow should have one criteria.",
                    "",
                    "Please construct workflow JSON using a typical FSM model based on your previous observations.",
                    "",
                    "JSON Example of the Workflow:",
                    "{{",
                    "  \"version\": \"1.0\",",
                    "  \"name\": \"Customer Workflow\",",
                    "  \"desc\": \"Description of the workflow\",",
                    "  \"initialState\": \"none\",",
                    "  \"active\": true,",
                    "  \"states\": {{",
                    "    \"none\": {{",
                    "      \"transitions\": [",
                    "        {{",
                    "          \"name\": \"transition_to_01\",",
                    "          \"next\": \"state_01\"",
                    "        }}",
                    "      ]",
                    "    }},",
                    "    \"state_01\": {{",
                    "      \"transitions\": [",
                    "        {{",
                    "          \"name\": \"transition_to_02\",",
                    "          \"next\": \"state_02\",",
                    "          \"processors\": [",
                    "            {{",
                    "              \"name\": \"ProcessorClassName\",",
                    "              \"executionMode\": \"SYNC\",",
                    "              \"config\": {{",
                    "                \"calculationNodesTags\": \"cyoda_application\" <-- always use this tag",
                    "              }}",
                    "            }}",
                    "          ]",
                    "        }}",
                    "      ]",
                    "    }},",
                    "    \"state_02\": {{",
                    "      \"transitions\": [",
                    "        {{",
                    "          \"name\": \"transition_with_criterion_simple\",",
                    "          \"next\": \"state_criterion_check_01\",",
                    "          \"criterion\": {{",
                    "            \"type\": \"function\",",
                    "            \"function\": {{",
                    "              \"name\": \"CriterionClassName\",",
                    "              \"config\": {{",
                    "                \"calculationNodesTags\": \"cyoda_application\"<-- always use this tag",
                    "              }}",
                    "            }}",
                    "          }}",
                    "        }}",
                    "      ]",
                    "    }}",
                    "  }}",
                    "}}",
                    "Return only valid JSON without any extra text or markdown. Return states ordered for the best human readability, like an ordered dictionary."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "designed_workflow_json": {
      "transitions": {
        "enrich_workflow": {
          "next": "formatted_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
              },
              "memory_tags": [
                "workflow_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Return only valid JSON without any extra text without changes to the business logic. Please preserve original states order, it's an ordered dict."
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_design_schema",
                "description": "workflow design schema",
                "schema": {
                  "type": "object",
                  "required": [
                    "version",
                    "name",
                    "initialState",
                    "states"
                  ],
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "desc": {
                      "type": "string"
                    },
                    "initialState": {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "transitions"
                        ],
                        "properties": {
                          "transitions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "next"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "next": {
                                  "type": "string"
                                },
                                "manual": {
                                  "type": "boolean"
                                },
                                "processors": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "required": [
                                      "name",
                                      "config"
                                    ],
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "executionMode": {
                                        "type": "string",
                                        "enum": ["SYNC", "ASYNC_NEW_TX", "ASYNC_SAME_TX"]
                                      },
                                      "config": {
                                        "type": "object",
                                        "required": ["calculationNodesTags"],
                                        "properties": {
                                          "attachEntity": {
                                            "type": "boolean"
                                          },
                                          "calculationNodesTags": {
                                            "type": "string",
                                            "enum": ["cyoda_application"]
                                          },
                                          "responseTimeoutMs": {
                                            "type": "integer"
                                          },
                                          "retryPolicy": {
                                            "type": "string",
                                            "enum": ["FIXED", "EXPONENTIAL", "LINEAR"]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "criterion": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function",
                                        "group",
                                        "simple"
                                      ]
                                    },
                                    "function": {
                                      "type": "object",
                                      "required": [
                                        "name",
                                        "config"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        },
                                        "config": {
                                          "type": "object",
                                          "required": ["calculationNodesTags"],
                                          "properties": {
                                            "attachEntity": {
                                              "type": "boolean"
                                            },
                                            "calculationNodesTags": {
                                              "type": "string",
                                              "enum": ["cyoda_application"]
                                            },
                                            "responseTimeoutMs": {
                                              "type": "integer"
                                            },
                                            "retryPolicy": {
                                              "type": "string",
                                              "enum": ["FIXED", "EXPONENTIAL", "LINEAR"]
                                            }
                                          }
                                        },
                                        "criterion": {
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "enum": ["simple", "group"]
                                            },
                                            "jsonPath": {
                                              "type": "string"
                                            },
                                            "operation": {
                                              "type": "string",
                                              "enum": ["EQUALS", "GREATER_THAN", "GREATER_OR_EQUAL", "LESS_THAN", "LESS_OR_EQUAL", "NOT_EQUALS"]
                                            },
                                            "value": {
                                              "oneOf": [
                                                {"type": "string"},
                                                {"type": "number"},
                                                {"type": "boolean"}
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "jsonPath": {
                                      "type": "string"
                                    },
                                    "operation": {
                                      "type": "string",
                                      "enum": ["EQUALS", "GREATER_THAN", "GREATER_OR_EQUAL", "LESS_THAN", "LESS_OR_EQUAL", "NOT_EQUALS"]
                                    },
                                    "value": {
                                      "oneOf": [
                                        {"type": "string"},
                                        {"type": "number"},
                                        {"type": "boolean"}
                                      ]
                                    },
                                    "operator": {
                                      "type": "string",
                                      "enum": ["AND", "OR"]
                                    },
                                    "conditions": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "type",
                                          "jsonPath",
                                          "operation",
                                          "value"
                                        ],
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "enum": ["simple"]
                                          },
                                          "jsonPath": {
                                            "type": "string"
                                          },
                                          "operation": {
                                            "type": "string",
                                            "enum": ["EQUALS", "GREATER_THAN", "GREATER_OR_EQUAL", "LESS_THAN", "LESS_OR_EQUAL", "NOT_EQUALS"]
                                          },
                                          "value": {
                                            "oneOf": [
                                              {"type": "string"},
                                              {"type": "number"},
                                              {"type": "boolean"}
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/application/workflow/{EntityName}.json"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/application/workflow/{EntityName}.json"
                ]
              },
              "publish": false
            }
          }
        }
      }
    },
    "formatted_workflow_json": {
      "transitions": {
        "convert_workflow_to_cyoda_dto": {
          "next": "converted_workflow_to_cyoda_dto",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "publish": false,
              "function": {
                "name": "convert_workflow_to_dto",
                "description": "convert_workflow_to_dto",
                "parameters": {
                  "workflow_file_name": "src/main/java/com/java_template/application/workflow/{EntityName}.json",
                  "output_file_name": "src/main/java/com/java_template/application/cyoda_dto/{EntityName}.json"
                }
              }
            }
          }
        }
      }
    },
    "converted_workflow_to_cyoda_dto": {
      "transitions": {
        "analyze_workflows_and_extract_operations": {
          "next": "processors_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": false,
              "model": {},
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/application/entity/{EntityName}.java",
                  "src/main/java/com/java_template/application/workflow/{EntityName}.json",
                  "src/main/java/com/java_template/application/workflow_prototypes/{EntityName}.txt",
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              },
              "memory_tags": [
                "processors_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Analyze the workflow json and find all unique ProcessorClassNames ",
                    "        \"processors\": [ {",
                    "     from here --->       \"name\": \"ProcessorClassName\" ",
                    "          } ]",
                    "Now for each ProcessorClassName that you've outlined in the workflow configurations,",
                    " Ignore any criteria/criterion ",
                    "please provide the code for it based on the prototype code and the entity pojo and call add_application_resource tool with processor name and content - processor java code.",
                    "",
                    "BEFORE WRITING ANY PROCESSOR CODE:",
                    "1. Review the entity POJO structure to see what getters/setters are actually available",
                    "2. Only use properties that exist in the entity POJO - do not invent or assume properties",
                    "",
                    "IMPORTANT: The processor class name and the name used in the supports() method MUST EXACTLY MATCH the processor name from the workflow configuration. Do not modify or change these names in any way.",
                    "",
                    "Call add_application_resource with:",
                    "- resource_path: 'src/main/java/com/java_template/application/processor/{ProcessorClassName}.java'",
                    "- file_contents: processor java code using CyodaProcessor interface",
                    "",
                    "Processor Interface Requirements",
                    "",
                    "public interface CyodaProcessor {",
                    "    EntityProcessorCalculationResponse process(CyodaEventContext<EntityProcessorCalculationRequest> context);",
                    "    boolean supports(OperationSpecification modelKey);",
                    "}",
                    "",
                    "Supports method implementation:",
                    "",
                    "@Override",
                    "public boolean supports(OperationSpecification modelSpec) {",
                    "    return \"ProcessorClassName\".equals(modelSpec.operationName()) &&",
                    "           \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "           Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "}",
                    "",
                    "",
                    "Processor Class Prototype (Use this pattern)",
                    "",
                    "package com.java_template.application.processor;",
                    "import com.java_template.application.entity.EntityName;",
                    "import com.java_template.common.serializer.ErrorInfo;",
                    "import com.java_template.common.serializer.ProcessorSerializer;",
                    "import com.java_template.common.serializer.SerializerFactory;",
                    "import com.java_template.common.workflow.CyodaEventContext;",
                    "import com.java_template.common.workflow.CyodaProcessor;",
                    "import com.java_template.common.workflow.OperationSpecification;",
                    "import com.java_template.common.config.Config;",
                    "import org.cyoda.cloud.api.event.processing.EntityProcessorCalculationRequest;",
                    "import org.cyoda.cloud.api.event.processing.EntityProcessorCalculationResponse;",
                    "import org.slf4j.Logger;",
                    "import org.slf4j.LoggerFactory;",
                    "import org.springframework.stereotype.Component;",
                    "import java.util.ArrayList;",
                    "import java.util.List;",
                    "import java.util.Set;",
                    "import java.util.stream.Collectors",
                    "import com.java_template.common.service.EntityService;",
                    "import com.java_template.common.util.SearchConditionRequest",
                    "import com.java_template.common.util.Condition;",
                    "",
                    "@Component",
                    "public class ProcessorClassName implements CyodaProcessor {",
                    "",
                    "    private final Logger logger = LoggerFactory.getLogger(this.getClass());",
                    "    private final ProcessorSerializer serializer;",
                    "",
                    "    public ProcessorClassName(SerializerFactory serializerFactory) {",
                    "        this.serializer = serializerFactory.getDefaultProcessorSerializer(); //always follow this pattern",
                    "        logger.info(\"ProcessorClassName initialized with SerializerFactory\");",
                    "    }",
                    "",
                    "    @Override",
                    "    public EntityProcessorCalculationResponse process(CyodaEventContext<EntityProcessorCalculationRequest> context) {",
                    "        EntityProcessorCalculationRequest request = context.getEvent();",
                    "        logger.info(\"Processing EntityName for request: {}\", request.getId());",
                    "",
                    "        // Fluent entity processing with validation",
                    "        return serializer.withRequest(request)",
                    "            .toEntity(EntityName.class)",
                    "            .validate(this::isValidEntity, \"Invalid entity state\")",
                    "            .map(this::processEntityLogic)",
                    "            .complete();",
                    "    }",
                    "",
                    "    @Override",
                    "    public boolean supports(OperationSpecification modelSpec) {",
                    "        return \"ProcessorClassName\".equals(modelSpec.operationName()) &&",
                    "               \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "               Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "    }",
                    "",
                    "",
                    "    // CRITICAL: This method MUST contain the actual business logic from CyodaEntityControllerPrototype",
                    "    // Find the processEntityName method in CyodaEntityControllerPrototype.java and copy its logic here",
                    "    private EntityName processEntityLogic(EntityName entity) {",
                    "        // TODO: Replace this comment with ACTUAL business logic from processEntityName method",
                    "        // Example of what should be here (from prototype):",
                    "        // - Data validation and transformation",
                    "        // - External API calls",
                    "        // - Business rule calculations",
                    "        // - Field modifications and enrichment",
                    "        // - Any other processing logic from the prototype method",
                    "        // - You can use EntityService to fetch, add or update related entities if needed. But you cannot use com.java_template.common.service.EntityService to update the current entity. The current entity is passed as a method argument and you can modify it directly. It will be persisted automatically.",
                    "        //- EntityService is a bean, so inject it via constructor if needed.",
                    "        return entity;",
                    "    }",
                    "",
                    "    // Add other helper methods as needed based on the prototype logic",
                    "}",
                    "",
                    "CRITICAL REQUIREMENTS:",
                    "1. **NO PLACEHOLDER CODE**: The processEntityLogic method MUST contain real business logic from CyodaEntityControllerPrototype",
                    "WHAT TO LOOK FOR IN CyodaEntityControllerPrototype.java:",
                    "- Methods that process entities (names may vary: `processUsers`, `processPets`, `handleOrders`, `transformData`, etc.)",
                    "- Private methods that contain business logic for your entity type",
                    "",
                    "ONLY use existing entity properties - do not access non-existent getters/setters.",
                    "",
                    "    public interface ProcessorSerializer {",
                    "        <T extends CyodaEntity> T extractEntity(EntityProcessorCalculationRequest request, Class<T> clazz);",
                    "        JsonNode extractPayload(EntityProcessorCalculationRequest request);",
                    "        <T extends CyodaEntity> JsonNode entityToJsonNode(T entity);",
                    "        String getType();",
                    "        ResponseBuilder.ProcessorResponseBuilder responseBuilder(EntityProcessorCalculationRequest request);",
                    "        default ProcessingChain withRequest(EntityProcessorCalculationRequest request) {",
                    "            return new ProcessingChainImpl(this, request);",
                    "        }",
                    "        interface ProcessingChain {",
                    "            ProcessingChain map(Function<JsonNode, JsonNode> mapper);",
                    "            <T extends CyodaEntity> EntityProcessingChain<T> toEntity(Class<T> clazz);",
                    "            ProcessingChain withErrorHandler(BiFunction<Throwable, JsonNode, ErrorInfo> errorHandler);",
                    "            EntityProcessorCalculationResponse complete();",
                    "        }",
                    "",
                    "        interface EntityProcessingChain<T extends CyodaEntity> {",
                    "            EntityProcessingChain<T> map(Function<T, T> mapper);",
                    "            EntityProcessingChain<T> validate(Function<T, Boolean> validator);",
                    "            EntityProcessingChain<T> validate(Function<T, Boolean> validator, String errorMessage);",
                    "            ProcessingChain toJsonFlow(Function<T, JsonNode> converter);",
                    "            EntityProcessingChain<T> withErrorHandler(BiFunction<Throwable, T, ErrorInfo> errorHandler);",
                    "            EntityProcessorCalculationResponse complete();",
                    "            EntityProcessorCalculationResponse complete(Function<T, JsonNode> converter);",
                    "        }",
                    "",
                    "",
                    "add_application_resource Tool Usage",
                    "",
                    "After each processor is generated, call the add_application_resource tool like:",
                    "",
                    "FINAL REMINDER - ABSOLUTELY CRITICAL:",
                    "🚨 DO NOT CREATE PROCESSORS WITH PLACEHOLDER CODE OR COMMENTS LIKE 'TODO: Add business logic'",
                    "🚨 YOU MUST FIND AND COPY THE ACTUAL BUSINESS LOGIC FROM CyodaEntityControllerPrototype.java",
                    "🚨 SEARCH FOR ENTITY PROCESSING METHODS (names may vary - not always processEntityName)",
                    "🚨 LOOK FOR METHODS REFERENCED IN entityService.addItem/s() CALLS",
                    "🚨 THE PROCESSOR MUST DO THE SAME WORK AS THE PROTOTYPE METHOD - NO SHORTCUTS",
                    "🚨 IGNORE CRITERIA FROM THE WORKFLOW - PROCESSORS ONLY",
                    "🚨 YOU CAN INJECT ONLY EntityService, SerializerFactory and ObjectMapper via constructor. NEVER INJECT ANYTHING ELSE. NEVER REFERENCE DIRECTLY ANY CONTROLLERS OR ANY OTHER CLASSES.",
                    "🚨 THE CHANGES TO THE CURRENT ENTITY MUST BE DONE BY MODIFYING THE ENTITY OBJECT PASSED TO THE PROCESSOR METHOD. DO NOT USE entityService.addItem/updateItem/deleteItem ON THE CURRENT ENTITY.",
                    "If you cannot find any business logic methods for an entity, create a simple processor that just returns the entity unchanged, but DO NOT create placeholder code that pretends to do business logic."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "processors_generated": {
      "transitions": {
        "generate_criteria_from_workflows": {
          "next": "criteria_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": false,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                }
              ],
              "memory_tags": [
                "generating_criteria_from_workflows"
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/application/entity/{EntityName}.java",
                  "src/main/java/com/java_template/application/workflow/{EntityName}.json",
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Generate Java criterion classes for workflow configurations that contain criteria of type 'function'.",
                    "",
                    "🔍 ANALYSIS PHASE - Complete BEFORE writing any code:",
                    "",
                    "1. **Extract Function Criteria**: Find all criteria in workflow JSON where:",
                    "   - \"criterion\": { \"type\": \"function\", \"function\": { \"name\": \"CriterionClassName\" } }",
                    "   - ONLY process function-type criteria, ignore others",
                    "",
                    "2. **Review Entity POJO**: Examine entity structure for available properties",
                    "   - Use ONLY existing getters/setters",
                    "   - Never invent properties that don't exist",
                    "",
                    "3. **Understand Business Logic**: Review prototype code for validation rules",
                    "   - Look for conditional logic, business constraints",
                    "   - Identify what the criterion should validate",
                    "",
                    "📝 CODE GENERATION:",
                    "",
                    "For each CriterionClassName found, generate using this template:",
                    "",
                    "```java",
                    "package com.java_template.application.criterion;",
                    "",
                    "import com.java_template.application.entity.EntityName;",
                    "import com.java_template.common.serializer.CriterionSerializer;",
                    "import com.java_template.common.serializer.EvaluationOutcome;",
                    "import com.java_template.common.serializer.ReasonAttachmentStrategy;",
                    "import com.java_template.common.serializer.SerializerFactory;",
                    "import com.java_template.common.serializer.StandardEvalReasonCategories;",
                    "import com.java_template.common.config.Config;",
                    "import com.java_template.common.workflow.CyodaCriterion;",
                    "import com.java_template.common.workflow.CyodaEventContext;",
                    "import com.java_template.common.workflow.OperationSpecification;",
                    "import org.cyoda.cloud.api.event.processing.EntityCriteriaCalculationRequest;",
                    "import org.cyoda.cloud.api.event.processing.EntityCriteriaCalculationResponse;",
                    "import org.slf4j.Logger;",
                    "import org.slf4j.LoggerFactory;",
                    "import org.springframework.stereotype.Component;",
                    "",
                    "@Component",
                    "public class CriterionClassName implements CyodaCriterion {",
                    "",
                    "    private final Logger logger = LoggerFactory.getLogger(this.getClass());",
                    "    private final CriterionSerializer serializer;",
                    "",
                    "    public CriterionClassName(SerializerFactory serializerFactory) {",
                    "        this.serializer = serializerFactory.getDefaultCriteriaSerializer();",
                    "        logger.info(\"CriterionClassName initialized with SerializerFactory\");",
                    "    }",
                    "",
                    "    @Override",
                    "    public EntityCriteriaCalculationResponse check(CyodaEventContext<EntityCriteriaCalculationRequest> context) {",
                    "        EntityCriteriaCalculationRequest request = context.getEvent();",
                    "",
                    "        return serializer.withRequest(request)",
                    "            .evaluateEntity(EntityName.class, this::validateEntity)",
                    "            .withReasonAttachment(ReasonAttachmentStrategy.toWarnings())",
                    "            .complete();",
                    "    }",
                    "",
                    "    @Override",
                    "    public boolean supports(OperationSpecification modelSpec) {",
                    "        return \"CriterionClassName\".equals(modelSpec.operationName()) &&",
                    "               \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "               Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "    }",
                    "",
                    "    private EvaluationOutcome validateEntity(EntityName entity) {",
                    "        // Implement validation logic based on business requirements",
                    "        // Example patterns:",
                    "        // if (entity.getSomeField() == null) {",
                    "        //     return EvaluationOutcome.fail(\"Field is required\", StandardEvalReasonCategories.VALIDATION_FAILURE);",
                    "        // }",
                    "        // if (!businessRuleCheck(entity)) {",
                    "        //     return EvaluationOutcome.fail(\"Business rule violated\", StandardEvalReasonCategories.BUSINESS_RULE_FAILURE);",
                    "        // }",
                    "        return EvaluationOutcome.success();",
                    "    }",
                    "}",
                    "```",
                    "",
                    "🎯 REPLACEMENT RULES:",
                    "- **CriterionClassName**: Use EXACTLY from workflow JSON (no changes!)",
                    "- **EntityName**: Replace with actual entity class (Pet, User, Order)",
                    "- **entityName**: Replace with camelCase name (pet, user, order)",
                    "",
                    "✅ EVALUATION OUTCOME PATTERNS:",
                    "```java",
                    "// Success",
                    "return EvaluationOutcome.success();",
                    "",
                    "// Failures (use enum directly, NOT .getCode())",
                    "return EvaluationOutcome.fail(\"message\", StandardEvalReasonCategories.VALIDATION_FAILURE);",
                    "return EvaluationOutcome.fail(\"message\", StandardEvalReasonCategories.BUSINESS_RULE_FAILURE);",
                    "return EvaluationOutcome.fail(\"message\", StandardEvalReasonCategories.DATA_QUALITY_FAILURE);",
                    "```",
                    "",
                    "🚨 CRITICAL REQUIREMENTS:",
                    "- Class name MUST match workflow JSON exactly",
                    "- supports() method MUST use exact criterion name",
                    "- Use ONLY existing entity properties",
                    "- NO placeholder code - implement real validation logic",
                    "- Use StandardEvalReasonCategories enum directly (not .getCode())",
                    "",
                    "📁 TOOL USAGE:",
                    "Call add_application_resource for each criterion:",
                    "- resource_path: 'src/main/java/com/java_template/application/criterion/{CriterionClassName}.java'",
                    "- file_contents: generated Java code",
                    "",
                    "🔍 FINAL VALIDATION:",
                    "- [ ] Names match workflow JSON exactly",
                    "- [ ] Only existing entity properties used",
                    "- [ ] EvaluationOutcome usage correct",
                    "- [ ] Real business logic implemented",
                    "- [ ] All imports present"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "criteria_generated": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}
