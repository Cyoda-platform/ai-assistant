{
  "initial_state": "none",
  "workflow_name": "generating_gen_app_workflow_java",
  "states": {
    "none": {
      "transitions": {
        "start_workflow_generation": {
          "next": "started_workflow_generation"
        }
      }
    },
    "started_workflow_generation": {
      "transitions": {
        "save_workflow_code": {
          "next": "saved_workflow_code",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/{entity_name}Workflow.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Which workflow would you recommend for this code?",
                    "Could you split this code into methods, each method should have name starting with 'process'. It should return CompletableFuture<ObjectNode>",
                    "It can take only one argument ObjectNode entity and can modify this entity state, so please also remove any unnecessary entityService.updateItem(this entity) calls = as you can do it by changing entity attributes directly, e.g. entity.attribute = new_value.",
                    "No more additional arguments can be passed.",
                    "Also, all workflow orchestration should be inside {workflow_function}. {workflow_function} should have only workflow orchestration code and no business logic. no other function can have workflow orchestration code.",
                    "{code}",
                    "Please, convert {entity_name} to UpperCamelCase and keep using it this way. Call the class {entity_name}Workflow. Use package name 'com.java_template.entity.{entity_name}'. Add @Component annotation to the class.",
                    "Use 'import static com.java_template.common.config.Config.*;' to import ENTITY_VERSION.",
                    "Provide all the imports and variables which are necessary and used in the code.",
                    "You cannot apply entityService.addItem/updateItem/deleteItem on the current entity (passed as argument)! if you need to change this entity state - modify directly  e.g. entity.attribute.  The new state will be persisted. Do not add any test/extra code.",
                    "Remove all RestController methods and annotations, leave only workflow-related methods, which start with 'process'.",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "saved_workflow_code": {
      "transitions": {
        "design_workflow_config_from_code": {
          "next": "designed_workflow_config_from_code",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/{entity_name}Workflow.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please construct workflow JSON using a typical FSM model.",
                    "The FSM json should consist of an ordered dictionary of states. Each state has a dictionary of transitions. Each transition has a next attribute, with the next state.",
                    "Each transition may have an action (will map directly to a function).",
                    "Action names/condition functions should be the same as functions names in the attached code.",
                    "Ideally, there should be one process per transition. If user doesn't specify, derive from transition name.",
                    "Always start from an initial state 'none'.",
                    "",
                    "JSON Example of the Workflow:",
                    "{{",
                    "  \"version\": \"1.0\",",
                    "  \"description\": \"Template FSM with structured states, transitions, actions, and conditions\",",
                    "  \"initial_state\": \"none\",",
                    "  \"workflow_name\": \"template_workflow\",",
                    "  \"states\": {{",
                    "    \"none\": {{  #this is first state",
                    "      \"transitions\": {{ #this is state transitions",
                    "        \"transition_to_01\": {{ #this is transition name",
                    "          \"next\": \"state_01\" #this is next state",
                    "        }}",
                    "      }}",
                    "    }},",
                    "    \"state_01\": {{",
                    "      \"transitions\": {{",
                    "        \"transition_to_02\": {{",
                    "          \"next\": \"state_02\",",
                    "          \"action\": {{",
                    "            \"name\": \"function_name\"",
                    "          }}",
                    "        }}",
                    "      }}",
                    "    }},",
                    "    \"state_02\": {{",
                    "      \"transitions\": {{",
                    "        \"transition_with_condition_simple\": {{",
                    "          \"next\": \"state_condition_check_01\",",
                    "          \"condition\": {{",
                    "            \"type\": \"function\",",
                    "            \"function\": {{",
                    "              \"name\": \"function_name_returns_bool\"",
                    "            }}",
                    "          }}",
                    "        }}",
                    "      }}",
                    "    }},",
                    "    \"state_condition_check_01\": {{",
                    "      \"transitions\": {{",
                    "        \"transition_with_condition_group\": {{",
                    "          \"next\": \"state_terminal\",",
                    "          \"condition\": {{",
                    "            \"type\": \"group\",",
                    "            \"name\": \"condition_group_gamma\",",
                    "            \"operator\": \"AND\",",
                    "            \"parameters\": [",
                    "              {{",
                    "                \"jsonPath\": \"sampleFieldA\",",
                    "                \"operatorType\": \"equals (disregard case)\",",
                    "                \"value\": \"template_value_01\",",
                    "                \"type\": \"simple\"",
                    "              }}",
                    "            ]",
                    "          }}",
                    "        }}",
                    "      }}",
                    "    }}",
                    "  }}",
                    "}}",
                    "Available operator values:",
                    "\"AND\", \"OR\", \"NOT\"",
                    "Available operatorType values:",
                    "\"EQUALS\", \"NOT_EQUAL\", \"IEQUALS\", \"INOT_EQUAL\", \"IS_NULL\", \"NOT_NULL\",",
                    "\"GREATER_THAN\", \"GREATER_OR_EQUAL\", \"LESS_THAN\", \"LESS_OR_EQUAL\",",
                    "\"ICONTAINS\", \"ISTARTS_WITH\", \"IENDS_WITH\", \"INOT_CONTAINS\",",
                    "\"INOT_STARTS_WITH\", \"INOT_ENDS_WITH\", \"MATCHES_PATTERN\",",
                    "\"BETWEEN\", \"BETWEEN_INCLUSIVE\"",
                    "Return only valid JSON without any extra text. Return states ordered for the best human readability, like an ordered dictionary."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "designed_workflow_config_from_code": {
      "transitions": {
        "enrich_workflow": {
          "next": "formatted_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
              },
              "memory_tags": [
                "format_workflow_json"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Return only valid JSON without any extra text without changes to the business logic. Please preserve original states order, it's an ordered dict."
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_design_schema",
                "description": "workflow design schema",
                "schema": {
                  "type": "object",
                  "required": [
                    "workflow_name",
                    "initial_state",
                    "states"
                  ],
                  "properties": {
                    "workflow_name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "initial_state": {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "transitions"
                        ],
                        "properties": {
                          "transitions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "required": [
                                "next"
                              ],
                              "properties": {
                                "next": {
                                  "type": "string"
                                },
                                "manual": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "condition": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function",
                                        "group",
                                        "simple"
                                      ]
                                    },
                                    "function": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "jsonPath",
                                          "operatorType",
                                          "value",
                                          "type"
                                        ],
                                        "properties": {
                                          "jsonPath": {
                                            "type": "string"
                                          },
                                          "operatorType": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "publish": false
            }
          }
        }
      }
    },
    "formatted_workflow_json": {
      "transitions": {
        "convert_workflow_to_cyoda_dto": {
          "next": "converted_workflow_to_cyoda_dto",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "publish": false,
              "function": {
                "name": "convert_workflow_to_dto",
                "description": "convert_workflow_to_dto",
                "parameters": {
                  "workflow_file_name": "src/main/java/com/java_template/entity/{entity_name}/Workflow.json",
                  "output_file_name": "src/main/java/com/java_template/cyoda_dto/{entity_name}/workflow.json"
                }
              }
            }
          }
        }
      }
    },
    "converted_workflow_to_cyoda_dto": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}