{
  "initial_state": "none",
  "workflow_name": "add_new_workflow",
  "states": {
    "none": {
      "transitions": {
        "start_workflow_add": {
          "next": "generate_workflow_json"
        }
      }
    },
    "generate_workflow_json": {
      "transitions": {
        "enrich_workflow": {
          "next": "generated_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please construct workflow json from this description/code/flow chart {user_request} using a typical finite-state machine (FSM) model.",
                    "The FSM json should consist of an ordered dictionary of states. Each state has a dictionary of transitions. Each transition has a next attribute, with the next state.",
                    "Each transition may have an action (will map directly to a function).",
                    "Ideally, there should be one action per transition. If user doesn't specify, derive from transition name.",
                    "Always start from an initial state 'none'.",
                    " Avoid loops. ",
                    "If we have multiple transitions from one state we need a condition for each transition to decide which to use\n",
                    "",
                    "JSON Example of the Workflow:",
                    "{{",
                    "  \"version\": \"1.0\",",
                    "  \"description\": \"Template FSM with structured states, transitions, actions, and conditions\",",
                    "  \"initial_state\": \"none\",",
                    "  \"workflow_name\": \"template_workflow\",",
                    "  \"states\": {{",
                    "    \"none\": {{  #this is first state",
                    "      \"transitions\": {{ #this is state transitions",
                    "        \"transition_to_01\": {{ #this is transition name",
                    "          \"next\": \"state_01\" #this is next state",
                    "        }}",
                    "      }}",
                    "    }},",
                    "    \"state_01\": {{",
                    "      \"transitions\": {{",
                    "        \"transition_to_02\": {{",
                    "          \"next\": \"state_02\",",
                    "          \"action\": {{",
                    "            \"name\": \"functionName\"",
                    "          }}",
                    "        }}",
                    "      }}",
                    "    }},",
                    "    \"state_02\": {{",
                    "      \"transitions\": {{",
                    "        \"transition_with_condition_simple\": {{",
                    "          \"next\": \"state_condition_check_01\",",
                    "          \"condition\": {{",
                    "            \"type\": \"function\",",
                    "            \"function\": {{",
                    "              \"name\": \"functionName\"",
                    "            }}",
                    "          }}",
                    "        }}",
                    "      }}",
                    "    }},",
                    "    \"state_condition_check_01\": {{",
                    "      \"transitions\": {{",
                    "        \"transition_with_condition_group\": {{",
                    "          \"next\": \"state_terminal\",",
                    "          \"condition\": {{",
                    "            \"type\": \"group\",",
                    "            \"name\": \"condition_group_gamma\",",
                    "            \"operator\": \"AND\",",
                    "            \"parameters\": [",
                    "              {{",
                    "                \"jsonPath\": \"sampleFieldA\",",
                    "                \"operatorType\": \"equals (disregard case)\",",
                    "                \"value\": \"template_value_01\",",
                    "                \"type\": \"simple\"",
                    "              }}",
                    "            ]",
                    "          }}",
                    "        }}",
                    "      }}",
                    "    }}",
                    "  }}",
                    "}}",
                    "Available operator values for group condition. Not allowed for function condition:",
                    "\"AND\", \"OR\", \"NOT\"",
                    "Available operatorType values:",
                    "\"EQUALS\", \"NOT_EQUAL\", \"IEQUALS\", \"INOT_EQUAL\", \"IS_NULL\", \"NOT_NULL\",",
                    "\"GREATER_THAN\", \"GREATER_OR_EQUAL\", \"LESS_THAN\", \"LESS_OR_EQUAL\",",
                    "\"ICONTAINS\", \"ISTARTS_WITH\", \"IENDS_WITH\", \"INOT_CONTAINS\",",
                    "\"INOT_STARTS_WITH\", \"INOT_ENDS_WITH\", \"MATCHES_PATTERN\",",
                    "\"BETWEEN\", \"BETWEEN_INCLUSIVE\"",
                    "Return only valid JSON without any extra text. Return states ordered for the best human readability, like an ordered dictionary."
                  ]
                }
              ],
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "publish": true
            }
          }
        }
      }
    },
    "generated_workflow_json": {
      "transitions": {
        "format_workflow_json": {
          "next": "formatted_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "memory_tags": [
                "format_workflow_json"
              ],
              "type": "prompt",
              "model": {
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Return only valid JSON without any extra text without changes to the business logic. You can make adjustments to the json, including business logic, if it does not comply with the json schema or fails validation."
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_design_schema",
                "description": "workflow design schema",
                "schema": {
                  "type": "object",
                  "required": [
                    "workflow_name",
                    "initial_state",
                    "states"
                  ],
                  "properties": {
                    "workflow_name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "initial_state": {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "transitions"
                        ],
                        "properties": {
                          "transitions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "required": [
                                "next"
                              ],
                              "properties": {
                                "next": {
                                  "type": "string"
                                },
                                "manual": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "condition": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function",
                                        "group",
                                        "simple"
                                      ]
                                    },
                                    "function": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "jsonPath",
                                          "operatorType",
                                          "value",
                                          "type"
                                        ],
                                        "properties": {
                                          "jsonPath": {
                                            "type": "string"
                                          },
                                          "operatorType": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "publish": false
            }
          }
        }
      }
    },
    "formatted_workflow_json": {
      "transitions": {
        "convert_workflow_to_cyoda_dto": {
          "next": "converted_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "publish": false,
              "function": {
                "name": "convert_workflow_to_dto",
                "description": "convert_workflow_to_dto",
                "parameters": {
                  "workflow_file_name": "src/main/java/com/java_template/entity/{entity_name}/Workflow.json",
                  "output_file_name": "src/main/java/com/java_template/cyoda_dto/{entity_name}/workflow.json"
                }
              }
            }
          }
        }
      }
    },
    "converted_workflow_json": {
      "transitions": {
        "generate_workflow_processors": {
          "next": "generated_workflow_processors",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
                "name": "OPEN_AI",
                "temperature": 0.7,
                "max_tokens": 10000
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "# Please implement action functions (processors) for the newly generated workflow according to the user requirement {user_request}.",
                    "If the requirement is not specific enough just add a template with example code.",
                    "Generate new process functions if necessary or update existing methods according to the user requirement.",
                    "It should return CompletableFuture<ObjectNode>",
                    "It can take only one argument ObjectNode entity and can modify this entity state",
                    "No more additional arguments can be passed.",
                    "Example:",
                    "public CompletableFuture<ObjectNode> functionName(ObjectNode entity) {",
                    "    if (!entity.has(\"status\")) {",
                    "     entity.put(\"status\", \"pending\");",
                    "    }",
                    "return CompletableFuture.completedFuture(entity);",
                    "  }",
                    "Example for condition functions:",
                    "public CompletableFuture<ObjectNode> functionName(ObjectNode entity) {",
                    "  boolean value = true; ",
                    "  entity.put(\"success\", value)",
                    "return CompletableFuture.completedFuture(entity);",
                    "  }",
                    "Please, call the class Workflow. Use package name 'com.java_template.entity.{entity_name}'. Use @Component(\"{entity_name}\") ",
                    "You cannot apply entityService.addItem/updateItem/deleteItem on the current entity (passed as argument)! if you need to change this entity state - modify directly  e.g. entity.attribute.  The new state will be persisted. Do not add any test/extra code.",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting."
                  ]
                }
              ],
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.java"
                ]
              },
              "publish": true
            }
          }
        }
      }
    },
    "generated_workflow_processors": {
      "transitions": {
        "done": {
          "next": "locked_chat",
          "action": {
            "name": "notify_user",
            "config": {
              "type": "question",
              "question": "The workflow has been successfully added. Please don’t hesitate to get in touch if I can assist further.",
              "publish": true
            }
          }
        }
      }
    }
  }
}
