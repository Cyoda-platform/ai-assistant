{
  "initial_state": "none",
  "workflow_name": "build_general_application_python",
  "states": {
    "none": {
      "transitions": {
        "welcome_user": {
          "next": "greeting_sent",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "\uD83D\uDC4B Welcome to Cyoda Application Builder! We’re excited to build something amazing with you! \n\n \uD83C\uDF1F Your branch will be ready soon, and I’ll notify you when I push changes. If you have suggestions, message me or use Canvas! \uD83D\uDE0A  \n\n You can view how your chat workflow operates internally and monitor your progress in our debug window, which you can open using the button in the top-right corner. \uD83D\uDCBB  \n\nIf something goes wrong, no worries—just roll back! \n\n\uD83D\uDE2C Your app will be live on Cyoda Platform GitHub soon! \n\n\uD83D\uDE80 Let’s build your branch together! \uD83C\uDF3F",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "greeting_sent": {
      "transitions": {
        "clone_repo": {
          "next": "repository_cloned",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "clone_repo",
                "description": "Clones template repository"
              },
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "repository_cloned": {
      "transitions": {
        "init_chats": {
          "next": "chats_initialized",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_chats",
                "description": "Initialises ai service"
              },
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "chats_initialized": {
      "transitions": {
        "process_initial_question": {
          "next": "app_requirements_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_python_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a python quart developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks or technologies, the final application will be in quart python on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. format it with markdown ",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "app_requirements_finalized",
          "manual": true
        }
      }
    },
    "app_requirements_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_python_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if you have enough information or the user asks to proceed to the next question. Summarise the requirement in a couple of sentences and set to true if the user chooses your example answers or after 6 attempts! Do not hold the user too long.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_application_requirement"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a python quart developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks or technologies, the final application will be in quart python on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. format it with markdown ",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Call finish_discussion immediately after 6 attempts. Do not hold the user too long they will bored.",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested_processing": {
      "transitions": {
        "process_application_requirement_processing": {
          "next": "app_requirements_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "description": "not_stage_completed",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        },
        "process_application_requirement_success": {
          "next": "app_requirements_finalized",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "description": "Clones template repository",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        }
      }
    },
    "app_requirements_finalized": {
      "transitions": {
        "ask_about_api": {
          "next": "proceeded_to_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "Next up: functional requirements.\nStay tuned — thoughtful thinking in progress. \uD83E\uDDE0✨",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "proceeded_to_functional_requirements": {
      "transitions": {
        "define_functional_requirements": {
          "next": "functional_requirements_specified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Please, help me define the functional requirements for my project.",
                    "Outline the necessary API endpoints (adhering to Restful rules, any business logic that invokes external data source, retrieves data or does any calculations needs to be done in POST endpoint, GET is used only for my application results retrieval (external data retrieval should be implemented in POST endpoint)),",
                    "including details on request/response formats. Additionally, provide a visual representation of the user-app interaction using Mermaid diagrams (e.g. journey/sequence).",
                    "Please return markdown document without any additional information.",
                    "Each diagram should be wrapped into ```mermaid ...```"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "functional_requirements_specified": {
      "transitions": {
        "ask_about_api": {
          "next": "api_inquired",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "Would you like to improve or make adjustments to the functional requirements and the API?\nOpen to feedback if you’ve got any ideas — I’m all ears\uD83D\uDC42\uD83D\uDC42, well... sort of\uD83D\uDE0F.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "api_inquired": {
      "transitions": {
        "submit_answer": {
          "next": "api_inquired_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "api_discussion_completed",
          "manual": true
        }
      }
    },
    "api_inquired_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "api_inquired_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_python_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user asks to proceed or if the user is satisfied with the current result (e.g. says it is correct, valid, works for them). If set to false notify the user you're going to proceed with prototype generation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_api"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Please, adjust the the functional requirements and the API according to the user request. ",
                    " Once the user is happy with the result or has no more questions, please call finish_discussion. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "api_inquired_processing": {
      "transitions": {
        "process_api_inquiry_processing": {
          "next": "api_inquired",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        },
        "process_api_inquiry_success": {
          "next": "api_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        }
      }
    },
    "api_discussion_completed": {
      "transitions": {
        "notify_prototype_generation": {
          "next": "prototype_generation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🌟 Let’s get started on the first prototype! 🛠️\n\nJust give me a moment to think everything through... 🤔💭\n\nI'll finalize the functional requirements first, then dive into prototype generation. 🧠✨\n\n🚧 Initial prototype is now in progress... 🚀💡\n\nWant to learn more about entity databases and event-driven architectures?\nCheck these out:\n- [What’s an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_generation_notified": {
      "transitions": {
        "generate_functional_requirements": {
          "next": "functional_requirements_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "allow_anonymous_users": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return well-formatted final version of the functional requirements which was confirmed by the user."
                  ]
                }
              ],
              "input": {},
              "output": {
                "local_fs": [
                  "entity/functional_requirement.md"
                ]
              }
            }
          }
        }
      }
    },
    "functional_requirements_generated": {
      "transitions": {
        "generate_prototype_sketch": {
          "next": "prototype_sketch_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "allow_anonymous_users": true,
              "model": {},
              "input": {},
              "output": {
                "local_fs": [
                  "entity/prototype.py"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now that we’ve finalized the API design, please provide the code for the prototype.py file.",
                    "The implementation should be a working prototype rather than a fully robust solution.",
                    "Incorporate any details I’ve already specified—such as external APIs, models, or specific calculations—and use mocks or placeholders only where requirements are unclear or incomplete.",
                    "Please use real APIs. Wherever you introduce a mock or placeholder, include a TODO comment to indicate the missing or uncertain parts.",
                    "The goal is to verify the user experience (UX) and identify any gaps in the requirements before we proceed with a more thorough implementation.",
                    "Please double-check you are using all the information provided earlier. Use httpx.AsyncClient for http requests, and Quart api.",
                    "Use QuartSchema(app) but do not add any @validate_request as our data is dynamic, just add QuartSchema(app) one line.",
                    "Use this entry point: if __name__ == '__main__':app.run(use_reloader=False, debug=True, host='0.0.0.0', port=8000, threaded=True).",
                    "Mock any persistence, do not use any particular implementation, just local cache (e.g. you cannot use sqlalchemy in the prototype or any external implementation for persistence or cache, avoid using global keyword as we're using asyncio).",
                    "Please use real APIs.",
                    "You are most welcome to use such pattern where it is reasonable:",
                    "entity_job[job_id] = {\"status\": \"processing\", \"requestedAt\": requested_at}\n# Fire and forget the processing task.",
                    "await asyncio.create_task(process_entity(entity_job, data.__dict__))",
                    "please use correct logging, e.g.:\nimport logging\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nlogger.exception(e)"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_sketch_generated": {
      "transitions": {
        "generate_prototype": {
          "next": "prototype_completed",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {
                "model_name": "o4-mini"
              },
              "input": {},
              "output": {
                "local_fs": [
                  "entity/prototype.py"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please, add @validate_request to each request based on quart-schema lib example:",
                    "from dataclasses import dataclass",
                    "from quart_schema import QuartSchema, validate_request, validate_response",
                    "app = Quart(__name__)",
                    "QuartSchema(app)",
                    "@dataclass",
                    "class Todo:",
                    "task: str #please use only primitives",
                    "post/put request: ",
                    "@app.route(\"/test\", methods=[\"POST\"]) - this line should go first in post method",
                    "@validate_request(Todo)",
                    "async def create_todo(data: Todo)",
                    "get request with request parameters:",
                    "@validate_querystring(Todo) - this line should go first in get method",
                    "@app.route(\"/test\", methods=[\"GET\"])",
                    "async def get_todo() #cannot put body to GET request! - please make sure you do not pass any arguments! it will throw ar error. only post and put can have body",
                    "get request without request parameters *no validation needed*:",
                    "@app.route(\"/companies/<string:id>/lei\", methods=[\"GET\"])",
                    "Correct example:",
                    "@validate_querystring(Todo) - this line should go first in get",
                    "@app.route(\"/test\", methods=[\"GET\"])",
                    "async def todo():",
                    "name = request.args.get('name') #use standard approach to access parameters values for GET requests, you cannot access Todo in GET",
                    "Wrong example:",
                    "@app.route(\"/test\", methods=[\"GET\"])",
                    "@validate_querystring(Todo)- this line should go first in get",
                    "async def todo(query_args: Todo): - do not do like this please",
                    "Correct example:",
                    "@app.route(\"/test\", methods=[\"POST\"]) - this line should go first in post method",
                    "@validate_request(Todo) - this line should go second in post method, but first in get",
                    "async def create_todo(data: Todo)",
                    "Wrong example:",
                    "@validate_request(Todo) - this line should go second in post method, but first in get",
                    "@app.route(\"/test\", methods=[\"POST\"]) - this line should go first in post method",
                    "async def create_todo(data: Todo)",
                    "I know this iss confusing - i think there is an issue in quart schema library so we have to workaround this issue:",
                    "Always put validation first for GET requests, and last for POST requests. Reason about this issue and make correct decision.",
                    "Also put a comment that it is an issue workaround, so that everyone knows the logic behind.",
                    " Important note: validate_request have defect so be very careful in placing these annotations",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Python comments (# like this) are allowed, but avoid extra narrative or markdown-style formatting. Please, make sure there is no markdown (e.g. ```)"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_completed": {
      "transitions": {
        "ask_to_discuss_prototype": {
          "next": "prototype_discussion_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "✅ First Prototype Ready!\n\nThe initial prototype based on your functional requirements is now ready! You can run and test it locally or directly in **GitHub Codespaces**.\n\n---\n\n### ▶️ How to Run the Prototype\n\n#### **Option 1: GitHub Codespaces **\nYou can open the repo in GitHub Codespaces and launch the prototype there:\n\n1. Open the repository in [GitHub Codespaces](https://github.com/Cyoda-platform/quart-client-template/tree/{branch_name}).\n2. In the Codespace terminal, run:\n\n```bash\npython entity/prototype.py\n```\n\n3. Preview the app in the browser:\n   - `/docs` → Swagger: `https://<your-codespace-url>/docs`\n   - `/scalar` → Scalar UI: `https://<your-codespace-url>/scalar`\n\n> *Codespaces will provide a forwarded port URL — just append `/docs` or `/scalar` to it.*\n\n---\n\n#### **Option 2: Local Environment**\n\n1. Make sure you're on the correct branch and up to date:\n\n```bash\ngit checkout {branch_name}\ngit pull\n```\n\n2. Run the app:\n\n```bash\npython entity/prototype.py\n```\n\n3. Open your browser and go to:\n- [http://localhost:8000/docs](http://localhost:8000/docs)\n- or [http://localhost:8000/scalar](http://localhost:8000/scalar)\n\n---\n\n### 🧪 Testing\n\nYou’ll find example requests and responses in:\n📄 `entity/functional_requirement.md`\n\nUse these to test the API via the Swagger or Scalar UI.\n\n---\n\n### ✅ Approval or Feedback\n\nIf everything looks good, feel free to approve it.\nIf anything’s off or you’d like changes, just ping me here. 🙌\n\n> ⚠️ **Note:** We're using the `quart-schema` library, which is sensitive to the positioning of annotations. If you run into issues related to schema validation, let me know — I’ll sort it out quickly.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested": {
      "transitions": {
        "submit_answer": {
          "next": "prototype_discussion_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prototype_discussion_completed",
          "manual": true
        }
      }
    },
    "prototype_discussion_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "prototype_discussion_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_python_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of entity/prototype.py file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string",
                          "enum": [
                            "entity/prototype.py"
                          ]
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "save_file",
                    "description": "Save changes to entity/prototype.py to the repository so that the user can view the changes to the entity/prototype.py. Apply this function if you make changes to entity/prototype.py (fix issues, make improvements, adjustments according to the user request). No need to apply this function if the code does not require changes and you're answering a general question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "new_content": {
                          "type": "string"
                        },
                        "filename": {
                          "type": "string",
                          "enum": [
                            "entity/prototype.py"
                          ]
                        }
                      },
                      "required": [
                        "new_content",
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_prototype"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated prototype.py code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file entity/prototype.py to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user",
                    " Finally save the changes to the prototype.py file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the prototype file if necessary, answer the question, no save needed in this case.",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested_processing": {
      "transitions": {
        "process_prototype_discussion_processing": {
          "next": "prototype_discussion_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        },
        "process_prototype_discussion_success": {
          "next": "prototype_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        }
      }
    },
    "prototype_discussion_completed": {
      "transitions": {
        "ask_to_confirm_migration": {
          "next": "migration_confirmation_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "\"\uD83C\uDF89 **Congratulations on completing your application prototype!**\n\nYou've done an incredible job bringing your idea to life — it's exciting to see it in action. \uD83E\uDD73\n\n**\uD83E\uDDD0 This is a major milestone — well done!**\nThat said, while your prototype is impressive, it's not quite production-ready yet. A few key areas still need attention:\n\n- **Scalability & High Availability**\n- **Data Persistence & Integrity**\n- **Production-Ready Features**\n\nTo bridge these gaps, we recommend refactoring your solution using the **Cyoda Framework** and deploying to a **High Availability (HA)** cluster on **Cyoda Cloud**. This will give you:\n\n✅ Enterprise-grade reliability & failover  \n✅ Seamless data persistence  \n✅ Effortless deployment & scaling  \n✅ A full suite of production-ready tools  \n\n**Ready to take it to the next level?**  \nGive me a \uD83D\uDC4D and we’ll start refactoring to make your app robust, scalable, and fully deployable on Cyoda Cloud.\n\nIf you’d like to learn more about Cyoda, just ask!\"\n",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested": {
      "transitions": {
        "submit_answer": {
          "next": "migration_confirmation_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "migration_confirmation_completed",
          "manual": true
        }
      }
    },
    "migration_confirmation_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "migration_confirmation_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_python_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of entity/prototype.py file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string",
                          "enum": [
                            "entity/prototype.py"
                          ]
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "save_file",
                    "description": "Save changes to entity/prototype.py to the repository so that the user can view the changes to the entity/prototype.py. Apply this function if you make changes to entity/prototype.py (fix issues, make improvements, adjustments according to the user request). No need to apply this function if the code does not require changes and you're answering a general question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "new_content": {
                          "type": "string"
                        },
                        "filename": {
                          "type": "string",
                          "enum": [
                            "entity/prototype.py"
                          ]
                        }
                      },
                      "required": [
                        "new_content",
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "migration_confirmation"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated prototype.py code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file entity/prototype.py to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user",
                    " Finally save the changes to the prototype.py file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the prototype file if necessary, answer the question, no save needed in this case.",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested_processing": {
      "transitions": {
        "process_migration_confirmation_processing": {
          "next": "migration_confirmation_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        },
        "process_migration_confirmation_success": {
          "next": "migration_confirmation_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        }
      }
    },
    "migration_confirmation_completed": {
      "transitions": {
        "migration_confirmation_notify": {
          "next": "migration_confirmation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🚀 **Let’s generate your application code!**\n\nI’ll take care of everything — no need to lift a finger.\n\n⏳ While the code is being generated (~5 min), feel free to grab a coffee ☕ and relax.\n\n**Here’s what’s happening behind the scenes:**\n- **Entity Design:** Defining JSON structures for your entities (`entity/*`)\n- **Workflow Design:** Mapping transitions (`entity/*/workflow.json`)\n- **Workflow Processor:** Python logic that powers it all (`entity/*/workflow.py`)\n\n🛠️ This step brings your app to life — from requirements to real, running code.\n\n✅ I’ll notify you as soon as everything’s ready to review.\n\nWant to dive deeper into the concepts?\nCheck these out:\n- [What’s an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true
            }
          }
        }
      }
    },
    "migration_confirmation_notified": {
      "transitions": {
        "generate_initial_cyoda_prototype": {
          "next": "generated_initial_cyoda_prototype",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_initial_cyoda_prototype"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided with a Python codebase that implements a REST API (using a framework like Quart, Flask, etc.).",
                    "Currently, the code uses local in‑memory dictionaries (and counters) to store and manage data for one or more entity types.",
                    "Your task is to refactor the code so that all interactions with the local cache are replaced by calls to an external service called entity_service (from app_init.app_init import entity_service).",
                    "You can use only these functions for replacement - if this is not enough just skip and leave as is",
                    "entity name should always be underscore lowercase",
                    " Make sure that get item by id endpoint can now be only string. If you used numeric value before - please now use string, as technical id is string",
                    "1. id = await entity_service.add_item(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,  # always use this constant",
                    "    entity=data  # the validated data object",
                    ")",
                    "just return id in the response - you cannot immediately retrieve the result - it should be retrieved via separate endpoint",
                    "2. Data retrieval:",
                    "await entity_service.get_item(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,",
                    "    technical_id=<id>",
                    ")",
                    "await entity_service.get_items(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,",
                    ")",
                    "await entity_service.get_items_by_condition(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,",
                    "    condition=condition",
                    ")",
                    "3. await entity_service.update_item(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,  # always use this constant",
                    "    entity=data,",
                    "    technical_id=id, #technical_id is required",
                    "    meta={}",
                    ")",
                    "4. await entity_service.delete_item(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,  # always use this constant",
                    "    technical_id=id,",
                    "    meta={}",
                    ")",
                    "use 'from common.config.config import ENTITY_VERSION' to import ENTITY_VERSION",
                    "Preserve the endpoint routes and any other essential business logic.",
                    "Please make sure you keep all the necessary business logic, like data ingestion, calling any external apis, mocks, calculations etc.",
                    "Please return only compiled python code without additional information. If you'd like to add any comments please use # comment",
                    "Please use correct logging, e.g.:",
                    "import logging",
                    "from app_init.app_init import BeanFactory",
                    "factory = BeanFactory(config={'CHAT_REPOSITORY': 'cyoda'})",
                    "entity_service: EntityService = factory.get_services()['entity_service']",
                    "cyoda_auth_service = factory.get_services()[\"cyoda_auth_service\"]",
                    "logger = logging.getLogger(__name__)",
                    "logger.setLevel(logging.INFO)",
                    "logger.exception(e)",
                    "",
                    "",
                    "Condition example:",
                    "Available operatorType values:",
                    "\"EQUALS\", \"NOT_EQUAL\", \"IEQUALS\", \"INOT_EQUAL\", \"IS_NULL\", \"NOT_NULL\",",
                    "\"GREATER_THAN\", \"GREATER_OR_EQUAL\", \"LESS_THAN\", \"LESS_OR_EQUAL\",",
                    "\"ICONTAINS\", \"ISTARTS_WITH\", \"IENDS_WITH\", \"INOT_CONTAINS\",",
                    "\"INOT_STARTS_WITH\", \"INOT_ENDS_WITH\", \"MATCHES_PATTERN\",",
                    "\"BETWEEN\", \"BETWEEN_INCLUSIVE\"",
                    "{",
                    "  \"cyoda\": {",
                    "    \"type\": \"group\",",
                    "    \"operator\": \"AND\",",
                    "    \"conditions\": [",
                    "      {",
                    "        \"jsonPath\": \"$.failed\",",
                    "        \"operatorType\": \"EQUALS\",",
                    "        \"value\": false,",
                    "        \"type\": \"simple\"",
                    "      },",
                    "      {",
                    "        \"jsonPath\": \"$.last_modified\",",
                    "        \"operatorType\": \"GREATER_THAN\",",
                    "        \"value\": 1,",
                    "        \"type\": \"simple\"",
                    "      }",
                    "    ]",
                    "  }",
                    "}",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Python comments (# like this) are allowed, but avoid extra narrative or markdown-style formatting."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "entity/prototype.py"
                ]
              },
              "output": {
                "local_fs": [
                  "entity/prototype_cyoda.py"
                ]
              }
            }
          }
        }
      }
    },
    "generated_initial_cyoda_prototype": {
      "transitions": {
        "generate_entities_data_design": {
          "next": "generated_entities_data_design",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_entities_data_design"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please, transform data about entities {entities_list} into the following json: {",
                    "    \"entities\": [",
                    "        {",
                    "            \"entity_name\": \"\", //put entity name here, lowercase, underscore",
                    "            \"entity_data_example\": \"\", //put entity data golden json example according to the requirement, list all entity attributes specified by the user or relevant to the request body",
                    "        }",
                    "    ]",
                    "}"
                  ]
                }
              ],
              "response_format": {
                "name": "entities_design_schema",
                "description": "entities design schema",
                "schema": {
                  "type": "object",
                  "properties": {
                    "entities": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entity_name": {
                            "type": "string"
                          },
                          "entity_data_example": {
                            "type": "object",
                            "properties": {}
                          }
                        },
                        "required": [
                          "entity_name",
                          "entity_data_example"
                        ]
                      }
                    }
                  },
                  "required": [
                    "entities"
                  ]
                }
              },
              "input": {
                "local_fs": [
                  "entity/prototype_cyoda.py",
                  "entity/functional_requirement.md"
                ]
              },
              "output": {
                "local_fs": [
                  "entity/entities_data_design.json"
                ]
              }
            }
          }
        }
      }
    },
    "generated_entities_data_design": {
      "transitions": {
        "generate_prototype_cyoda_workflow": {
          "next": "generated_prototype_cyoda_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Hello, entity_service.add_item has changed, now it additionally expects entity workflow function as an argument. This function will be applied to the entity before it is persisted.",
                    "e.g.",
                    "entity_id = await entity_service.add_item(",
                    "    token=cyoda_auth_service,",
                    "    entity_model=\"{entity_name}\",",
                    "    entity_version=ENTITY_VERSION,  # always use this constant",
                    "    entity=data,  # the validated data object",
                    "    workflow=process_{entity_name} # Workflow function applied to the entity asynchronously before persistence. This function takes this entity data as the only argument. You can change entity state inside this function, get and add entities with a different entity_model (but cannot add/update/delete entity of the same entity_model - it will cause infinite recursion)",
                    ")",
                    "workflow=process_{entity_name}, this function should have a prefix 'process_' which is followed by the entity name.",
                    "entity name should always be underscore lowercase",
                    "Could you please update this code: add workflow function as a parameter and implement it. Return complete code."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "entity/prototype_cyoda.py"
                ]
              },
              "output": {
                "local_fs": [
                  "entity/prototype_cyoda_workflow.py"
                ]
              }
            }
          }
        }
      }
    },
    "generated_prototype_cyoda_workflow": {
      "transitions": {
        "generated_improved_prototype_cyoda_workflow": {
          "next": "generated_improved_prototype_cyoda_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "What do you think, can we move any logic from the endpoint inside newly added functions (workflow=process_{entity_name}) that will be invoked right before persisting entity.",
                    "It will make our code more robust and will 'free' the controllers from excessive logic.",
                    "Any async task (including fire and forget functions) is definitely a candidate to be replaced with process_{entity_name} function as workflow function supports asynchronous code and is a direct alternative for such tasks. It is the right approach - this is required.",
                    "Please do your best to move all the async functions to workflow=process_{entity_name} (lowercase-underscore) functions.",
                    "Workflow function applied to the entity asynchronously before persistence. This function takes this entity data as the only argument. You can change entity state inside this function e.g. entity['attribute'] = new_value.",
                    "You can get and add secondary/supplementary/raw data entities of a different entity_model.",
                    "You cannot apply entity_service.add/update/delete on the current entity! If you need to change this entity state - modify directly e.g. entity['attribute']. The new state will be persisted."
                  ]
                }
              ],
              "output": {
                "local_fs": [
                  "entity/prototype_cyoda_workflow.py"
                ]
              }
            }
          }
        }
      }
    },
    "generated_improved_prototype_cyoda_workflow": {
      "transitions": {
        "finish_prototype_cyoda_workflow": {
          "next": "finished_prototype_cyoda_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return complete refactored application with all functions implemented.",
                    "No detail can be missed. Reason about potential issues and prevent them.",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Python comments (# like this) are allowed, but avoid extra narrative or markdown-style formatting."
                  ]
                }
              ],
              "output": {
                "local_fs": [
                  "entity/prototype_cyoda_workflow.py"
                ]
              }
            }
          }
        }
      }
    },
    "finished_prototype_cyoda_workflow": {
      "transitions": {
        "transform_prototype_cyoda_workflow": {
          "next": "finished_prototype_cyoda_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "memory_tags": [
                "generate_prototype_cyoda_workflow_json"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are given a Python code that includes definitions and usage of an `entity_service` class or function.",
                    "This service add method accepts an `entity_model` argument and optionally a `workflow` argument.",
                    "## 1. Entity Model Node:",
                    "Task: Extract all `entity_model` references passed to `entity_service`.",
                    "Example Python code:",
                    "```python",
                    "import requests",
                    "def my_workflow(data):",
                    "    # Sample processing",
                    "    return {'processed': True}",
                    "",
                    "service = entity_service(entity_model='example', workflow=my_workflow)",
                    "```",
                    "- Here, `entity_model` is `'example'`",
                    "- `workflow` is a reference to `my_workflow`, which must be fully extracted",
                    "You must extract:",
                    "- `entity_model_name`: e.g. `'example'`",
                    "- Workflow function details:",
                    "    - `name`: the function name, e.g. `my_workflow`",
                    "    - `content`: the full code block of the function",
                    "    - `code_with_necessary_imports_and_constants`: include any top-level imports or constants used by the function, if applicable",
                    "JSON Output Example for `entity_models`:",
                    "```json",
                    "{",
                    "  \"entity_model_name\": \"example\",",
                    "  \"workflow_function\": {",
                    "    \"name\": \"my_workflow\",",
                    "    \"content\": \"def my_workflow(data):\\n    return {'processed': True}\",",
                    "    \"code_with_necessary_imports_and_constants\": \"import requests\"",
                    "  }",
                    "}",
                    "```",
                    "## 2. File Without Workflow Node:",
                    "Task: Return the full original Python code, but with all `workflow` arguments removed.",
                    "For the above code, this means:",
                    "- Original:",
                    "```python",
                    "service = entity_service(entity_model='example', workflow=my_workflow)",
                    "```",
                    "- Becomes:",
                    "```python",
                    "service = entity_service(entity_model='example')",
                    "```",
                    "Do not change anything else in the code, even if the `workflow` function is no longer used.",
                    "JSON Output Example for `file_without_workflow`:",
                    "{",
                    "  \"code\": \"service = entity_service(entity_model='example')\"",
                    "}",
                    "```",
                    "## Combined JSON Structure Example (Final Output):",
                    "{",
                    "  \"entity_models\": [",
                    "    {",
                    "      \"entity_model_name\": \"example\",",
                    "      \"workflow_function\": {",
                    "        \"name\": \"my_workflow\",",
                    "        \"content\": \"def my_workflow(data):\\n    return {'processed': True}\",",
                    "        \"code_with_necessary_imports_and_constants\": \"import requests\"",
                    "      }",
                    "    }",
                    "  ],",
                    "  \"file_without_workflow\": {",
                    "    \"code\": \"service = entity_service(entity_model='example')\"",
                    "  }"
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_schema",
                "description": "Schema for entity models and workflow functions",
                "schema": {
                  "type": "object",
                  "properties": {
                    "entity_models": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entity_model_name": {
                            "type": "string"
                          },
                          "workflow_function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "code_with_necessary_imports_and_constants": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "content"
                            ]
                          }
                        },
                        "required": [
                          "entity_model_name",
                          "workflow_function"
                        ]
                      }
                    },
                    "file_without_workflow": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ]
                    }
                  },
                  "required": [
                    "entity_models",
                    "file_without_workflow"
                  ]
                }
              },
              "input": {
                "local_fs": [
                  "entity/prototype_cyoda_workflow.py"
                ]
              },
              "output": {
                "local_fs": [
                  "entity/prototype_cyoda_workflow.json"
                ]
              }
            }
          }
        }
      }
    },
    "finished_prototype_cyoda_workflow_json": {
      "transitions": {
        "register_workflow_with_app": {
          "next": "finished_app_generation_flow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "register_workflow_with_app",
                "description": "register_workflow_with_app",
                "parameters": {
                  "filename": "entity/prototype_cyoda_workflow.json",
                  "routes_file": "routes/routes.py"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "finished_app_generation_flow": {
      "transitions": {
        "update_routes_file": {
          "next": "updated_routes_file",
          "manual": true,
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "update_routes_file"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "hello, please update routes.py file contents converting it to blueprint and fixing imports",
                    "reference for update:",
                    "",
                    "from datetime import timezone, datetime",
                    "import logging",
                    "from quart import Blueprint, request, abort",
                    "from quart_schema import validate, validate_querystring, tag, operation_id",
                    "from app_init.app_init import BeanFactory",
                    "logger = logging.getLogger(__name__)",
                    "FINAL_STATES = {'FAILURE', 'SUCCESS', 'CANCELLED', 'CANCELLED_BY_USER', 'UNKNOWN', 'FINISHED'}",
                    "PROCESSING_STATE = 'PROCESSING'",
                    "routes_bp = Blueprint('routes', __name__)",
                    "factory = BeanFactory(config={'CHAT_REPOSITORY': 'cyoda'})",
                    "entity_service: EntityService = factory.get_services()['entity_service']",
                    "cyoda_auth_service = factory.get_services()[\"cyoda_auth_service\"]",
                    "",
                    "all endpoints and annotations (except for the blueprint ones) should stay intact with the same position",
                    "main app logic will be in app.py- so this file should not contain one",
                    "no startup, shutdown logic necessary - it will also by in app.py",
                    "pay attention at how services should be imported (look at the beanfactory example)",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Python comments (# like this) are allowed, but avoid extra narrative or markdown-style formatting."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "routes/routes.py"
                ]
              },
              "output": {
                "local_fs": [
                  "routes/routes.py"
                ]
              }
            }
          }
        },
        "rollback": {
          "next": "finished_prototype_cyoda_workflow_json",
          "manual": true
        }
      }
    },
    "updated_routes_file": {
      "transitions": {
        "save_env_file": {
          "next": "saved_env_file",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "save_env_file",
                "description": "save_env_file",
                "parameters": {
                  "filename": ".env.template"
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "saved_env_file": {
      "transitions": {
        "question_to_proceed_with_generated_app_editing": {
          "next": "questioned_to_proceed_with_generated_app_editing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "✅ Your application is ready in the {branch_name} branch!\n\n [Cyoda GitHub](https://github.com/Cyoda-platform/quart-client-template/tree/{branch_name}) \uD83D\uDC40 \n\nLet’s bring it to life — together.\n\n ",
              "publish": true
            }
          }
        }
      }
    },
    "questioned_to_proceed_with_generated_app_editing": {
      "transitions": {
        "launch_setup_assistant": {
          "next": "launched_setup_assistant",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_setup_workflow",
                "description": "init_setup_workflow",
                "parameters": {
                  "user_request": "Hello! Please help me start my new application.",
                  "programming_language": "PYTHON"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "launched_setup_assistant": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}