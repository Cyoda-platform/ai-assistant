{
  "initial_state": "none",
  "workflow_name": "edit_existing_workflow",
  "states": {
    "none": {
      "transitions": {
        "start_workflow_update": {
          "next": "started_workflow_update"
        }
      }
    },
    "started_workflow_update": {
      "transitions": {
        "update_workflow_config": {
          "next": "updated_workflow_config",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
              },
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/{entity_name}/Workflow.json"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided entity workflow json.",
                    "Please update it based on the user request \"{user_request}\".",
                    "Please return only workflow json only.",
                    " Avoid loops. ",
                    "Reference information: ",
                    "You can use additional parameters for the workflow json. ",
                    " For example you can set transitions to manual:",
                    "{{\"transitions\": {{\n \"example_transition_name\": {{\n\"next\": \"example_state_2\",\n\"manual\": true}}}}}}",
                    " Or if the user wants more control over action/processor. They can set these parameters explicitly:",
                    "\"action\": {{\n  \"name\": \"example_name\",\n \"owner\": \"CYODA\",\n\"user\": \"CYODA\",\n \"attach_entity\": \"true\",\n  \"calculation_response_timeout_ms\": \"300000\",\n  \"retry_policy\": \"FIXED\", or \"NONE\"\n \"sync_process\": \"false\",\n \"new_transaction_for_async\": \"true\",\n \"none_transactional_for_async\": \"false\",\n\"calculation_nodes_tags\": \"user_provided_value\"\n }} "
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_design_schema",
                "description": "workflow design schema",
                "schema": {
                  "type": "object",
                  "required": [
                    "workflow_name",
                    "initial_state",
                    "states"
                  ],
                  "properties": {
                    "workflow_name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "initial_state": {
                      "type": "string",
                      "enum": [
                        "none"
                      ]
                    },
                    "states": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "transitions"
                        ],
                        "properties": {
                          "transitions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "required": [
                                "next"
                              ],
                              "properties": {
                                "next": {
                                  "type": "string"
                                },
                                "manual": {
                                  "type": "boolean"
                                },
                                "action": {
                                  "type": "object",
                                  "required": [
                                    "name"
                                  ],
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "condition": {
                                  "type": "object",
                                  "required": [
                                    "type"
                                  ],
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "function",
                                        "group",
                                        "simple"
                                      ]
                                    },
                                    "function": {
                                      "type": "object",
                                      "required": [
                                        "name"
                                      ],
                                      "properties": {
                                        "name": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "operator": {
                                      "type": "string"
                                    },
                                    "parameters": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "jsonPath",
                                          "operatorType",
                                          "value",
                                          "type"
                                        ],
                                        "properties": {
                                          "jsonPath": {
                                            "type": "string"
                                          },
                                          "operatorType": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "updated_workflow_config": {
      "transitions": {
        "convert_workflow_to_cyoda_dto": {
          "next": "converted_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "publish": false,
              "function": {
                "name": "convert_workflow_to_dto",
                "description": "convert_workflow_to_dto",
                "parameters": {
                  "workflow_file_name": "src/main/java/com/java_template/entity/{entity_name}/Workflow.json",
                  "output_file_name": "src/main/java/com/java_template/cyoda_dto/{entity_name}/workflow.json"
                }
              }
            }
          }
        }
      }
    },
    "converted_workflow_json": {
      "transitions": {
        "update_processors_code": {
          "next": "updated_processors_code",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "model": {
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "# Please outline the actions (processors) functions according the new requirement \"{user_request}\" that need to be either added or updated.",
                    " And ask the user to proceed with calling update processors command to proceed.",
                    "",
                    "Entity data example:",
                    "{entity_name}",

                    ""
                  ]
                }
              ],
              "publish": true
            }
          }
        }
      }
    },
    "updated_processors_code": {
      "transitions": {
        "done": {
          "next": "locked_chat",
          "action": {
            "name": "notify_user",
            "config": {
              "type": "question",
              "question": "Your workflow has been adjusted as requested. Would you like to review it together or explore additional changes?",
              "publish": true
            }
          }
        }
      }
    }
  }
}
