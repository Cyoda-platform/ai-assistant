{
  "initial_state": "none",
  "workflow_name": "init_setup_workflow_java",
  "states": {
    "none": {
      "transitions": {
        "start_chat": {
          "next": "app_requirements_requested"
        }
      }
    },
    "app_requirements_requested": {
      "transitions": {
        "starting_chat": {
          "next": "prompt_app_requirements_step1"
        }
      }
    },
    "prompt_app_requirements_step1": {
      "transitions": {
        "prompt_sent": {
          "next": "app_requirements_step1",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "approve": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Hello! You’re the Cyoda client app setup assistant, and you’re here to help the user every step of the way.",
                    "Congratulate the user first—they’ve built the Cyoda application! Now, help the user get it started both locally and remotely.",
                    "Let the user know: the code they’ll be working with is in the branch {git_branch}. Make sure they use only this branch for the next steps.",
                    "You’ll guide them through the process one step at a time to ensure everything works smoothly. Let’s begin with the first step.",
                    "",
                    " Let the user know: they should pull changes from remote and locate the .env.template file in the project’s root directory. Once they’ve found it, rename it to .env and open it in a text editor.",
                    "_Tip: Let the user know: they can confirm it’s in the root directory by using their code editor’s file tree or by running `ls` in the terminal._"
                  ]
                }
              ],
              "publish": true
            }
          }
        }
      }
    },
    "app_requirements_step1": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_step1_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prompt_app_requirements_step3",
          "manual": true
        },
        "rollback": {
          "next": "app_requirements_step1_submitted_answer",
          "manual": true
        }
      }
    },
    "app_requirements_step1_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_step1_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this tool when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user is ready to proceed or asks to proceed to the next question. If the user wants to go to the next step - use immediately.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_app_setup_1"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "**Troubleshooting:** Let the user know: if they can’t find the .env.template file, make sure they’re on the correct branch. If it’s still missing, check their .gitignore or ensure the repo was cloned fully, including any submodules."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_step1_processing": {
      "transitions": {
        "process_app_setup_1_processing": {
          "next": "app_requirements_step1",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_1"
                }
              }
            }
          }
        },
        "process_app_setup_1_success": {
          "next": "prompt_app_requirements_step3",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_1"
                }
              }
            }
          }
        }
      }
    },
    "prompt_app_requirements_step3": {
      "transitions": {
        "prompt_sent": {
          "next": "app_requirements_step3",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_env_deploy_status",
                    "description": "Use if the user wants to know the status of their environment build/deploy.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "build_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "build_id"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_issue_technical_user",
                    "description": "Please use ui_function_issue_technical_user for requests like give me a technical user. This will return CYODA_CLIENT_ID and CYODA_CLIENT_SECRET.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "POST"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "model": {},
              "memory_tags": [
                "chat_deploy_env"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " You need to do your best to find build id in your context (chat history). Look for something like Successfully scheduled environment deployment with build ID ... Your environment will be available at: .... You will be notified once your environment is ready. You can check the status of the deployment by asking 'check deploy status for build ID ...'",
                    " If you have a build id in your context - check the deployment status with get_env_deploy_status and let the user know the status.",
                    " If you don't have build id use get_user_info tool to check if the environment is deployed. ",
                    "If the user env is deployed - let the user know the env name, status and call ui_function_issue_technical_user immediately. Let the user know that they can now get their m2m user and client secret for oauth2 flow. ",
                    " If you can't get the build id and the environment is not deployed, ask the user if they have the build id to check the status. ",
                    "If they don't have the build id - tell the user they will need to deploy the environment in a new chat as this chat is for app setup. Tell them to deploy the environment in a new chat and go to the next step (finish discussion).",
                    "If the user asks you to deploy the environment - ask them to start a new chat and say 'deploy my cyoda environment'."
                  ]
                }
              ],
              "publish": true,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_step3": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_step3_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prompt_app_requirements_step4",
          "manual": true
        },
        "rollback": {
          "next": "app_requirements_step3_submitted_answer",
          "manual": true
        }
      }
    },
    "app_requirements_step3_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_step3_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "chat_deploy_env",
                "general_memory_tag"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_env_deploy_status",
                    "description": "Use if the user wants to know the status of their environment build/deploy.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "build_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "build_id"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_issue_technical_user",
                    "description": "Please use ui_function_issue_technical_user for requests like give me a technical user. This will return CYODA_CLIENT_ID and CYODA_CLIENT_SECRET.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "POST"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " You need to do your best to find build id in your context (chat history). Look for something like Successfully scheduled environment deployment with build ID ... Your environment will be available at: .... You will be notified once your environment is ready. You can check the status of the deployment by asking 'check deploy status for build ID ...'",
                    " If you have a build id in your context - check the deployment status with get_env_deploy_status and let the user know the status.",
                    " If you don't have build id use get_user_info tool to check if the environment is deployed. ",
                    "If the user env is deployed - let the user know the env name, status and call ui_function_issue_technical_user immediately. Let the user know that they can now get their m2m user and client secret for oauth2 flow. ",
                    " If you can't get the build id and the environment is not deployed, ask the user if they have the build id to check the status. ",
                    "If they don't have the build id - tell the user they will need to deploy the environment in a new chat as this chat is for app setup. Tell them to deploy the environment in a new chat and go to the next step (finish discussion).",
                    "If the user asks you to deploy the environment - ask them to start a new chat and say 'deploy my cyoda environment'."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30
            }
          }
        }
      }
    },
    "app_requirements_step3_processing": {
      "transitions": {
        "process_app_setup_3_processing": {
          "next": "app_requirements_step3",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_3"
                }
              }
            }
          }
        },
        "process_app_setup_3_success": {
          "next": "prompt_app_requirements_step4",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_3"
                }
              }
            }
          }
        }
      }
    },
    "prompt_app_requirements_step4": {
      "transitions": {
        "prompt_sent": {
          "next": "app_requirements_step4",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "approve": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Let the user know: they can run the application in two ways — either directly from Gradle or by building and running the JAR manually.",
                    "Let the user know: to run the app using Gradle, they should execute `./gradlew runApp`.",
                    "Let the user know: to run the app manually, they should first build it using `./gradlew build` and then run `java -jar build/libs/java-client-template-1.0-SNAPSHOT.jar`.",
                    "Let the user know: the app will be available at `http://localhost:8080/swagger-ui/index.html` once it starts.",
                    "Let the user know: they must have Java 21 installed and set as the active version.",
                    "Let the user know: they should be in the root directory of the project (`java-client-template`) before running any commands.",
                    "Let the user know: if they encounter a `ClassNotFoundException`, they should ensure all dependencies are declared in `build.gradle`.",
                    "Let the user know: if dependencies are missing, they can run `./gradlew --refresh-dependencies` to resolve them.",
                    " Setting values at .env file: ",
                    "- Let the user know: their branch name is used for `GRPC_PROCESSOR_TAG` (they can change it if they like).",
                    "- Let the user know: if they are using shared environment they need to make sure they specify unique ENTITY_VERSION.",
                    " Tell the users if they want to add a machine user once their environment is deployed they can ask for it. They will get CYODA_CLIENT_ID and CYODA_CLIENT_SECRET. "
                  ]
                }
              ],
              "publish": true
            }
          }
        }
      }
    },
    "app_requirements_step4": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_step4_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prompt_app_requirements_step5",
          "manual": true
        },
        "rollback": {
          "next": "app_requirements_step4_submitted_answer",
          "manual": true
        }
      }
    },
    "app_requirements_step4_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_step4_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user is ready to proceed or asks to proceed to the next question. If the user wants to go to the next step - use immediately.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_app_setup_4"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_env_deploy_status",
                    "description": "Use if the user wants to know the status of their environment build/deploy.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "build_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "build_id"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_issue_technical_user",
                    "description": "Please use ui_function_issue_technical_user for requests like give me a technical user. This will return CYODA_CLIENT_ID and CYODA_CLIENT_SECRET.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "POST"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_list_all_technical_users",
                    "description": "Please use ui_function_list_all_technical_users for requests like give me all technical/m2m users. This will return the list of M2M clients.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "GET"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_reset_client_secret",
                    "description": "Please use ui_function_reset_client_secret for requests like please reset the client secret for my technical user. Please use clientId from the user input. The user needs to explicitly give you clientId.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "PUT"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients/{clientId}/secret"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "**Troubleshooting:** Let the user know: missing or malformed values may cause runtime errors—ensure there are no stray spaces and quotes only where needed."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_step4_processing": {
      "transitions": {
        "process_app_setup_4_processing": {
          "next": "app_requirements_step4",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_4"
                }
              }
            }
          }
        },
        "process_app_setup_4_success": {
          "next": "prompt_app_requirements_step5",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_4"
                }
              }
            }
          }
        }
      }
    },
    "prompt_app_requirements_step5": {
      "transitions": {
        "prompt_sent": {
          "next": "app_requirements_step5",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "approve": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Let the user know: with their env configured, they should import the workflows using one of the following options:",
                    "",
                    "**Option 1: Run via Gradle (recommended for local development)**",
                    "```bash",
                    "./gradlew runApp -PmainClass=com.java_template.common.tool.WorkflowImportTool",
                    "```",
                    "",
                    "**Option 2: Build and run the JAR file (recommended for CI or scripting)**",
                    "```bash",
                    "./gradlew bootJarWorkflowImport",
                    "java -jar build/libs/java-client-template-1.0-SNAPSHOT-workflow-import.jar",
                    "```",
                    "Let the user know: the workflows should appear in their Cyoda UI once the import completes."
                  ]
                }
              ],
              "publish": true
            }
          }
        }
      }
    },
    "app_requirements_step5": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_step5_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prompt_app_requirements_step6",
          "manual": true
        },
        "rollback": {
          "next": "app_requirements_step5_submitted_answer",
          "manual": true
        }
      }
    },
    "app_requirements_step5_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_step5_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this tool when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_new_entity_for_existing_app",
                    "description": "Launches workflow that is necessary to help the user add a new entity to the existing application. Key factor is that an application already exists and the user explicitly asks to add a new entity (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself. Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_new_workflow",
                    "description": "Launches workflow that is necessary to help the user add a new workflow. Key factor is that an application already exists and the user explicitly asks to add a new workflow (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself.  Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_api_existing_app",
                    "description": "Launches workflow that is necessary to help the user edit/update existing api (Controller.java). Key factor is that an application already exists and the user explicitly asks to add changes to com.java_template.controller.Controller.java  (else default to edit_existing_app_design_additional_feature). If the user doesn't specify the branch, ask yourself.  Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_existing_workflow",
                    "description": "Launches workflow that is necessary to help the user edit an existing workflow/workflow json. Key factor is that an application already exists and the user explicitly asks to update a workflow (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself.  Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_existing_processors",
                    "description": "Launches workflow that is necessary to help the user update workflow processors code. Key factor is that an application already exists and the user explicitly asks to edit/update workflow processors/functions/Workflow.java code (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself.  Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user is ready to proceed or asks to proceed to the next question. If the user wants to go to the next step - use immediately.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_app_setup_5"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_env_deploy_status",
                    "description": "Use if the user wants to know the status of their environment build/deploy.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "build_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "build_id"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_issue_technical_user",
                    "description": "Please use ui_function_issue_technical_user for requests like give me a technical user. This will return CYODA_CLIENT_ID and CYODA_CLIENT_SECRET.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "POST"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_list_all_technical_users",
                    "description": "Please use ui_function_list_all_technical_users for requests like give me all technical/m2m users. This will return the list of M2M clients.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "GET"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_reset_client_secret",
                    "description": "Please use ui_function_reset_client_secret for requests like please reset the client secret for my technical user. Please use clientId from the user input. The user needs to explicitly give you clientId.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "PUT"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients/{clientId}/secret"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "**Troubleshooting:** Let the user know: if the import fails, they should verify their JSON formats and version compatibility, and check the Cloud logs for detailed import errors."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_step5_processing": {
      "transitions": {
        "process_app_setup_5_processing": {
          "next": "app_requirements_step5",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_5"
                }
              }
            }
          }
        },
        "process_app_setup_5_success": {
          "next": "prompt_app_requirements_step6",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_5"
                }
              }
            }
          }
        }
      }
    },
    "prompt_app_requirements_step6": {
      "transitions": {
        "prompt_sent": {
          "next": "app_requirements_step6",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "approve": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Let the user know: they should test their API by visiting `http://localhost:8000` (or their configured port) and ensure everything looks good.",
                    "- Let the user know: when they save `{entity_name}`, an event will be sent and processed by their workflow code in `entity/{entity_name}/Workflow.java` and the corresponding JSON."
                  ]
                }
              ],
              "publish": true
            }
          }
        }
      }
    },
    "app_requirements_step6": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_step6_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "ready_to_lock_chat",
          "manual": true
        },
        "rollback": {
          "next": "app_requirements_step6_submitted_answer",
          "manual": true
        }
      }
    },
    "app_requirements_step6_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_step6_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this tool when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_existing_app_design_additional_feature",
                    "description": "Launches workflow that is necessary to help the user plan how to edit an existing application or add a new feature. Key factor is that an application already exists. if the user doesn't specify the branch, ask yourself.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_new_entity_for_existing_app",
                    "description": "Launches workflow that is necessary to help the user add a new entity to the existing application. Key factor is that an application already exists and the user explicitly asks to add a new entity (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself. Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_new_workflow",
                    "description": "Launches workflow that is necessary to help the user add a new workflow. Key factor is that an application already exists and the user explicitly asks to add a new workflow (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself. Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_api_existing_app",
                    "description": "Launches workflow that is necessary to help the user edit/update existing api (Controller.java). Key factor is that an application already exists and the user explicitly asks to add changes to com.java_template.controller.Controller.java (else default to edit_existing_app_design_additional_feature). If the user doesn't specify the branch, ask yourself. Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_existing_workflow",
                    "description": "Launches workflow that is necessary to help the user edit an existing workflow/workflow json. Key factor is that an application already exists and the user explicitly asks to update a workflow (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself. Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "edit_existing_processors",
                    "description": "Launches workflow that is necessary to help the user update workflow processors code. Key factor is that an application already exists and the user explicitly asks to edit/update workflow processors/functions/Workflow.java code (else default to edit_existing_app_design_additional_feature). if the user doesn't specify the branch, ask yourself. Git branch is required. Ask the user explicitly or use the last branch from messages. Never default to main branch.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "git_branch": {
                          "type": "string"
                        },
                        "user_request": {
                          "type": "string"
                        },
                        "entity_name": {
                          "type": "string"
                        },
                        "programming_language": {
                          "type": "string",
                          "enum": [
                            "JAVA"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "git_branch",
                        "entity_name",
                        "programming_language"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user is ready to proceed or asks to proceed to the next question. If the user wants to go to the next step - use immediately.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_app_setup_6"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_issue_technical_user",
                    "description": "Please use ui_function_issue_technical_user for requests like give me a technical user. This will return CYODA_CLIENT_ID and CYODA_CLIENT_SECRET.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "POST"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_list_all_technical_users",
                    "description": "Please use ui_function_list_all_technical_users for requests like give me all technical/m2m users. This will return the list of M2M clients.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "GET"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_reset_client_secret",
                    "description": "Please use ui_function_reset_client_secret for requests like please reset the client secret for my technical user. Please use clientId from the user input. The user needs to explicitly give you clientId.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "PUT"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients/{clientId}/secret"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_env_deploy_status",
                    "description": "Use if the user wants to know the status of their environment build/deploy.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "build_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "build_id"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_issue_technical_user",
                    "description": "Please use ui_function_issue_technical_user for requests like give me a technical user. This will return CYODA_CLIENT_ID and CYODA_CLIENT_SECRET.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "POST"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "file"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_list_all_technical_users",
                    "description": "Please use ui_function_list_all_technical_users for requests like give me all technical/m2m users. This will return the list of M2M clients.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "GET"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "ui_function_reset_client_secret",
                    "description": "Please use ui_function_reset_client_secret for requests like please reset the client secret for my technical user. Please use clientId from the user input. The user needs to explicitly give you clientId.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": [
                            "PUT"
                          ]
                        },
                        "path": {
                          "type": "string",
                          "enum": [
                            "/api/clients/{clientId}/secret"
                          ]
                        },
                        "response_format": {
                          "type": "string",
                          "enum": [
                            "text"
                          ]
                        }
                      },
                      "required": [
                        "method",
                        "path",
                        "response_format"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "**Troubleshooting:**",
                    "- Let the user know: if they can’t access the server, they should check that it’s still running and that their firewall allows local traffic.",
                    "- Let the user know: if no GRPC event occurs, they should verify their endpoint triggers GRPC and inspect the logs to trace payload delivery."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_step6_processing": {
      "transitions": {
        "process_app_setup_6_processing": {
          "next": "app_requirements_step6",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_6"
                }
              }
            }
          }
        },
        "process_app_setup_6_success": {
          "next": "ready_to_lock_chat",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_6"
                }
              }
            }
          }
        }
      }
    },
    "ready_to_lock_chat": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🎉 Congrats on launching your first app! Your hard work paid off—this is just the beginning. Keep iterating, stay creative, and aim high! 🚀 Join our [Discord](https://discord.gg/95rdAyBZr2) to share feedback and stay updated. 🙌",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    }
  }
}
