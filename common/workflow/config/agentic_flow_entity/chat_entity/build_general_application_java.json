{
  "initial_state": "none",
  "workflow_name": "build_general_application_java",
  "states": {
    "none": {
      "transitions": {
        "initialize": {
          "next": "initialized"
        }
      }
    },
    "initialized": {
      "transitions": {
        "build_new_app": {
          "next": "building_new_app",
          "condition": {
            "name": "build_new_app_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "build_new_app",
                "type": "simple"
              }
            ]
          }
        },
        "discuss_functional_requirements": {
          "next": "chats_initialized",
          "condition": {
            "name": "discuss_functional_requirements_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "discuss_functional_requirements",
                "type": "simple"
              }
            ]
          }
        },
        "edit_functional_requirements": {
          "next": "functional_requirements_specified",
          "condition": {
            "name": "edit_functional_requirements_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "edit_functional_requirements",
                "type": "simple"
              }
            ]
          }
        },
        "prototype_discussion_requested": {
          "next": "prototype_discussion_requested_submitted_answer",
          "condition": {
            "name": "prototype_discussion_requested_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "prototype_discussion_requested",
                "type": "simple"
              }
            ]
          }
        },
        "resume_migration": {
          "next": "start_environment_setup",
          "condition": {
            "name": "resume_migration_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_migration",
                "type": "simple"
              }
            ]
          }
        },
        "resume_prototype_cyoda_workflow": {
          "next": "generated_initial_cyoda_prototype",
          "condition": {
            "name": "resume_prototype_cyoda_workflow_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_prototype_cyoda_workflow",
                "type": "simple"
              }
            ]
          }
        },
        "resume_gen_prototype_cyoda_workflow_json": {
          "next": "validated_controller",
          "condition": {
            "name": "resume_gen_prototype_cyoda_workflow_json_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_gen_prototype_cyoda_workflow_json",
                "type": "simple"
              }
            ]
          }
        },
        "resume_gen_entities": {
          "next": "validated_controller",
          "condition": {
            "name": "resume_gen_entities_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_gen_entities",
                "type": "simple"
              }
            ]
          }
        },
        "resume_post_app_build_steps": {
          "next": "finished_app_generation_flow",
          "condition": {
            "name": "resume_post_app_build_steps_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_post_app_build_steps",
                "type": "simple"
              }
            ]
          }
        }
      }
    },
    "building_new_app": {
      "transitions": {
        "welcome_user": {
          "next": "greeting_sent",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "\uD83D\uDC4B Welcome to Cyoda Application Builder!\nWe‚Äôre excited to help you build your app ‚Äî and just so you know, I‚Äôm a Cyoda app too, built with the same tools you‚Äôre about to use!\n\n\uD83D\uDD27 Process:\n\nDefine requirements & APIs\n\nBuild core logic prototype\n\nMigrate to Cyoda backend (event-driven & production-ready)\n\n\nüëâ Learn more: https://cyoda.com\n\nüöÄ After that, you‚Äôll get guidance on launching your app‚Äîand we can continue editing it as needed.\n\nüå± We're in alpha!\nIf something goes wrong or you have questions, reach out on [Discord](https://discord.gg/95rdAyBZr2) or click Restart workflows in the entities progress window.\n\nLet‚Äôs build something great together!\n\n```mermaid\ngraph TD\n    A([Define & Confirm Functional Requirements]):::bar e1@== build_general_application.functional_requirements_specified\n    ==> B([Build Sketch Prototype]):::bar\n    B e2@== functional_requirements_generated ==> C([Validate Functionality & API Endpoints]):::bar\n    C e3@== prototype_discussion_requested ==> D{Are You Happy With the Prototype?}:::bar\n    D e4@== migration_confirmation_requested ==> E([Migrate to Cyoda Backend]):::bar\n    E e5@== finished_app_generation_flow ==> F([Event-Driven Architecture + Non-Functional Requirements]):::bar\n    F e6@== init_setup_workflow ==> G([Launch Your App]):::bar\n    G e7@== edit_existing_workflow ==> H([Iterate & Edit as Needed]):::bar\n\n    D e1@== No ==> B\n\n    H e8@== locked_chat ==> I([Need Help? Click Retry or Ask on Discord]):::bar\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }\n    e8@{ animate: true }\n    classDef bar stroke:#0f0\n```",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "greeting_sent": {
      "transitions": {
        "clone_repo": {
          "next": "repository_cloned",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "clone_repo",
                "description": "Clones template repository"
              },
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "repository_cloned": {
      "transitions": {
        "init_chats": {
          "next": "chats_initialized",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_chats",
                "description": "Initialises ai service"
              },
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "chats_initialized": {
      "transitions": {
        "generate_original_requirements": {
          "next": "generated_original_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation",
                "general_memory_tag"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return the requirement specified by the user. It is very important to preserve all the business logic and technical details, like specific APIs and so on.",
                    "Output format: respond in a markdown format. Do not miss any details."
                  ]
                }
              ],
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/user_requirement.md"
                ]
              }
            }
          }
        }
      }
    },
    "generated_original_requirements": {
      "transitions": {
        "notify_generated_original_requirements": {
          "next": "notified_generated_original_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "‚úÖ  Saved original user requirements to `src/main/java/com/java_template/prototype/user_requirement.md`. Continuing to generate the first prototype....‚è≥\uD83D\uDE0C",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "notified_generated_original_requirements": {
      "transitions": {
        "process_initial_question": {
          "next": "app_requirements_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "memory_tags": [
                "requirements_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a Java Spring Boot developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks, databases or technologies, the final application will be in Java Spring Boot on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. Format it with markdown.",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "app_requirements_finalized",
          "manual": true
        },
        "rollback": {
          "next": "app_requirements_requested_submitted_answer",
          "manual": true
        }
      }
    },
    "app_requirements_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if you have enough information or the user asks to proceed to the next question. Summarise the requirement in a couple of sentences and set to true if the user chooses your example answers or after 6 attempts! Do not hold the user too long.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_application_requirement"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a Java Spring Boot developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    "Please, help the user define the functional requirements using an Event-Driven Architecture (EDA) approach.",
                    "",
                    "IMPORTANT: Think in terms of entities and events. In EDA:",
                    "- Each entity add operation is an EVENT that triggers automated processing",
                    "- When you save an entity, Cyoda automatically calls process{EntityName} events for default cases",
                    "- When you save an entity, Cyoda automatically calls process{EntityName}{ProcessorName} events if the user explicitly asks for processor",
                    "- When you save an entity, Cyoda automatically validates the entity using check{EntityName}{CriteriaName} events if the user explicitly asks for criteria/conditions/validations/checks",
                    "- **EDA Principle**: Favor immutable entity creation over updates/deletes to maintain event history. Do not add update/delete endpoints unless user wants it explicitly.",
                    "- Get api is just retrieval, no need to apply EDA to data retrieval operations.",
                    "- For example if we need to ingest data we can have a job entity. Once job entity is saved, processJob event is called where we ingests the data.",
                    "- Focus on business entities, job entities, or orchestration entities that represent your domain",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " Ask questions if something is not clear enough and make suggestions that will help us formulate formal specification in the next iterations.",
                    " Make sure your answers are friendly but up-to-the point and do not start with any exclamations, but rather answer the question. Max tokens = 300.",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks, databases or technologies, the final application will be inJava Spring Boot on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. format it with markdown ",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Call finish_discussion immediately after 6 attempts. Do not hold the user too long they will bored.",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested_processing": {
      "transitions": {
        "process_application_requirement_processing": {
          "next": "app_requirements_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "description": "not_stage_completed",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        },
        "process_application_requirement_success": {
          "next": "app_requirements_finalized",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "description": "Clones template repository",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        }
      }
    },
    "app_requirements_finalized": {
      "transitions": {
        "ask_about_api": {
          "next": "proceeded_to_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "Next up: functional requirements.\nStay tuned ‚Äî thoughtful thinking in progress. \uD83E\uDDE0‚ú®",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "proceeded_to_functional_requirements": {
      "transitions": {
        "define_functional_requirements": {
          "next": "functional_requirements_specified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please help me define the functional requirements for my project using an Event-Driven Architecture (EDA) approach.",
                    "",
                    "## IMPORTANT EDA CONCEPTS:",
                    "In Event-Driven Architecture:",
                    "- Each entity add operation is an **EVENT** that triggers automated processing",
                    "- When you save an entity, Cyoda automatically calls `process{EntityName}()` events if there is only one processor",
                    "- When you save an entity, Cyoda automatically calls process{EntityName}{ProcessorName} events if the user explicitly asks for processor",
                    "- When you save an entity, Cyoda automatically validates the entity using check{EntityName}{CriteriaName} events if the user explicitly asks for criteria/conditions/validations/checks",
                    "- **EDA Principle**: Favor immutable entity creation over updates/deletes to maintain event history. Do not add update/delete endpoints unless user wants it explicitly.",
                    "- Example: Save a `Job` entity ‚Üí triggers `processJob()` event ‚Üí performs data ingestion",
                    "- Focus on business entities, job entities, or orchestration entities that represent your domain",
                    "- **Key Pattern**: Entity persistence triggers the process method that does the heavy lifting",
                    "- **EDA Principle**: Favor immutable entity creation over updates/deletes to maintain event history",
                    "",
                    "## RESPONSE STRUCTURE:",
                    "**Start your answer with outlining the entities and their fields in this format:**",
                    "",
                    "### 1. Entity Definitions",
                    "```",
                    "EntityName:",
                    "- field1: DataType (description/purpose)",
                    "- field2: DataType (description/purpose)",
                    " Do not use enum - not supported temporarily.",
                    "```",
                    "",
                    "### 2. Process Method Flows",
                    "**Continue with explaining the basic flow of each processEntityName() method:**",
                    "",
                    "**Example:**",
                    "```",
                    "processJob() Flow:",
                    "1. Initial State: Job created with PENDING status",
                    "2. Validation: Check job parameters and data sources",
                    "3. Processing: Execute data ingestion/transformation",
                    "4. Completion: Update status to COMPLETED/FAILED",
                    "5. Notification: Send results to configured endpoints",
                    "```",
                    "",
                    "## REQUIREMENTS TO DEFINE:",
                    "",
                    "### 1. Business Entities (Max 3, Min 1)",
                    "- **Orchestration entities** (Job, Task, Workflow) take precedence",
                    "- **Business domain entities** (Order, Customer, Product) are secondary",
                    "- **Limit**: Only ONE orchestration entity allowed",
                    "- **Requirement**: At least one entity is mandatory",
                    "",
                    "### 2. API Endpoints Design Rules",
                    "- **POST endpoints**: Entity creation (triggers events) + business logic. POST endpoint that adds an entity should return only entity `technicalId` - this field is not included in the entity itself, it's a datastore imitated specific field. Nothing else.",
                    "- **GET endpoints**: ONLY for retrieving stored application results",
                    "- **GET by technicalId**: ONLY for retrieving stored application results by technicalId - should be present for all entities that are created via POST endpoints.",
                    "- **GET by condition**: ONLY for retrieving stored application results by non-technicalId fields - should be present only if explicitly asked by the user.",
                    "- **GET all: optional.",
                    "- If you have an orchestration entity (like Job, Task, Workflow), it should have a POST endpoint to create it, and a GET by technicalId to retrieve it. You will most likely not need any other POST endpoints for business entities as saving business entity is done via the process method.",
                    "- **Business logic rule**: External data sources, calculations, processing ‚Üí POST endpoints",
                    "- **EDA Principle**: Favor immutable entity creation over updates/deletes to maintain event history. Avoid update/delete endpoints unless user wants it explicitly.",
                    "- **Data Modification**: Instead of PUT/PATCH/DELETE, use POST to create new entity states or status changes. Apply only if the user explicitly asks updates/deletes.",
                    "This architectural decision aligns well with modern microservices and event-driven patterns where data flows through events rather than direct modifications",
                    "",
                    "### 3. Event Processing Workflows",
                    "Detail what happens in each `processEntityName()` method after entity persistence.",
                    "",
                    "### 4. Request/Response Formats",
                    "Specify JSON structures for all API endpoints.",
                    "",
                    "## VISUAL REPRESENTATION:",
                    "Provide Mermaid diagrams showing:",
                    "",
                    "**State Diagram Example:**",
                    "```mermaid",
                    "stateDiagram-v2",
                    "    [*] --> EntityCreated",
                    "    EntityCreated --> Processing : processEntity()",
                    "    Processing --> Completed : success",
                    "    Processing --> Failed : error",
                    "    Completed --> [*]",
                    "    Failed --> [*]",
                    "```",
                    "",
                    "**Required Diagrams:**",
                    "- Entity lifecycle state diagrams",
                    "- Event-driven processing chains",
                    "- User interaction sequence flows",
                    "",
                    "## FORMATTING REQUIREMENTS:",
                    "- Keep requirements minimalistic and focused",
                    "- **Each Mermaid diagram must be in complete markdown code blocks**",
                    "- Start with ```mermaid and end with ``` on separate lines",
                    "- Return markdown document without triple backtick wrapping",
                    "- Min 1 entity is mandatory. Max 3 entities.",
                    " - If there is an orchestration entity (like Job, Task, Workflow), it should be the first one defined.",
                    "- Ensure all Mermaid blocks are properly closed"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "functional_requirements_specified": {
      "transitions": {
        "ask_about_api": {
          "next": "api_inquired",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "Would you like to improve or make adjustments to the functional requirements and the API?\nOpen to feedback if you‚Äôve got any ideas ‚Äî I‚Äôm all ears\uD83D\uDC42\uD83D\uDC42, well... sort of\uD83D\uDE0F.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "api_inquired": {
      "transitions": {
        "submit_answer": {
          "next": "api_inquired_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "api_discussion_completed",
          "manual": true
        },
        "rollback": {
          "next": "api_inquired_submitted_answer",
          "manual": true
        }
      }
    },
    "api_inquired_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "api_inquired_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user asks to proceed or if the user is satisfied with the current result (e.g. says it is correct, valid, works for them). If set to false notify the user you're going to proceed with prototype generation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_api"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Please, adjust the the functional requirements and the API according to the user request. ",
                    " Once the user is happy with the result or has no more questions, please call finish_discussion. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "api_inquired_processing": {
      "transitions": {
        "process_api_inquiry_processing": {
          "next": "api_inquired",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        },
        "process_api_inquiry_success": {
          "next": "api_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        }
      }
    },
    "api_discussion_completed": {
      "transitions": {
        "notify_prototype_generation": {
          "next": "prototype_generation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "üåü Let‚Äôs get started on the first prototype! üõ†Ô∏è\n\nJust give me a moment to think everything through... ü§îüí≠\n\nI'll finalize the functional requirements first, then dive into prototype generation. üß†‚ú®\n\nüöß Initial prototype is now in progress... üöÄüí°\n\nWant to learn more about entity databases and event-driven architectures?\nCheck these out:\n- [What‚Äôs an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_generation_notified": {
      "transitions": {
        "generate_functional_requirements": {
          "next": "generated_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return well-formatted final version of the functional requirements which was confirmed by the user."
                  ]
                }
              ],
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              }
            }
          }
        }
      }
    },
    "generated_functional_requirements": {
      "transitions": {
        "notify_generated_functional_requirements": {
          "next": "notified_generated_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "‚úÖ  Saved functional requirements to `src/main/java/com/java_template/prototype/functional_requirement.md`. Continuing to generate the first prototype....‚è≥\uD83D\uDE0C",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "notified_generated_functional_requirements": {
      "transitions": {
        "extract_entities_from_prototype": {
          "next": "entities_extracted",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": false,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                }
              ],
              "memory_tags": [
                "generate_workflow_from_prototype",
                "general_memory_tag",
                "requirements_generation",
                "prototype_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided with the requirements document.",
                    "",
                    "You need to identify entities from the requirements document.",
                    "Min 1 entity, Max 3 entities: orchestration entities like 'Job', 'Task' take precedence, then business domain entities.",
                    " There can be only one orchestration entity. But you should call add_application_resource at least once",
                    "For each entity, call add_application_resource with:",
                    "- resource_path: 'src/main/java/com/java_template/application/entity/{EntityName}.java'",
                    "- file_contents: entity java pojo with lombok @Data annotation",
                    "",
                    "Use this entity class template (replace EntityName with your actual entity name):",
                    "",
                    "package com.java_template.application.entity;",
                    "",
                    "import com.java_template.common.workflow.CyodaEntity;",
                    "import com.java_template.common.workflow.OperationSpecification;",
                    "import org.cyoda.cloud.api.event.common.ModelSpec;",
                    "import lombok.Data;",
                    "import static com.java_template.common.config.Config.ENTITY_VERSION;",
                    "",
                    "@Data",
                    "public class EntityName implements CyodaEntity {",
                    "    public static final String ENTITY_NAME = \"EntityName\";",
                    "    // Add your entity fields here",
                    "",
                    "    public EntityName() {}",
                    "",
                    "    @Override",
                    "    public OperationSpecification getModelKey() {",
                    "        ModelSpec modelSpec = new ModelSpec();",
                    "        modelSpec.setName(ENTITY_NAME);",
                    "        modelSpec.setVersion(Integer.parseInt(ENTITY_VERSION));",
                    "        return new OperationSpecification.Entity(modelSpec, ENTITY_NAME);",
                    "    }",
                    "",
                    "    @Override",
                    "    public boolean isValid() {",
                    "        return true;",
                    "    }",
                    "}",
                    "",
                    "Replace:",
                    "- EntityName with your actual entity class name (PascalCase)",
                    "- Add appropriate fields based on the prototype code",
                    "- Implement proper validation logic in isValid() method",
                    "",
                    "It should be a single class, no nested classes or enum. If there is necessity to use enum - use string instead.",
                    "When creating entity classes that implement CyodaEntity:\n1.\n",
                    "POST endpoints that add entities should return only technical id. Nothing else.",
                    "Use String types for foreign key references when they represent serialized UUIDs\n4. ",
                    "Update validation logic to match the actual field types (use .isBlank() for String fields, not null checks for UUID fields)\n",
                    "5. Ensure @Data annotation from Lombok generates all necessary getters/setters",
                    " CRITICAL: add_application_resource should be called at least once.",
                    "Requirement:"
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              },
              "tool_choice": "auto",
              "max_iteration": 5,
              "approve": true
            }
          }
        }
      }
    },
    "entities_extracted": {
      "transitions": {
        "notify_entities_extracted": {
          "next": "notified_entities_extracted",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "‚úÖ  Saved entities to `src/main/java/com/java_template/application/entity/*`. Continuing to generate the first prototype....‚è≥\uD83D\uDE0C",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "notified_entities_extracted": {
      "transitions": {
        "generate_prototype_sketch": {
          "next": "prototype_completed",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in 'src/main/java/com/java_template/application/entity' to get the list of entities created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of a file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "memory_tags": [
                "requirements_generation",
                "prototype_generation"
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/functional_requirement.md",
                  "src/main/java/com/java_template/prototype/user_requirement.md"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/EntityControllerPrototype.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "## Task: Generate EntityControllerPrototype.java",
                    "",
                    "Create a Spring Boot REST controller prototype that demonstrates the API design and validates functionality before full implementation.",
                    "",
                    "### 1. DISCOVERY PHASE (MANDATORY)",
                    "**You can use the following tools:**",
                    "- Use `list_directory_files` to discover all entity classes in 'src/main/java/com/java_template/application/entity'",
                    "- Use `read_file` to examine each entity class and understand their fields and structure",
                    "",
                    "### 2. CONTROLLER STRUCTURE",
                    "```java",
                    "package com.java_template.prototype;",
                    "",
                    "@RestController",
                    "@RequestMapping(path = \"/prototype\")",
                    "@Slf4j",
                    "public class EntityControllerPrototype {",
                    "    // Implementation here",
                    "}",
                    "```",
                    "",
                    "### 3. REQUIRED IMPORTS",
                    "```java",
                    "import org.springframework.web.bind.annotation.*;",
                    "import org.springframework.http.ResponseEntity;",
                    "import org.springframework.http.HttpStatus;",
                    "import lombok.extern.slf4j.Slf4j;",
                    "import java.util.concurrent.ConcurrentHashMap;",
                    "import java.util.concurrent.atomic.AtomicLong;",
                    "import java.util.*;",
                    "```",
                    "",
                    "### 4. EVENT-DRIVEN ARCHITECTURE IMPLEMENTATION",
                    "",
                    "**IMPORTANT: EDA/NoSQL Architecture Principles**",
                    "- This system follows **append-only, immutable data patterns**",
                    "- **NO UPDATE - use versioning",
                    "- Avoid deletes unless explicitly required",
                    "- Focus on **event creation** rather than data modification",
                    "",
                    "**Cache Structure (for each discovered entity):**",
                    "```java",
                    "private final ConcurrentHashMap<String, EntityName> entityNameCache = new ConcurrentHashMap<>();",
                    "private final AtomicLong entityNameIdCounter = new AtomicLong(1);",
                    "```",
                    "",
                    "**Event-Driven Flow Pattern (EDA-Compliant):**",
                    "1. **POST /prototype/entityName** ‚Üí Create entity ‚Üí Save to cache ‚Üí Trigger `processEntityName(entity)` ‚Üí Return response",
                    "- If you have an orchestration entity (like Job, Task, Workflow), it should have a POST endpoint to create it, and a GET by technicalId to retrieve it. You will most likely not need any other POST endpoints for business entities as saving business entity is done via the process method.",
                    "2. **GET /prototype/entityName/{id}** ‚Üí Retrieve from cache ‚Üí Return entity. Each entity should have a GET by technicalId.",
                    "3. Only if the user explicitly asked for update: **POST /prototype/entityName/{id}/update** ‚Üí Create new entity version ‚Üí Save to cache ‚Üí Trigger `processEntityName(entity)` ‚Üí Return response (still avoid unless necessary)",
                    "4. Only if the user explicitly asked for delete/deactivate: **POST /prototype/entityName/{id}/deactivate** ‚Üí Create deactivation record ‚Üí Save to cache ‚Üí Return confirmation (still avoid unless necessary)",
                    "",
                    "**CRITICAL: No PUT/PATCH/DELETE endpoints** - use POST for all state changes to maintain event history",
                    " Keep endpoints to the minimum, just POST to register event and get to retrieve information",
                    " Concentrate on process entity methods - fully implement business logic there, including API calls, calculations, etc.",
                    "### 5. CRITICAL: processEntityName() METHODS (variation: process{EntityName}{ProcessorName}() - if stated in the functional requirement). There might be multiple processors and criteria (check{EntityName}{CriteriaName}() methods. You should call them one by one after save. If criteria returns true then processor etc) .",
                    "**Each entity MUST have a corresponding process method with meaningful business logic:**",
                    "",
                    "```java",
                    "private void process{EntityName}(String technicalId, EntityName entity) {",
                    "     IMPLEMENT ACTUAL BUSINESS LOGIC HERE",
                    "     Examples:",
                    "     - Data validation and enrichment",
                    "     - External API calls",
                    "     - Triggering workflows",
                    "     - Creating related entities",
                    "     - Sending notifications",
                    "    ",
                    "    Replace with actual business logic from requirements. no todos. here should be real logic.",
                    "}",
                    "CRITICAL: If the user provides any external API calls, make sure to implement them.",
                    "```",
                    "",
                    "### 8. IMPLEMENTATION GUIDELINES",
                    "- **Real implementations preferred**: Use actual logic where requirements are clear",
                    "- **Logging**: Use `log.info()` for successful operations, `log.error()` for failures",
                    "- **ID generation**: Use AtomicLong for simple incremental IDs",
                    "- Return appropriate HTTP status codes (200, 201, 400, 404, 500)",
                    "",
                    "**Remember**: This is a working prototype to validate API design and business logic flow. The processEntityName() methods are the core of the event-driven architecture and must contain substantial business logic relevant to your requirements.",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_completed": {
      "transitions": {
        "ask_to_discuss_prototype": {
          "next": "prototype_discussion_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "‚úÖ First Prototype Ready!\n\nThe initial prototype based on your functional requirements is now ready! You can run and test it locally or directly in **GitHub Codespaces**.\n\n---\n\n### ‚ñ∂Ô∏è How to Run the Prototype\n\n#### **Option 1: GitHub Codespaces **\nYou can open the repo in GitHub Codespaces and launch the prototype there:\n\n1. Open the repository in [GitHub Codespaces](https://github.com/Cyoda-platform/java-client-template/tree/{git_branch}).\n2. In the Codespace terminal, run:\n\n```bash\n# Update package list\nsudo apt update\n# Install Java 21 (headless ‚Äî no GUI tools)\nsudo apt install -y openjdk-21-jdk-headless\n# Set Java 21 as active version\nexport JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n# Run the prototype app\n./gradlew test --tests PrototypeApplicationTest\n```\n\n3. Make the app accessible from the browser:\n - In the **Ports** panel (bottom of the IDE), right-click on port `8080` and select **\"Change Port Visibility\" ‚Üí \"Public\"**\n - Alternatively, after starting the app, click **\"Make Public\"** in the popup.\n\n4. Preview the app in the browser:\n `/swagger-ui/index.html` - Swagger UI: `https://<your-codespace-url>/swagger-ui/index.html`\n - OpenAPI specification: `https://<your-codespace-url>/v3/api-docs`\n\n> *Codespaces will provide a forwarded port URL ‚Äî just append `/swagger-ui/index.html` or `/v3/api-docs` to it.*\n\n---\n\n#### **Option 2: Local Environment**\n\n1. Make sure you're on the correct branch and up to date:\n\n```bash\ngit checkout {git_branch}\ngit pull\n```\n\n2. Run the prototype app:\n\n```bash\n./gradlew test --tests PrototypeApplicationTest\n```\n\n3. Open your browser and go to:\n- [http://localhost:8080/swagger-ui/index.html](http://localhost:8080/swagger-ui/index.html)\n- or [http://localhost:8080/v3/api-docs](http://localhost:8080/v3/api-docs)\n\n---\n\n### üß™ Testing\n\nYou'll find example requests and responses in:\nüìÑ `prototype/functional_requirement.md`\n\nUse these to test the API via the Swagger UI.\n\n---\n\n### ‚úÖ Approval or Feedback\n\nIf everything looks good, feel free to approve it.\nIf anything's off or you'd like changes, just ping me here. üôå\n\n> ‚ö†Ô∏è **Note:** This prototype runs in isolated mode with only the essential components (EntityControllerPrototype + entities) loaded, without authentication or gRPC dependencies.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested": {
      "transitions": {
        "submit_answer": {
          "next": "prototype_discussion_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prototype_discussion_completed",
          "manual": true
        },
        "rollback": {
          "next": "prototype_discussion_requested_submitted_answer",
          "manual": true
        }
      }
    },
    "prototype_discussion_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "prototype_discussion_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "prototype_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in 'src/main/java/com/java_template/application/entity' to get the list of entities created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of a file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_prototype"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated EntityControllerPrototype.java code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java' or 'src/main/java/com/java_template/application/entity/{EntityName}.java' to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user. Do not simply reuse the file content you read; always generate a new, modified version of the code that reflects the user's latest requests.",
                    " Finally, make sure to save the file only after you have applied the required changes. Carefully verify that the updated content reflects your modifications, and do not proceed with saving unless actual updates have been made. Finally apply the necessary changes to the src/main/java/com/java_template/prototype/EntityControllerPrototype.java file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the EntityControllerPrototype.java file if necessary, answer the question, no save needed in this case.",
                    " Call add_application_resource tool to save changes with the full contents of the file after your changes and the full path to the file.",
                    " Path for the prototype: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java'",
                    " Path for the entity: 'src/main/java/com/java_template/application/entity/{EntityName}.java'",
                    " Path for the functional requirements: 'src/main/java/com/java_template/prototype/functional_requirement.md' - need to update it with the latest changes from the user if necessary.",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested_processing": {
      "transitions": {
        "process_prototype_discussion_processing": {
          "next": "prototype_discussion_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        },
        "process_prototype_discussion_success": {
          "next": "prototype_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        }
      }
    },
    "prototype_discussion_completed": {
      "transitions": {
        "ask_to_confirm_migration": {
          "next": "migration_confirmation_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "You‚Äôve just built a working sketch of your Cyoda application. This marks the beginning of something powerful.\n\nNext, you‚Äôll convert this prototype into a full application that connects directly to your Cyoda Cloud environment.\n\nBy doing so, you gain:\n\n‚úÖ A robust, event-driven backend on a single, coherent platform\n\n‚úÖ Scalable, transactional architecture with far less complexity\n\n‚úÖ Clear, maintainable data models and workflows\n\n‚úÖ Enterprise-grade reliability, built in\n\n‚úÖ An ecosystem that accelerates delivery and adapts with your needs\n\nüëç Let‚Äôs bring your prototype to life in the Cyoda Cloud.\n\n",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested": {
      "transitions": {
        "submit_answer": {
          "next": "migration_confirmation_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "migration_confirmation_completed",
          "manual": true
        },
        "rollback": {
          "next": "migration_confirmation_requested_submitted_answer",
          "manual": true
        }
      }
    },
    "migration_confirmation_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "migration_confirmation_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "prototype_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of a file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "migration_confirmation"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated EntityControllerPrototype.java code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java' or 'src/main/java/com/java_template/application/entity/{EntityName}.java' to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user. Do not simply reuse the file content you read; always generate a new, modified version of the code that reflects the user's latest requests.",
                    " Finally, make sure to save the file only after you have applied the required changes. Carefully verify that the updated content reflects your modifications, and do not proceed with saving unless actual updates have been made. Finally apply the necessary changes to the src/main/java/com/java_template/prototype/EntityControllerPrototype.java file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the EntityControllerPrototype.java file if necessary, answer the question, no save needed in this case.",
                    " Call add_application_resource tool to save changes with the full contents of the file after your changes and the full path to the file.",
                    " Path for the prototype: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java'",
                    " Path for the entity: 'src/main/java/com/java_template/application/entity/{EntityName}.java'",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested_processing": {
      "transitions": {
        "process_migration_confirmation_processing": {
          "next": "migration_confirmation_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        },
        "process_migration_confirmation_success": {
          "next": "start_environment_setup",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        }
      }
    },
    "start_environment_setup": {
      "transitions": {
        "start_environment_setup_processing": {
          "next": "migration_confirmation_completed"
        }
      }
    },
    "waiting_for_user_deployment_input": {
      "transitions": {
        "submit_answer": {
          "next": "migration_confirmation_completed",
          "manual": true
        },
        "rollback": {
          "next": "migration_confirmation_completed",
          "manual": true
        }
      }
    },
    "migration_confirmation_completed": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_step3_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "deploy_cyoda_env_background",
                    "description": "Launches workflow that is necessary to deploy Cyoda environment for the user. User needs to explicitly ask for deployment of Cyoda environment.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        },
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_app_setup_3"
                          ]
                        }
                      },
                      "required": [
                        "user_request",
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user is ready to proceed or asks to proceed to the next question. If the user wants to go to the next step - use immediately.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_app_setup_3_success"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "memory_tags": [
                "chat_deploy_env"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Step 1: Call `get_user_info` to check if the user is logged in.",
                    "‚Ä¢ If the user is not logged in, respond: 'üòä To continue, please log in to your account. If you don't have one yet, no worries ‚Äî a new account will be added for you automatically.\n\nüîê Logging in is necessary so we can create and link your personal Cyoda environment to your account.\n\n‚úÖ Once you're logged in, just drop a message here and I'll get everything set up for you!' Do not proceed further until the user confirms they're logged in.",
                    "",
                    "Step 2: Once the user is confirmed to be logged in, call `get_user_info` again to check if their Cyoda environment is already deployed.",
                    "",
                    "‚Ä¢ If the environment is already deployed, Inform the user: 'Great! Your Cyoda environment (environment name) is already active and ready to use. Let's proceed with setting up your application and call `finish_discussion` immediately to proceed to the next step.",
                    "",
                    "‚Ä¢ If the environment is not deployed, call `deploy_cyoda_env` and immediately call `finish_discussion`.",
                    "‚Ä¢ Inform the user: 'I'm now deploying your Cyoda environment. Your build ID is {{build_id}}. You can check the deployment status in a new chat while this one stays focused on setting up your Cyoda application.'"
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30
            }
          }
        }
      }
    },
    "app_requirements_step3_processing": {
      "transitions": {
        "process_app_setup_3_processing": {
          "next": "waiting_for_user_deployment_input",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_3_success"
                }
              }
            }
          }
        },
        "process_app_setup_3_success": {
          "next": "deployed_cyoda_env",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "process_app_setup_3_success"
                }
              }
            }
          }
        },
        "rollback": {
          "next": "start_environment_setup",
          "manual": true
        }
      }
    },
    "deployed_cyoda_env": {
      "transitions": {
        "notify_user_env_deployed": {
          "next": "notified_user_env_deployed",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_user_info",
                    "description": "Use this tool to get user information like user environment URL, user branch name etc",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "user_request": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_request"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "memory_tags": [
                "chat_deploy_env"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Call `get_user_info` to get user environment URL and its status (deployed/not deployed).`",
                    " If the environment is deployed: tell the user that their environment (tell the env url) is deployed and there is no need to deploy it again. So you proceed to building the application.",
                    " If the environment is not deployed: tell the user that you've scheduled the deployment and it will be available soon at {env url}. You will proceed to building the application in parallel."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30
            }
          }
        }
      }
    },
    "notified_user_env_deployed": {
      "transitions": {
        "migration_confirmation_notify": {
          "next": "migration_confirmation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "üöÄ **Let‚Äôs generate your application code!**\n\nI‚Äôll take care of everything ‚Äî no need to lift a finger.\n\n‚è≥ While the code is being generated (~10 min), feel free to grab a coffee ‚òï and relax.\n\n**Here‚Äôs what‚Äôs happening behind the scenes:**\n- **Entity Design:** Defining JSON structures for your entities (`application/entity/*`)\n- **Workflow Design:** Mapping transitions (`application/workflow/*`)\n- **Workflow Processor:** Java logic that powers it all (`application/processor/*`, `application/criterion/*`)\n\nüõ†Ô∏è This step brings your app to life ‚Äî from requirements to real, running code.\n\n‚úÖ I‚Äôll notify you as soon as everything‚Äôs ready to review.\n\nWant to dive deeper into the concepts?\nCheck these out:\n- [What‚Äôs an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true
            }
          }
        }
      }
    },
    "migration_confirmation_notified": {
      "transitions": {
        "generate_initial_cyoda_prototype": {
          "next": "generated_initial_cyoda_prototype",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "controller_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided with a Java codebase that implements a REST API (using Spring Boot framework).",
                    "Currently, the code uses local in‚Äëmemory dictionaries (and counters) to store and manage data for one or more entity types.",
                    "Your task is to refactor the code so that all interactions with the local cache are replaced by calls to an external service called com.java_template.common.service.EntityService. Note, that EntityService is a bean, so inject it with Controller constructor.",
                    "You can use only these functions for replacement - if this is not enough just skip and leave as is",
                    "You can use a constant for EntityName: each EntityName class has a public constant ENTITY_NAME",
                    "1. CompletableFuture<UUID> idFuture = entityService.addItem(",
                    "    entityModel={EntityName}.ENTITY_NAME,",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    entity=data  # the validated data object",
                    ")",
                    "Note: entityService.addItem returns technicalId of the created entity.",
                    "CompletableFuture<List<UUID>> addItems idsFuture = entityService.addItems(",
                    "    entityModel={EntityName}.ENTITY_NAME,",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    entities=data",
                    ")",
                    "Note: entityService.addItems returns a list of technicalIds of the created entities.",
                    "2. Data retrieval. You can use the following methods:",
                    " Use getItem to retrieve a single entity by technicalId.",
                    "CompletableFuture<ObjectNode> itemFuture = entityService.getItem(",
                    "    entityModel={EntityName}.ENTITY_NAME,",
                    "    entityVersion=ENTITY_VERSION,",
                    "    technicalId=<technicalId>",
                    ")-- ObjectNode node will have entity data and technicalId field",
                    "Get all: ",
                    "CompletableFuture<ArrayNode> itemsFuture = entityService.getItems(",
                    "    entityModel={EntityName}.ENTITY_NAME,",
                    "    entityVersion=ENTITY_VERSION,",
                    ") -- each node will have technicalId field added automatically",
                    "Get items by field that is not technicalId: ",
                    "CompletableFuture<ArrayNode> filteredItemsFuture = entityService.getItemsByCondition(",
                    "    entityModel={EntityName}.ENTITY_NAME,",
                    "    entityVersion=ENTITY_VERSION,",
                    "    condition=condition,",
                    "    inMemory=true",
                    ")",
                    " inMemory=true means that the search will be performed in memory, not in the database. It is useful for optimization purposes.",
                    "Please use the following classes to construct search conditions for entity queries:",
                    "Condition (com.java_template.common.util.Condition) and SearchConditionRequest (com.java_template.common.util.SearchConditionRequest)",
                    "",
                    "To create a single condition, wrap it into a SearchConditionRequest with one element in the list:",
                    "com.java_template.common.util.SearchConditionRequest.group(\"AND\",",
                    "    com.java_template.common.util.Condition.of(\"$.field\", \"EQUALS\", \"value\")",
                    ")",
                    "To create a group of multiple conditions with logical operator AND or OR, use:",
                    "com.java_template.common.util.SearchConditionRequest.group(\"OR\",",
                    "    com.java_template.common.util.Condition.of(\"$.field1\", \"EQUALS\", \"value1\"),",
                    "    com.java_template.common.util.Condition.of(\"$.field2\", \"GREATER_THAN\", 10)",
                    ")",
                    "Supported operatorType values (for Condition):",
                    "\"EQUALS\", \"NOT_EQUAL\", \"IEQUALS\", \"INOT_EQUAL\", \"IS_NULL\", \"NOT_NULL\",",
                    "\"GREATER_THAN\", \"GREATER_OR_EQUAL\", \"LESS_THAN\", \"LESS_OR_EQUAL\",",
                    "\"ICONTAINS\", \"ISTARTS_WITH\", \"IENDS_WITH\", \"INOT_CONTAINS\",",
                    "\"INOT_STARTS_WITH\", \"INOT_ENDS_WITH\", \"MATCHES_PATTERN\",",
                    "\"BETWEEN\", \"BETWEEN_INCLUSIVE\"",
                    "",
                    "Note: If the operatorType starts with the letter 'I', it means the comparison should ignore case (e.g., \"IEQUALS\" = equals ignoring case).",
                    "Supported operator values (for SearchConditionRequest): \"AND\", \"OR\"",
                    "Pass the resulting SearchConditionRequest as the third argument (condition) to:",
                    "entityService.getItemsByCondition(entityModel, entityVersion, condition, inMemory)",
                    "Avoid any update operations. You can add todo instead of actual update.",
                    "use 'import static com.java_template.common.config.Config.*;' to import ENTITY_VERSION",
                    "import com.java_template.common.service.EntityService",
                    "use package com.java_template.application.controller; and class name 'Controller'",
                    "Lombok is already configured in the project via io.freefair.lombok plugin. Please use Lombok annotations like @Data, @Getter, @Setter, @AllArgsConstructor, @NoArgsConstructor, etc., instead of manually writing getters, setters, and constructors, and make sure to include the necessary Lombok imports in the generated code.",
                    "Assign a unique @RequestMapping path to each controller to avoid conflicts.\n",
                    "Preserve the endpoint routes and any other essential business logic like data ingestion, calling any external apis, mocks, calculations etc.",
                    "Please use correct logging, e.g. org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(Controller.class);",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```.",
                    "** Keep all the endpoints in a single class Controller (like in the prototype) - do not add multiple controller classes - just a single one. **",
                    "Wrap endpoints with try-catch and handle exceptions. Return HTTP 400 for IllegalArgumentException, 500 for all others.",
                    "Exhaustive list of EntityService methods:",
                    "CompletableFuture<UUID> addItem(String entityModel, String entityVersion, Object entity);",
                    "CompletableFuture<List<UUID>> addItems(String entityModel, String entityVersion, Object entities);",
                    "CompletableFuture<ObjectNode> getItem(String entityModel, String entityVersion, UUID technicalId);",
                    "CompletableFuture<ArrayNode> getItems(String entityModel, String entityVersion);",
                    "CompletableFuture<ArrayNode> getItemsByCondition(String entityModel, String entityVersion, Object condition, boolean inMemory);",
                    "CompletableFuture<UUID> deleteItem(String entityModel, String entityVersion, UUID technicalId);",
                    "EntityService doesn't have any other methods, please do not reinvent anything else."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/EntityControllerPrototype.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/application/controller/Controller.java"
                ]
              }
            }
          }
        }
      }
    },
    "generated_initial_cyoda_prototype": {
      "transitions": {
        "extract_processing_methods": {
          "next": "processing_methods_extracted",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": false,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Save extracted processing methods and cleaned controller file",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list.",
                          "enum": [
                            "src/main/java/com/java_template/application/entity"
                          ]
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "memory_tags": [
                "processing_methods_extraction"
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/application/controller/Controller.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/application/controller/Controller.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You need to extract processing methods from Controller.java and create workflow prototypes for each entity.",
                    "- Use `list_directory_files` to discover all entity names",
                    "",
                    "Your tasks:",
                    "1. Get all entity names.",
                    "1. Read the Controller.java file contents",
                    "2. Identify all process methods (methods that start with 'process' followed by an entity name or some variation of this pattern. these methods are right after putting entity to cache/ 'saving')",
                    "3. For each processEntityName method found:",
                    "   - Extract the complete method including its body",
                    "   - Extract any private helper methods that are directly called by this process method",
                    "   - Save the extracted method(s) to 'src/main/java/com/java_template/application/workflow_prototypes/{EntityName}.txt' using add_application_resource",
                    "   - If there is no process{EntityName} method found, create a file with a todo to implement business logic later.",
                    "4. Return a cleaned version of Controller.java that:",
                    "   - Removes all processEntityName methods and their direct helper methods",
                    "   - Keeps all other functionality intact (CRUD operations, endpoints, etc.)",
                    "",
                    "Important guidelines:",
                    "- Only extract methods that follow the pattern process{EntityName}/process}EntityName}{Something} (e.g., processUser, processUserScheduler)",
                    "- Save the extracted methods to 'src/main/java/com/java_template/application/workflow_prototypes/{EntityName}.txt' using add_application_resource for the respective entity name",
                    "- Include any private methods that are called directly from the process methods",
                    "- Preserve the original code structure and formatting",
                    "- The cleaned controller should remain fully functional for CRUD operations",
                    "- Use the entity name in PascalCase for the filename (e.g., User.txt)",
                    "",
                    "Start by reading the Controller.java file to analyze its structure.",
                    "Response format: respond with only the java code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```"
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 10,
              "approve": true
            }
          }
        }
      }
    },
    "processing_methods_extracted": {
      "transitions": {
        "update_routes_file": {
          "next": "validated_controller",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": false,
              "model": {},
              "memory_tags": [
                "controller_validation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_file_contents",
                    "description": "Get file contents by path to review existing code structure",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "file_path": {
                          "type": "string",
                          "description": "Path to the file to read. Examples: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java', 'src/main/java/com/java_template/application/entity/EntityName.java', 'src/main/java/com/java_template/application/processor/ProcessorName.java', 'src/main/java/com/java_template/application/criterion/CriteriaName.java'"
                        }
                      },
                      "required": [
                        "file_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list. Examples: 'src/main/java/com/java_template/application/processor', 'src/main/java/com/java_template/application/criterion', 'src/main/java/com/java_template/application/entity', 'com/java_template/application/workflow'"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_entity_pojo_contents",
                    "description": "Get entity POJO contents to understand the data model and available properties",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "entity_name": {
                          "type": "string",
                          "description": "Name of the entity to get POJO contents"
                        }
                      },
                      "required": [
                        "entity_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You need to check and fix the Controller class.",
                    "",
                    "When writing Spring Boot REST controllers that interact with EntityService:",
                    " Use get_pojo_contents tool to understand the entity data model and available properties",
                    "",
                    "CRITICAL RULES:",
                    "- EntityService methods are: getItem(), addItem(), updateItem(), deleteItem() - NOT findItemById() or deleteItemById()",
                    "- EntityService methods expect UUID technicalId parameters, not String - always use UUID.fromString(stringId)",
                    "- EntityService.getItem() returns ObjectNode - use objectMapper.treeToValue(node, EntityClass.class) to convert to entity",
                    "- EntityService.deleteItem() returns UUID (the deleted ID), not boolean",
                    "- Add JsonProcessingException to method signatures when using objectMapper.treeToValue()",
                    "- Entity technicalId fields are UUID type - use UUID.fromString() when setting from String DTOs",
                    "- Map DTO fields correctly to entity fields (check entity class for actual field names)",
                    "- Always import: UUID, JsonProcessingException, ObjectNode when using EntityService",
                    "",
                    "VALIDATION CHECKLIST:",
                    "‚ñ° Method names match com.java_template.common.service.EntityService interface exactly",
                    "‚ñ° EntityService injected via constructor",
                    "‚ñ° ObjectMapper injected via constructor",
                    "‚ñ° UUID conversions applied where needed",
                    "‚ñ° ObjectMapper used for ObjectNode ‚Üí Entity conversion",
                    "‚ñ° Exception handling includes JsonProcessingException",
                    "‚ñ° DTO ‚Üí Entity field mapping verified against actual entity classes",
                    "‚ñ° All required imports present",
                    "",
                    "When managing imports in Spring Boot controllers using EntityService:",
                    "",
                    "REQUIRED IMPORTS CHECKLIST:",
                    "‚ñ° com.fasterxml.jackson.core.JsonProcessingException (when using objectMapper.treeToValue)",
                    "‚ñ° com.fasterxml.jackson.databind.ObjectMapper (for JSON operations)",
                    "‚ñ° com.fasterxml.jackson.databind.node.ObjectNode (EntityService return type)",
                    "‚ñ° java.util.UUID (for technicalId conversions)",
                    "‚ñ° java.util.concurrent.ExecutionException (for CompletableFuture.get())",
                    "‚ñ° jakarta.validation.Valid (for request validation)",
                    "‚ñ° jakarta.validation.constraints.NotBlank (for field validation)",
                    "‚ñ° org.springframework.http.ResponseEntity (for REST responses)",
                    "‚ñ° org.springframework.web.bind.annotation.* (for REST mappings)",
                    "‚ñ° import static com.java_template.common.config.Config.ENTITY_VERSION",
                    "",
                    "COMMON MISSING IMPORTS:",
                    "- JsonProcessingException when using objectMapper.treeToValue()",
                    "- UUID when converting String IDs to UUID",
                    "- ObjectNode when working with EntityService responses",
                    "",
                    "ADDITIONAL CRITICAL RECOMMENDATIONS:",
                    "",
                    "1. VALIDATION ANNOTATIONS:",
                    "‚úÖ Use @jakarta.validation.constraints.* (NOT @javax.validation.constraints.*)",
                    "‚úÖ Import: import jakarta.validation.constraints.Email;",
                    "‚ùå Avoid: import javax.validation.constraints.Email;",
                    "",
                    "2. ENTITY SERVICE METHOD SIGNATURES:",
                    "‚úÖ addItem(String entityModel, String entityVersion, Object entity) returns CompletableFuture<UUID>",
                    "‚úÖ updateItem(String entityModel, String entityVersion, UUID technicalId, Object entity) requires 4 parameters",
                    "‚ùå Don't assume addItem() returns String - it returns UUID",
                    "‚ùå Don't call updateItem() with only 3 parameters - it needs the technicalId",
                    "",
                    "3. ENTITY FIELD MAPPING:",
                    "Before calling setter methods on entities, ALWAYS verify the actual field names in the entity class",
                    "",
                    "4. LOMBOK @Data ANNOTATION:",
                    "- Entities use @Data annotation which auto-generates getters/setters",
                    "- Method names follow JavaBean convention: fieldName ‚Üí getFieldName() / setFieldName()",
                    "- Always check the actual field names in the entity class before calling methods",
                    "",
                    "5. UUID HANDLING:",
                    "- Convert UUID to String when needed: uuid.toString()",
                    "- Parse String to UUID when needed: UUID.fromString(string)",
                    "- EntityService methods return CompletableFuture<UUID>, not CompletableFuture<String>",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 10,
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/application/controller/Controller.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/application/controller/Controller.java"
                ]
              },
              "approve": true
            }
          }
        }
      }
    },
    "validated_controller": {
      "transitions": {
        "register_workflow_with_app": {
          "next": "finished_app_generation_flow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "launch_gen_app_workflows",
                "description": "register_workflow_with_app",
                "parameters": {
                  "dir_name": "src/main/java/com/java_template/application/entity",
                  "next_transition": "validate_app_quality"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "finished_app_generation_flow": {
      "transitions": {
        "validate_app_quality": {
          "next": "validated_app_quality",
          "manual": true,
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "memory_tags": [
                "entity_processing_logic_validation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_collaborator_to_default_repos",
                    "description": "Adds a user as collaborator to the default Cyoda repositories (quart-client-template, java-client-template). Use when user requests repository access, push rights, or to be added to repositories. The AI must extract the GitHub username from the user's request - cannot invent usernames.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "GitHub username extracted from user's request. Must be provided by the user - AI cannot invent this."
                        }
                      },
                      "required": [
                        "username"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_file_contents",
                    "description": "Get file contents by path to review existing code structure",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "file_path": {
                          "type": "string",
                          "description": "Path to the file to read. Examples: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java', 'src/main/java/com/java_template/application/controller/Controller.java', 'src/main/java/com/java_template/application/entity/EntityName.java', 'src/main/java/com/java_template/application/processor/ProcessorName.java', 'src/main/java/com/java_template/application/criterion/CriteriaName.java'"
                        }
                      },
                      "required": [
                        "file_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, workflows, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list. Examples: 'src/main/java/com/java_template/application/processor', 'src/main/java/com/java_template/application/criterion', 'src/main/java/com/java_template/application/entity', 'src/main/java/com/java_template/application/workflow'"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You need to validate that entity processing logic has been successfully transferred from the prototype controller to processors and criteria, ensuring no logic duplication and that workflows make sense.",
                    "",
                    "CONTEXT: During previous steps, we:",
                    "1. Analyzed EntityControllerPrototype code and identified business logic",
                    "2. Extracted entity processing logic and moved it to workflow processors and criteria",
                    "3. Created separate POJO entities based on the prototype",
                    "4. Generated workflows with processors for business operations",
                    "5. Created a Controller class that should only handle API routing and entity persistence",
                    "",
                    "THIS IS A VALIDATION AND REFACTORING TASK: take action to correct things if necessary",
                    "Your job is to validate if the refactoring was successful and fix any issues found.",
                    "",
                    "YOUR VALIDATION TASKS:",
                    "1. Read the prototype controller using get_file_contents: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java'",
                    "2. Read the current controller using get_file_contents: 'src/main/java/com/java_template/application/controller/Controller.java'",
                    "Notice that process code has been removed from the controller.",
                    "3. Use list_directory_files to examine what workflows, processors, and criteria were created:",
                    "   - 'src/main/java/com/java_template/application/workflow'",
                    "   - 'src/main/java/com/java_template/application/processor'",
                    "   - 'src/main/java/com/java_template/application/criterion'",
                    "5. Read each workflow, processor, and criteria files to understand what business logic was moved",
                    "",
                    "VALIDATION CHECKS:",
                    "A. **Entity Processing Logic Migration Validation:**",
                    "   - Compare prototype controller business logic with processor implementations",
                    "   - Ensure complex entity processing operations were moved to processors. Not just left as placeholders or todos in processors.",
                    "   - Verify that processEntityName methods from prototype are properly implemented in processors",
                    "   - Check that processors follow the correct interface and naming conventions",
                    "   - Validate that entity transformation and business rules are in processors, not controller",
                    "",
                    "B. **Controller Logic Duplication Check:**",
                    "   - Verify controller only contains API routing and entity persistence (entityService.addItem calls)",
                    "   - Ensure NO business logic remains in controller that should be in processors",
                    "   - Check that controller properly delegates to EntityService for persistence only",
                    "   - Validate that complex processing logic was completely removed from controller",
                    "",
                    "C. **Criteria Implementation Validation:**",
                    "   - Verify criteria properly implement validation logic from prototype",
                    "   - Check that criteria follow the correct interface and naming conventions",
                    "   - Ensure criteria contain meaningful validation rules, not just placeholder code",
                    "",
                    "D. **Workflow Logic Validation:**",
                    "   - Verify workflows make logical sense and follow proper state transitions",
                    "   - Check that workflow processors and criteria names match implemented classes",
                    "   - Ensure workflow states represent meaningful business processes",
                    "   - Validate that workflows properly orchestrate entity processing flow",
                    "",
                    "CORRECTIVE ACTIONS (if validation fails):",
                    "List files that don't meet validation criteria:",
                    "- **Processors**: Rewrite if they don't properly implement entity processing logic from prototype",
                    "- **Criteria**: Rewrite if they don't properly implement validation logic from prototype",
                    "- **Controller**: Rewrite if it still contains business logic that should be in processors",
                    "- **Workflows**: Create missing processors or criteria identified by validate_workflow_implementation",
                    "",
                    "VALIDATION SUCCESS CRITERIA:",
                    "- Entity processing logic is properly separated: complex business logic in processors, simple persistence in controller",
                    "- No logic duplication between controller and processors",
                    "- Workflows represent meaningful business processes and make logical sense",
                    "- All processors and criteria are properly implemented and follow naming conventions",
                    "- Controller is thin and only handles API routing + EntityService persistence calls",
                    "",
                    "OUTPUT: Provide a detailed validation report with formal smileys. If everything is correct, confirm that the entity processing logic migration was successful and workflows make sense. If issues are found, outline them and formulate a prompt the user can give to their IDE AI assistant to fix the issues as. You cannot fix them yourself, return a prompt a user can use in their own IDE assistant."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 15,
              "approve": false
            }
          }
        }
      }
    },
    "validated_app_quality": {
      "transitions": {
        "save_env_file": {
          "next": "saved_env_file",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "save_env_file",
                "description": "save_env_file",
                "parameters": {
                  "filename": ".env.template"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "saved_env_file": {
      "transitions": {
        "delete_files": {
          "next": "deleted_files",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "delete_files",
                "description": "delete_files",
                "parameters": {
                  "files": [
                    "src/main/java/com/java_template/prototype/EntityControllerPrototypeWithoutProcessing.java"
                  ],
                  "directories": [
                    "src/main/java/com/java_template/application/workflow_prototypes"
                  ]
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "deleted_files": {
      "transitions": {
        "question_to_proceed_with_generated_app_editing": {
          "next": "questioned_to_proceed_with_generated_app_editing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "‚úÖ Your application is ready in the {git_branch} branch!\n\n [Cyoda GitHub](https://github.com/Cyoda-platform/java-client-template/tree/{git_branch}) \uD83D\uDC40 \n\nLet‚Äôs bring it to life ‚Äî together. Setup assistant will start in a moment!\n\n ",
              "publish": true
            }
          }
        }
      }
    },
    "questioned_to_proceed_with_generated_app_editing": {
      "transitions": {
        "launch_setup_assistant": {
          "next": "launched_setup_assistant",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_setup_workflow",
                "description": "init_setup_workflow",
                "parameters": {
                  "user_request": "Hello! Please help me start my new application.",
                  "programming_language": "JAVA"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "launched_setup_assistant": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}






