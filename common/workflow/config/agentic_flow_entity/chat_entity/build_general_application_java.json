{
  "initial_state": "none",
  "workflow_name": "build_general_application_java",
  "states": {
    "none": {
      "transitions": {
        "initialize": {
          "next": "initialized"
        }
      }
    },
    "initialized": {
      "transitions": {
        "build_new_app": {
          "next": "building_new_app",
          "condition": {
            "name": "build_new_app_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "build_new_app",
                "type": "simple"
              }
            ]
          }
        },
        "discuss_functional_requirements": {
          "next": "chats_initialized",
          "condition": {
            "name": "discuss_functional_requirements_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "discuss_functional_requirements",
                "type": "simple"
              }
            ]
          }
        },
        "edit_functional_requirements": {
          "next": "functional_requirements_specified",
          "condition": {
            "name": "edit_functional_requirements_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "edit_functional_requirements",
                "type": "simple"
              }
            ]
          }
        },
        "prototype_discussion_requested": {
          "next": "prototype_discussion_requested_submitted_answer",
          "condition": {
            "name": "prototype_discussion_requested_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "prototype_discussion_requested",
                "type": "simple"
              }
            ]
          }
        },
        "resume_migration": {
          "next": "migration_confirmation_completed",
          "condition": {
            "name": "resume_migration_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_migration",
                "type": "simple"
              }
            ]
          }
        },
        "resume_prototype_cyoda_workflow": {
          "next": "generated_initial_cyoda_prototype",
          "condition": {
            "name": "resume_prototype_cyoda_workflow_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_prototype_cyoda_workflow",
                "type": "simple"
              }
            ]
          }
        },
        "resume_gen_prototype_cyoda_workflow_json": {
          "next": "finished_prototype_cyoda_workflow",
          "condition": {
            "name": "resume_gen_prototype_cyoda_workflow_json_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_gen_prototype_cyoda_workflow_json",
                "type": "simple"
              }
            ]
          }
        },
        "resume_gen_entities": {
          "next": "finished_prototype_cyoda_workflow_json",
          "condition": {
            "name": "resume_gen_entities_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_gen_entities",
                "type": "simple"
              }
            ]
          }
        },
        "resume_post_app_build_steps": {
          "next": "finished_app_generation_flow",
          "condition": {
            "name": "resume_post_app_build_steps_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_post_app_build_steps",
                "type": "simple"
              }
            ]
          }
        }
      }
    },
    "building_new_app": {
      "transitions": {
        "welcome_user": {
          "next": "greeting_sent",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "👋 Welcome to Cyoda Application Builder!\nWe’re excited to work with you on building your app.\n\n🔧 Here's how the process works:\n\n**Define & confirm functional requirements**\nWe'll discuss what your app needs to do and confirm the necessary API endpoints.\n\n**Prototype phase**\nWe’ll create a controller-based sketch prototype focused on core logic only.\n\n**Backend migration**\nOnce you're happy with the prototype, we'll migrate it to the Cyoda backend, introducing our event-driven architecture and non-functional requirements.\n👉 Learn more: https://cyoda.com\n\n🚀 After that, you’ll get guidance on launching your app—and we can continue editing it as needed.\n\n🌱 We're in alpha!\nIf something goes wrong or you have questions, reach out on [Discord](https://discord.gg/95rdAyBZr2) or click Restart workflows in the entities progress window.\n\nLet’s build something great together!\n\n```mermaid\ngraph TD\n    A([Define & Confirm Functional Requirements]):::bar e1@== build_general_application.functional_requirements_specified\n    ==> B([Build Sketch Prototype]):::bar\n    B e2@== functional_requirements_generated ==> C([Validate Functionality & API Endpoints]):::bar\n    C e3@== prototype_discussion_requested ==> D{Are You Happy With the Prototype?}:::bar\n    D e4@== migration_confirmation_requested ==> E([Migrate to Cyoda Backend]):::bar\n    E e5@== finished_app_generation_flow ==> F([Event-Driven Architecture + Non-Functional Requirements]):::bar\n    F e6@== init_setup_workflow ==> G([Launch Your App]):::bar\n    G e7@== edit_existing_workflow ==> H([Iterate & Edit as Needed]):::bar\n\n    D e1@== No ==> B\n\n    H e8@== locked_chat ==> I([Need Help? Click Retry or Ask on Discord]):::bar\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }\n    e8@{ animate: true }\n    classDef bar stroke:#0f0\n```",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "greeting_sent": {
      "transitions": {
        "clone_repo": {
          "next": "repository_cloned",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "clone_repo",
                "description": "Clones template repository"
              },
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "repository_cloned": {
      "transitions": {
        "init_chats": {
          "next": "chats_initialized",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_chats",
                "description": "Initialises ai service"
              },
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "chats_initialized": {
      "transitions": {
        "process_initial_question": {
          "next": "app_requirements_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "memory_tags": [
                "requirements_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a Java Spring Boot developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks, databases or technologies, the final application will be in Java Spring Boot on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. Format it with markdown.",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "app_requirements_finalized",
          "manual": true
        }
      }
    },
    "app_requirements_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if you have enough information or the user asks to proceed to the next question. Summarise the requirement in a couple of sentences and set to true if the user chooses your example answers or after 6 attempts! Do not hold the user too long.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_application_requirement"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a Java Spring Boot developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " Ask questions if something is not clear enough and make suggestions that will help us formulate formal specification in the next iterations.",
                    " Make sure your answers are friendly but up-to-the point and do not start with any exclamations, but rather answer the question. Max tokens = 300.",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks, databases or technologies, the final application will be inJava Spring Boot on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. format it with markdown ",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Call finish_discussion immediately after 6 attempts. Do not hold the user too long they will bored.",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested_processing": {
      "transitions": {
        "process_application_requirement_processing": {
          "next": "app_requirements_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "description": "not_stage_completed",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        },
        "process_application_requirement_success": {
          "next": "app_requirements_finalized",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "description": "Clones template repository",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        }
      }
    },
    "app_requirements_finalized": {
      "transitions": {
        "ask_about_api": {
          "next": "proceeded_to_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "Next up: functional requirements.\nStay tuned — thoughtful thinking in progress. \uD83E\uDDE0✨",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "proceeded_to_functional_requirements": {
      "transitions": {
        "define_functional_requirements": {
          "next": "functional_requirements_specified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please, help me define the functional requirements for my project using an Event-Driven Architecture (EDA) approach.",
                    "",
                    "IMPORTANT: Think in terms of entities and events. In EDA:",
                    "- Each entity add/update operation is an EVENT that triggers automated processing",
                    "- When you save an entity, Cyoda automatically calls processEntity events",
                    "- Focus on business entities, job entities, or orchestration entities that represent your domain",
                    "",
                    "Please outline:",
                    "1. Business entities that need to be persisted (these will trigger events when saved)",
                    " Max 3 entities are allowed. Orchestration entities like 'Job', 'Task' take precedence, then business domain entities.",
                    "2. API endpoints following these rules:",
                    "   - POST endpoints: For adding/updating entities (triggers events) and any business logic",
                    "   - GET endpoints: Only for retrieving application results (no external data retrieval)",
                    "   - Any business logic involving external data sources, calculations, or processing should be in POST endpoints",
                    "3. Event processing workflows that should happen after entity persistence",
                    "4. Request/response formats for your endpoints",
                    "",
                    "Additionally, provide a visual representation of the user-app interaction using Mermaid diagrams (e.g. journey/sequence) showing:",
                    "- Entity creation/update flows",
                    "- Event-driven processing chains",
                    "- User interaction patterns",
                    " Do not overcomplicate the requirements. Keep it minimalistic.",
                    "Ensure that **each Mermaid diagram is enclosed in a complete and valid Markdown code block**, starting with ```mermaid and ending with ``` (on a separate line).",
                    "Please return markdown document without any additional information and without wrapping it in triple backticks.",
                    "Make sure there are no unclosed Mermaid blocks — every diagram must end with a closing triple backtick on a separate line."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "functional_requirements_specified": {
      "transitions": {
        "ask_about_api": {
          "next": "api_inquired",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "Would you like to improve or make adjustments to the functional requirements and the API?\nOpen to feedback if you’ve got any ideas — I’m all ears\uD83D\uDC42\uD83D\uDC42, well... sort of\uD83D\uDE0F.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "api_inquired": {
      "transitions": {
        "submit_answer": {
          "next": "api_inquired_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "api_discussion_completed",
          "manual": true
        }
      }
    },
    "api_inquired_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "api_inquired_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user asks to proceed or if the user is satisfied with the current result (e.g. says it is correct, valid, works for them). If set to false notify the user you're going to proceed with prototype generation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_api"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Please, adjust the the functional requirements and the API according to the user request. ",
                    " Once the user is happy with the result or has no more questions, please call finish_discussion. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "api_inquired_processing": {
      "transitions": {
        "process_api_inquiry_processing": {
          "next": "api_inquired",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        },
        "process_api_inquiry_success": {
          "next": "api_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        }
      }
    },
    "api_discussion_completed": {
      "transitions": {
        "notify_prototype_generation": {
          "next": "prototype_generation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🌟 Let’s get started on the first prototype! 🛠️\n\nJust give me a moment to think everything through... 🤔💭\n\nI'll finalize the functional requirements first, then dive into prototype generation. 🧠✨\n\n🚧 Initial prototype is now in progress... 🚀💡\n\nWant to learn more about entity databases and event-driven architectures?\nCheck these out:\n- [What’s an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_generation_notified": {
      "transitions": {
        "generate_functional_requirements": {
          "next": "generated_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "requirements_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return well-formatted final version of the functional requirements which was confirmed by the user."
                  ]
                }
              ],
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              }
            }
          }
        }
      }
    },
    "generated_functional_requirements": {
      "transitions": {
        "extract_entities_from_prototype": {
          "next": "entities_extracted",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                }
              ],
              "memory_tags": [
                "generate_workflow_from_prototype", "general_memory_tag", "requirements_generation", "prototype_generation"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided with the requirements document.",
                    "",
                    "You need to identify entities from the requirements document.",
                    "Max 3 entities: orchestration entities like 'Job', 'Task' take precedence, then business domain entities.",
                    "For each entity, call add_application_resource with:",
                    "- resource_path: 'src/main/java/com/java_template/application/entity/{EntityName}.java'",
                    "- file_contents: entity java pojo with lombok @Data annotation",
                    "",
                    "Use this entity class template (replace EntityName with your actual entity name):",
                    "",
                    "package com.java_template.application.entity;",
                    "",
                    "import com.java_template.common.workflow.CyodaEntity;",
                    "import com.java_template.common.workflow.OperationSpecification;",
                    "import org.cyoda.cloud.api.event.common.ModelSpec;",
                    "import lombok.Data;",
                    "import static com.java_template.common.config.Config.ENTITY_VERSION;",
                    "",
                    "@Data",
                    "public class EntityName implements CyodaEntity {",
                    "    // Add your entity fields here",
                    "",
                    "    public EntityName() {}",
                    "",
                    "    @Override",
                    "    public OperationSpecification getModelKey() {",
                    "        ModelSpec modelSpec = new ModelSpec();",
                    "        modelSpec.setName(\"entityName\");",
                    "        modelSpec.setVersion(Integer.parseInt(ENTITY_VERSION));",
                    "        return new OperationSpecification.Entity(modelSpec, \"entityName\");",
                    "    }",
                    "",
                    "    @Override",
                    "    public boolean isValid() {",
                    "        return true;",
                    "    }",
                    "}",
                    "",
                    "Replace:",
                    "- EntityName with your actual entity class name (PascalCase)",
                    "- entityName with your actual entity name (camelCase)",
                    "- Add appropriate fields based on the prototype code",
                    "- Implement proper validation logic in isValid() method",
                    "",
                    "When creating entity classes that implement CyodaEntity:\n1. Always include both `id` (business ID) and `technicalId` (database ID, private UUID technicalId;) fields\n",
                    "Use String types for foreign key references when they represent serialized UUIDs\n4. ",
                    "Update validation logic to match the actual field types (use .isBlank() for String fields, not null checks for UUID fields)\n",
                    "5. Ensure @Data annotation from Lombok generates all necessary getters/setters",
                    "Requirement:"
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/functional_requirement.md"
                ]
              },
              "tool_choice": "auto",
              "max_iteration": 5,
              "approve": true
            }
          }
        }
      }
    },
    "entities_extracted": {
      "transitions": {
        "generate_prototype_sketch": {
          "next": "prototype_sketch_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "input": {},
              "memory_tags": [
                "prototype_generation"
              ],
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/EntityControllerPrototype.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now that we’ve finalized the API design and entities, please provide the code for the EntityControllerPrototype.java file for a Spring Boot application.",
                    "The implementation should be a working prototype rather than a production-ready solution.",
                    "Incorporate any details I’ve already specified—such as entity model classes, external APIs, or specific logic—and use mocks or placeholders only where requirements are unclear or incomplete.",
                    "Please use real API endpoints where possible. If you introduce mocks or placeholders, clearly mark them with a TODO comment indicating what should be replaced.",
                    "The goal is to validate the UX and the overall structure of the API before proceeding with a full implementation.",
                    "Use Spring Web RestController (`@RestController`, `@RequestMapping`, etc.) and annotate endpoints clearly with HTTP verbs like `@GetMapping`, `@PostMapping`, etc. import org.springframework.web.bind.annotation.*;",
                    "Add prefix 'prototype' to the base path in @RequestMapping (e.g. @RequestMapping(path = \"/prototype/)",
                    "IMPORTANT: Implement an event-driven approach where:",
                    "1. Entities are stored in local cache using ConcurrentHashMap to simulate persistence",
                    "2. After saving to cache, call processEntity method(s) to simulate event processing that Cyoda would trigger",
                    "3. Use ConcurrentHashMap<String, List<EntityType>> for each entity type to imitate CRUD operations",
                    "4. Implement basic CRUD operations: create, read, update, delete using the local cache",
                    "",
                    "Local Cache Implementation Requirements:",
                    "- Use ConcurrentHashMap for thread-safe operations",
                    "- Implement methods like: addEntity(), getEntity(), updateEntity(), deleteEntity()",
                    "- Each entity type should have its own cache (e.g., Map<String, List<User>> userCache)",
                    "- Generate unique IDs for entities (UUID or incremental)",
                    "",
                    "Event-Driven Flow Implementation:",
                    "1. POST endpoint receives entity data",
                    "2. Save entity to local cache (simulating persistence)",
                    "3. Call processEntity method(s) to simulate Cyoda event processing",
                    "4. Return response with entity ID and processing status",
                    "",
                    "Example Cache Structure:",
                    "```java",
                    "private final ConcurrentHashMap<String, List<EntityName>> entityNameCache = new ConcurrentHashMap<>();",
                    "private final AtomicLong entityIdCounter = new AtomicLong(1);",
                    "",
                    "public String addEntityName(EntityName entity) {",
                    "    String id = String.valueOf(entityIdCounter.getAndIncrement());",
                    "    entity.setId(id);",
                    "    entityNameCache.computeIfAbsent(\"entities\", k -> new ArrayList<>()).add(entity);",
                    "    // Trigger event processing",
                    "    processEntityName(entity);",
                    "    return id;",
                    "}",
                    "```",
                    "",

                    "Include proper logging using SLF4J (e.g., `Logger logger = LoggerFactory.getLogger(EntityControllerPrototype.class);`) and use `logger.info(...)` or `logger.error(...)` appropriately.",
                    "Use Lombok annotations like @Data, @Getter, etc. import lombok.Data etc.",
                    "When handling org.springframework.web.server.ResponseStatusException, always use getStatusCode() instead of getStatus(). Do not use getReasonPhrase(); use getStatusCode().toString() instead for error field.",
                    "Use `package com.java_template.prototype;` as the package declaration for this file",
                    " Try to keep it minimalistic, without complex logic.",
                    "Please double-check that you are using all the information provided earlier."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_sketch_generated": {
      "transitions": {
        "generate_prototype": {
          "next": "prototype_completed",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "prototype_generation"
              ],
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/EntityControllerPrototype.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Use `package com.java_template.prototype;` as the package declaration for this file",
                    "Please, add validation annotations for request bodies and query parameters using javax/jakarta validation annotations:",
                    "import jakarta.validation.constraints.*;",
                    "Use @Validated on the controller class if needed to enable validation.",
                    "Use @Valid on method parameters that are request bodies.",
                    "Use @NotNull, @Size, @Pattern, etc. inside DTO classes for validation. Please use only primitives or String, no nested objects.",
                    "",
                    "For POST and PUT requests:",
                    "Use @PostMapping(\"/test\") or @PutMapping(\"/test\") at the top of the method.",
                    "Use @RequestBody @Valid for input DTOs.",
                    "Example:",
                    "@PostMapping(\"/test\") // must be first",
                    "public ResponseEntity<String> createTodo(@RequestBody @Valid Todo todo) { ... }",
                    "",
                    "For GET requests with query parameters:",
                    "Use @GetMapping(\"/test\") at the top of the method.",
                    "Use @RequestParam with constraint annotations directly on method parameters, or bind a DTO using @ModelAttribute + @Valid.",
                    "DO NOT use @RequestBody in GET methods – it will throw an error.",
                    "Correct example:",
                    "@GetMapping(\"/test\") // must be first",
                    "public ResponseEntity<String> getTodo(@RequestParam @NotBlank String task) { ... }",
                    "",
                    "Alternative correct example with DTO:",
                    "@Data",
                    "public static class Example {",
                    "    @NotBlank //optional",
                    "    private String example;",
                    "}",
                    "",
                    "@GetMapping(\"/test\") // must be first",
                    "public ResponseEntity<String> getTodo(@Valid @ModelAttribute TodoQuery query) { ... }",
                    "",
                    "Wrong example:",
                    "public ResponseEntity<String> getTodo(@RequestBody Todo todo) // this will not work for GET requests",
                    "",
                    "Please follow the rule:",
                    "Always place @PostMapping/@GetMapping as the first annotation.",
                    "Use @Valid with @RequestBody for POST/PUT, and with @ModelAttribute for GET.",
                    "Add a comment explaining the workaround where needed, especially if using @ModelAttribute in GET.",
                    "Include proper logging using SLF4J (e.g., `Logger logger = LoggerFactory.getLogger(EntityControllerPrototype.class);`) and use `logger.info(...)` or `logger.error(...)` appropriately.",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Java comments are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_completed": {
      "transitions": {
        "ask_to_discuss_prototype": {
          "next": "prototype_discussion_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "✅ First Prototype Ready!\n\nThe initial prototype based on your functional requirements is now ready! You can run and test it locally or directly in **GitHub Codespaces**.\n\n---\n\n### ▶️ How to Run the Prototype\n\n#### **Option 1: GitHub Codespaces **\nYou can open the repo in GitHub Codespaces and launch the prototype there:\n\n1. Open the repository in [GitHub Codespaces](https://github.com/Cyoda-platform/java-client-template/tree/{git_branch}).\n2. In the Codespace terminal, run:\n\n```bash\n# Update package list\nsudo apt update\n# Install Java 21 (headless — no GUI tools)\nsudo apt install -y openjdk-21-jdk-headless\n# Set Java 21 as active version\nexport JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n# Run the prototype app\n./gradlew runApp -PmainClass=com.java_template.Prototype\n```\n\n3. Make the app accessible from the browser:\n - In the **Ports** panel (bottom of the IDE), right-click on port `8080` and select **\"Change Port Visibility\" → \"Public\"**\n - Alternatively, after starting the app, click **\"Make Public\"** in the popup.\n\n4. Preview the app in the browser:\n `/swagger-ui/index.html` - Swagger UI: `https://<your-codespace-url>/swagger-ui/index.html`\n - OpenAPI specification: `https://<your-codespace-url>/v3/api-docs`\n\n> *Codespaces will provide a forwarded port URL — just append `/swagger-ui/index.html` or `/v3/api-docs` to it.*\n\n---\n\n#### **Option 2: Local Environment**\n\n1. Make sure you're on the correct branch and up to date:\n\n```bash\ngit checkout {git_branch}\ngit pull\n```\n\n2. Run the app:\n\n```bash\n./gradlew runApp -PmainClass=com.java_template.Prototype\n```\n\n3. Open your browser and go to:\n- [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)\n- or [http://localhost:8080/v3/api-docs](http://localhost:8080/v3/api-docs)\n\n---\n\n### 🧪 Testing\n\nYou’ll find example requests and responses in:\n📄 `entity/functional_requirement.md`\n\nUse these to test the API via the Swagger UI.\n\n---\n\n### ✅ Approval or Feedback\n\nIf everything looks good, feel free to approve it.\nIf anything’s off or you’d like changes, just ping me here. 🙌\n\n> ⚠️ **Note:**: This code is part of an early alpha version of the system. Some parts may not compile or behave as expected.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested": {
      "transitions": {
        "submit_answer": {
          "next": "prototype_discussion_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prototype_discussion_completed",
          "manual": true
        }
      }
    },
    "prototype_discussion_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "prototype_discussion_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "prototype_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in 'src/main/java/com/java_template/entity' to get the list of entities created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of a file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_prototype"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated EntityControllerPrototype.java code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java' or 'src/main/java/com/java_template/entity/{EntityName}.java' to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user. Do not simply reuse the file content you read; always generate a new, modified version of the code that reflects the user's latest requests.",
                    " Finally, make sure to save the file only after you have applied the required changes. Carefully verify that the updated content reflects your modifications, and do not proceed with saving unless actual updates have been made. Finally apply the necessary changes to the src/main/java/com/java_template/prototype/EntityControllerPrototype.java file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the EntityControllerPrototype.java file if necessary, answer the question, no save needed in this case.",
                    " Call add_application_resource tool to save changes with the full contents of the file after your changes and the full path to the file.",
                    " Path for the prototype: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java'",
                    " Path for the entity: 'src/main/java/com/java_template/entity/{EntityName}.java'",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested_processing": {
      "transitions": {
        "process_prototype_discussion_processing": {
          "next": "prototype_discussion_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        },
        "process_prototype_discussion_success": {
          "next": "prototype_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        }
      }
    },
    "prototype_discussion_completed": {
      "transitions": {
        "ask_to_confirm_migration": {
          "next": "migration_confirmation_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "\"\uD83C\uDF89 **Congratulations on completing your application prototype!**\n\nYou've done an incredible job bringing your idea to life — it's exciting to see it in action. \uD83E\uDD73\n\n**\uD83E\uDDD0 This is a major milestone — well done!**\nThat said, while your prototype is impressive, it's not quite production-ready yet. A few key areas still need attention:\n\n- **Scalability & High Availability**\n- **Data Persistence & Integrity**\n- **Production-Ready Features**\n\nTo bridge these gaps, we recommend refactoring your solution using the **Cyoda Framework** and deploying to a **High Availability (HA)** cluster on **Cyoda Cloud**. This will give you:\n\n✅ Enterprise-grade reliability & failover  \n✅ Seamless data persistence  \n✅ Effortless deployment & scaling  \n✅ A full suite of production-ready tools  \n\n**Ready to take it to the next level?**  \nGive me a \uD83D\uDC4D and we’ll start refactoring to make your app robust, scalable, and fully deployable on Cyoda Cloud.\n\nIf you’d like to learn more about Cyoda, just ask!\"\n",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested": {
      "transitions": {
        "submit_answer": {
          "next": "migration_confirmation_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "migration_confirmation_completed",
          "manual": true
        }
      }
    },
    "migration_confirmation_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "migration_confirmation_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "prototype_generation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of a file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_prototype"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated EntityControllerPrototype.java code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java' or 'src/main/java/com/java_template/entity/{EntityName}.java' to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user. Do not simply reuse the file content you read; always generate a new, modified version of the code that reflects the user's latest requests.",
                    " Finally, make sure to save the file only after you have applied the required changes. Carefully verify that the updated content reflects your modifications, and do not proceed with saving unless actual updates have been made. Finally apply the necessary changes to the src/main/java/com/java_template/prototype/EntityControllerPrototype.java file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the EntityControllerPrototype.java file if necessary, answer the question, no save needed in this case.",
                    " Call add_application_resource tool to save changes with the full contents of the file after your changes and the full path to the file.",
                    " Path for the prototype: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java'",
                    " Path for the entity: 'src/main/java/com/java_template/entity/{EntityName}.java'",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested_processing": {
      "transitions": {
        "process_migration_confirmation_processing": {
          "next": "migration_confirmation_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        },
        "process_migration_confirmation_success": {
          "next": "migration_confirmation_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        }
      }
    },
    "migration_confirmation_completed": {
      "transitions": {
        "migration_confirmation_notify": {
          "next": "migration_confirmation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🚀 **Let’s generate your application code!**\n\nI’ll take care of everything — no need to lift a finger.\n\n⏳ While the code is being generated (~10 min), feel free to grab a coffee ☕ and relax.\n\n**Here’s what’s happening behind the scenes:**\n- **Entity Design:** Defining JSON structures for your entities (`entity/*`)\n- **Workflow Design:** Mapping transitions (`entity/*/workflow.json`)\n- **Workflow Processor:** Java logic that powers it all (`entity/*/*Workflow.java`)\n\n🛠️ This step brings your app to life — from requirements to real, running code.\n\n✅ I’ll notify you as soon as everything’s ready to review.\n\nWant to dive deeper into the concepts?\nCheck these out:\n- [What’s an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true
            }
          }
        }
      }
    },
    "migration_confirmation_notified": {
      "transitions": {
        "generate_initial_cyoda_prototype": {
          "next": "generated_initial_cyoda_prototype",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "model": {},
              "memory_tags": [
                "generate_initial_cyoda_prototype"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided with a Java codebase that implements a REST API (using Spring Boot framework).",
                    "Currently, the code uses local in‑memory dictionaries (and counters) to store and manage data for one or more entity types.",
                    "Your task is to refactor the code so that all interactions with the local cache are replaced by calls to an external service called com.java_template.common.service.EntityService. Note, that EntityService is a bean, so inject it with CyodaEntityControllerPrototype constructor.",
                    "",
                    "IMPORTANT: Refactor ONLY the main entities (maximum 3 entities, orchestration entities like 'Job', 'Task' take precedence, then business domain entities) that have significant logic. Keep minor/utility entities in local cache.",
                    "",
                    "You can use only these functions for replacement - if this is not enough just skip and leave as is",
                    "1. CompletableFuture<UUID> idFuture = entityService.addItem(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    entity=data  # the validated data object",
                    ")",
                    "Note: entityService.addItem returns technicalId of the created entity.",
                    "CompletableFuture<List<UUID>> addItems idsFuture = entityService.addItems(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    entities=data",
                    ")",
                    "Note: entityService.addItems returns a list of technicalIds of the created entities.",
                    "2. Data retrieval:",
                    "CompletableFuture<ObjectNode> itemFuture = entityService.getItem(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,",
                    "    technicalId=<id>",
                    ")",
                    "CompletableFuture<ArrayNode> itemsFuture = entityService.getItems(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,",
                    ")",
                    "CompletableFuture<ArrayNode> filteredItemsFuture = entityService.getItemsByCondition(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,",
                    "    condition=condition",
                    ")",
                    "Note: when retrieving or returning entities via entityService.getItem / getItems / getItemsByCondition, the unique identifier is stored in the field \"technicalId\" (not \"id\"). Use \"technicalId\" to extract or compare entity IDs.\n",
                    "Please use the following classes to construct search conditions for entity queries:",
                    "Condition (com.java_template.common.util.Condition) and SearchConditionRequest (com.java_template.common.util.SearchConditionRequest)",
                    "",
                    "To create a single condition, wrap it into a SearchConditionRequest with one element in the list:",
                    "com.java_template.common.util.SearchConditionRequest.group(\"AND\",",
                    "    com.java_template.common.util.Condition.of(\"$.field\", \"EQUALS\", \"value\")",
                    ")",
                    "",
                    "To create a group of multiple conditions with logical operator AND or OR, use:",
                    "com.java_template.common.util.SearchConditionRequest.group(\"OR\",",
                    "    com.java_template.common.util.Condition.of(\"$.field1\", \"EQUALS\", \"value1\"),",
                    "    com.java_template.common.util.Condition.of(\"$.field2\", \"GREATER_THAN\", 10)",
                    ")",
                    "",
                    "Supported operatorType values (for Condition):",
                    "\"EQUALS\", \"NOT_EQUAL\", \"IEQUALS\", \"INOT_EQUAL\", \"IS_NULL\", \"NOT_NULL\",",
                    "\"GREATER_THAN\", \"GREATER_OR_EQUAL\", \"LESS_THAN\", \"LESS_OR_EQUAL\",",
                    "\"ICONTAINS\", \"ISTARTS_WITH\", \"IENDS_WITH\", \"INOT_CONTAINS\",",
                    "\"INOT_STARTS_WITH\", \"INOT_ENDS_WITH\", \"MATCHES_PATTERN\",",
                    "\"BETWEEN\", \"BETWEEN_INCLUSIVE\"",
                    "",
                    "Note: If the operatorType starts with the letter 'I', it means the comparison should ignore case (e.g., \"IEQUALS\" = equals ignoring case).",
                    "",
                    "Supported operator values (for SearchConditionRequest): \"AND\", \"OR\"",
                    "",
                    "Pass the resulting SearchConditionRequest as the third argument (condition) to:",
                    "entityService.getItemsByCondition(entityModel, entityVersion, condition)",
                    "3. CompletableFuture<UUID> updatedItemId = entityService.updateItem(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    technicalId=id, #technicalId is required",
                    "    entity=data,",
                    ")",
                    "Note: entityService.updateItem returns technicalId of the updated entity.",
                    "Use @JsonIgnore on fields like 'technicalId' and pass the original Java object directly to addItem or updateItem without converting to ObjectNode.",
                    "4. CompletableFuture<UUID> deletedItemId = entityService.deleteItem(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    technicalId=id,",
                    ")",
                    "Note: entityService.deleteItem returns technicalId of the deleted entity.",
                    "5. CompletableFuture<ArrayNode> deletedItemsInfo = entityService.deleteItems(",
                    "    entityModel=\"{entityName}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    ")",
                    "Note: entityService.deleteItems returns an array containing result information, for example: '[{\"entityModelClassId\": \"d16a966a-37e4-11f0-8bfa-00000ae966a9\",\"deleteResult\": {\"numberOfEntitites\": 18,\"numberOfEntititesRemoved\": 18,\"idToError\": {}}}]'",
                    "use 'import static com.java_template.common.config.Config.*;' to import ENTITY_VERSION",
                    "Add this code:",
                    "package com.java_template.prototype;",
                    "use this class name 'CyodaEntityControllerPrototype'",
                    "Lombok is already configured in the project via io.freefair.lombok plugin. Please use Lombok annotations like @Data, @Getter, @Setter, @AllArgsConstructor, @NoArgsConstructor, etc., instead of manually writing getters, setters, and constructors, and make sure to include the necessary Lombok imports in the generated code.",
                    "Make sure to assign a unique @RequestMapping path to each controller to avoid conflicts. Do not reuse the same base path across multiple controllers.\n",
                    "Preserve the endpoint routes and any other essential business logic.",
                    "Generate a controller that calls service methods directly and lets exceptions propagate. Do not use try-catch. Let the service throw ResponseStatusException when needed. Avoid using getReasonPhrase(); use getStatusCode().toString() instead for error field.",
                    "Please make sure you keep all the necessary business logic, like data ingestion, calling any external apis, mocks, calculations etc.",
                    "Please take into account that entity ObjectNode has 'technicalId'",
                    "Please return only Java code without additional information. If you'd like to add any comments please use // comment",
                    "Please use correct logging, e.g.:",
                    "org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(CyodaEntityControllerPrototype.class);",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/EntityControllerPrototype.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/CyodaEntityControllerPrototype.java"
                ]
              }
            }
          }
        }
      }
    },
    "generated_initial_cyoda_prototype": {
      "transitions": {
        "generate_workflows_from_prototype": {
          "next": "workflows_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list. Examples: 'src/main/java/com/java_template/application/processor', 'src/main/java/com/java_template/application/criteria', 'src/main/java/com/java_template/entity', 'com/java_template/application/workflow'"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/CyodaEntityControllerPrototype.java"
                ]
              },
              "memory_tags": [
                "generate_workflow_from_prototype"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now that you've outlined the entities from the prototype code, please,",
                    "for each main business entity generate workflow configuration json that represents",
                    "the business workflow of the entity that can be executed on the entity persistence event and call add_application_resource",
                    "If there is some logic in the CyodaEntityControllerPrototype that is applied to the entity right after saving it (entityService.additem) - it makes sense to move it to the workflow.",
                    "",
                    "IMPORTANT: Base workflows on the processEntityName function pattern from CyodaEntityControllerPrototype.java.",
                    "- For simple entities with basic logic: create ONE processor named 'EntityNameProcessor'",
                    "- For complex entities: add additional processors ONLY if there's clear business justification (e.g., validation, transformation, integration steps)",
                    "- Maximum 3 processors",
                    "- Each processor must correspond to a distinct business operation, not just CRUD",
                    "",
                    "Focus on entities that have meaningful business operations beyond simple data manipulation.",
                    "",
                    "Workflow is a finite state machine (FSM) that consists of states and transitions.",
                    "Each state has a list of transitions. Each transition has a next attribute, with the next state.",
                    "Each transition may have an processor (a name of a processor java class that will implement the process code).",
                    "Each transition may have a criterion (a name of a condition java class that will implement the validation code or a group condition).",
                    "Always start from an initial state 'none'.",
                    "Avoid loops.",
                    " Use tool list_directory_files if you are not sure what entities we have",
                    "",
                    "Call add_application_resource for each entity with:",
                    "- resource_path: 'src/main/java/com/java_template/application/workflow/{EntityName}.json'",
                    "- file_contents: workflow json configuration",
                    "",
                    "JSON Example of the Workflow:",
                    "{",
                    "  \"version\": \"1.0\",",
                    "  \"description\": \"Template FSM with structured states, transitions, processors, and criterions\",",
                    "  \"initial_state\": \"state_initial\",",
                    "  \"workflow_name\": \"template_workflow\",",
                    "  \"states\": {",
                    "    \"state_initial\": {",
                    "      \"transitions\": {",
                    "        \"transition_to_01\": {",
                    "          \"next\": \"state_01\"",
                    "        }",
                    "      }",
                    "    },",
                    "    \"state_01\": {",
                    "      \"transitions\": [",
                    "        \"transition_to_02\": {",
                    "          \"next\": \"state_02\",",
                    "          \"manual\": true,",
                    "          \"processors\": [",
                    "            {",
                    "              \"name\": \"ExampleProcessorName1\" # remember this name - you'll need to implement this processor java class",
                    "            }",
                    "          ]",
                    "        }",
                    "      ]",
                    "    },",
                    "    \"state_02\": {",
                    "      \"transitions\": [",
                    "        \"transition_with_criterion_simple\": {",
                    "          \"next\": \"state_criterion_check_01\",",
                    "          \"processors\": [",
                    "            {",
                    "              \"name\": \"ExampleProcessorName2\" #remember this name -you'll need to implement this processor java class",
                    "            }",
                    "          ],",
                    "          \"criteria\": [",
                    "            {",
                    "              \"type\": \"function\",",
                    "              \"function\": {",
                    "                \"name\": \"ExampleCriterionName1\" #remember this name -you'll need to implement this criterion java class",
                    "              }",
                    "            }",
                    "          ]",
                    "        }",
                    "      ]",
                    "    },",
                    "  }",
                    "}"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "workflows_generated": {
      "transitions": {
        "analyze_workflows_and_extract_operations": {
          "next": "processors_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_file_contents",
                    "description": "Read the CyodaEntityControllerPrototype.java file to extract business logic from processEntityName methods",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "file_path": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/prototype/CyodaEntityControllerPrototype.java"
                          ],
                          "description": "Path to the prototype controller file"
                        }
                      },
                      "required": [
                        "file_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_entity_pojo_contents",
                    "description": "Get entity POJO contents to understand the data model and available properties",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "entity_name": {
                          "type": "string",
                          "description": "Name of the entity to get POJO contents"
                        }
                      },
                      "required": [
                        "entity_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                }
              ],
              "memory_tags": [
                "generate_workflow_from_prototype"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now for each processor name that you've outlined in the workflows configurations,",
                    "please provide the code for it based on the prototype code and call add_application_resource tool with processor name and content - processor java code.",
                    "",
                    "BEFORE WRITING ANY PROCESSOR CODE:",
                    "1. Use get_entity_pojo_contents tool to understand the entity data model and available properties",
                    "2. Review the entity POJO structure to see what getters/setters are actually available",
                    "3. Only use properties that exist in the entity POJO - do not invent or assume properties",
                    "",
                    "IMPORTANT: The processor class name and the name used in the supports() method MUST EXACTLY MATCH the function name from the workflow configuration (action.config.function.name). Do not modify or change these names in any way.",
                    "",
                    "CRITICAL: Only access existing POJO properties in your code. Do not use getters/setters for properties that don't exist in the entity class. If you're unsure about entity properties, use get_entity_pojo_contents to check the actual entity structure.",
                    "",
                    "Call add_application_resource with:",
                    "- resource_path: 'src/main/java/com/java_template/application/processor/{ExampleProcessorName}.java'",
                    "- file_contents: processor java code using CyodaProcessor interface",
                    "",
                    "Processor Interface Requirements",
                    "",
                    "public interface CyodaProcessor {",
                    "    EntityProcessorCalculationResponse process(CyodaEventContext<EntityProcessorCalculationRequest> context);",
                    "    boolean supports(OperationSpecification modelKey);",
                    "}",
                    "",
                    "Supports method implementation:",
                    "",
                    "@Override",
                    "public boolean supports(OperationSpecification modelSpec) {",
                    "    return \"ExampleProcessorName\".equals(modelSpec.operationName()) &&",
                    "           \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "           Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "}",
                    "",
                    "",
                    "Processor Class Prototype (Use this pattern)",
                    "",
                    "package com.java_template.application.processor;",
                    "import com.java_template.application.entity.EntityName;",
                    "import com.java_template.common.serializer.ErrorInfo;",
                    "import com.java_template.common.serializer.ProcessorSerializer;",
                    "import com.java_template.common.serializer.SerializerFactory;",
                    "import com.java_template.common.workflow.CyodaEventContext;",
                    "import com.java_template.common.workflow.CyodaProcessor;",
                    "import com.java_template.common.workflow.OperationSpecification;",
                    "import com.java_template.common.config.Config;",
                    "import org.cyoda.cloud.api.event.processing.EntityProcessorCalculationRequest;",
                    "import org.cyoda.cloud.api.event.processing.EntityProcessorCalculationResponse;",
                    "import org.slf4j.Logger;",
                    "import org.slf4j.LoggerFactory;",
                    "import org.springframework.stereotype.Component;",
                    "import java.util.ArrayList;",
                    "import java.util.List;",
                    "import java.util.Set;",
                    "import java.util.stream.Collectors",
                    "",
                    "@Component",
                    "public class ExampleProcessorName implements CyodaProcessor {",
                    "",
                    "    private final Logger logger = LoggerFactory.getLogger(this.getClass());",
                    "    private final ProcessorSerializer serializer;",
                    "",
                    "    public ExampleProcessorName(SerializerFactory serializerFactory) {",
                    "        this.serializer = serializerFactory.getDefaultProcessorSerializer();",
                    "        logger.info(\"ExampleProcessorName initialized with SerializerFactory\");",
                    "    }",
                    "",
                    "    @Override",
                    "    public EntityProcessorCalculationResponse process(CyodaEventContext<EntityProcessorCalculationRequest> context) {",
                    "        EntityProcessorCalculationRequest request = context.getEvent();",
                    "        logger.info(\"Processing EntityName for request: {}\", request.getId());",
                    "",
                    "        // Fluent entity processing with validation",
                    "        return serializer.withRequest(request)",
                    "            .toEntity(EntityName.class)",
                    "            .validate(this::isValidEntity, \"Invalid entity state\")",
                    "            .map(this::processEntityLogic)",
                    "            .complete();",
                    "    }",
                    "",
                    "    @Override",
                    "    public boolean supports(OperationSpecification modelSpec) {",
                    "        return \"ExampleProcessorName\".equals(modelSpec.operationName()) &&",
                    "               \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "               Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "    }",
                    "",
                    "",
                    "    // CRITICAL: This method MUST contain the actual business logic from CyodaEntityControllerPrototype",
                    "    // Find the processEntityName method in CyodaEntityControllerPrototype.java and copy its logic here",
                    "    private EntityName processEntityLogic(EntityName entity) {",
                    "        // TODO: Replace this comment with ACTUAL business logic from processEntityName method",
                    "        // Example of what should be here (from prototype):",
                    "        // - Data validation and transformation",
                    "        // - External API calls",
                    "        // - Business rule calculations",
                    "        // - Field modifications and enrichment",
                    "        // - Any other processing logic from the prototype method",
                    "        ",
                    "        return entity;",
                    "    }",
                    "",
                    "    // Add other helper methods as needed based on the prototype logic",
                    "}",
                    "",
                    "CRITICAL REQUIREMENTS:",
                    "1. **NO PLACEHOLDER CODE**: The processEntityLogic method MUST contain real business logic from CyodaEntityControllerPrototype",
                    "WHAT TO LOOK FOR IN CyodaEntityControllerPrototype.java:",
                    "- Methods that process entities (names may vary: `processUsers`, `processPets`, `handleOrders`, `transformData`, etc.)",
                    "- Private methods that contain business logic for your entity type",
                    "",
                    "ONLY use existing entity properties - do not access non-existent getters/setters.",
                    "",
                    "    public interface ProcessorSerializer {",
                    "        <T extends CyodaEntity> T extractEntity(EntityProcessorCalculationRequest request, Class<T> clazz);",
                    "        JsonNode extractPayload(EntityProcessorCalculationRequest request);",
                    "        <T extends CyodaEntity> JsonNode entityToJsonNode(T entity);",
                    "        String getType();",
                    "        ResponseBuilder.ProcessorResponseBuilder responseBuilder(EntityProcessorCalculationRequest request);",
                    "        default ProcessingChain withRequest(EntityProcessorCalculationRequest request) {",
                    "            return new ProcessingChainImpl(this, request);",
                    "        }",
                    "        interface ProcessingChain {",
                    "            ProcessingChain map(Function<JsonNode, JsonNode> mapper);",
                    "            <T extends CyodaEntity> EntityProcessingChain<T> toEntity(Class<T> clazz);",
                    "            ProcessingChain withErrorHandler(BiFunction<Throwable, JsonNode, ErrorInfo> errorHandler);",
                    "            EntityProcessorCalculationResponse complete();",
                    "        }",
                    "",
                    "        interface EntityProcessingChain<T extends CyodaEntity> {",
                    "            EntityProcessingChain<T> map(Function<T, T> mapper);",
                    "            EntityProcessingChain<T> validate(Function<T, Boolean> validator);",
                    "            EntityProcessingChain<T> validate(Function<T, Boolean> validator, String errorMessage);",
                    "            ProcessingChain toJsonFlow(Function<T, JsonNode> converter);",
                    "            EntityProcessingChain<T> withErrorHandler(BiFunction<Throwable, T, ErrorInfo> errorHandler);",
                    "            EntityProcessorCalculationResponse complete();",
                    "            EntityProcessorCalculationResponse complete(Function<T, JsonNode> converter);",
                    "        }",
                    "",
                    "",
                    "add_application_resource Tool Usage",
                    "",
                    "After each processor is generated, call the add_application_resource tool like:",
                    "",
                    "FINAL REMINDER - ABSOLUTELY CRITICAL:",
                    "🚨 DO NOT CREATE PROCESSORS WITH PLACEHOLDER CODE OR COMMENTS LIKE 'TODO: Add business logic'",
                    "🚨 YOU MUST FIND AND COPY THE ACTUAL BUSINESS LOGIC FROM CyodaEntityControllerPrototype.java",
                    "🚨 SEARCH FOR ENTITY PROCESSING METHODS (names may vary - not always processEntityName)",
                    "🚨 LOOK FOR METHODS REFERENCED IN entityService.addItem/s() CALLS",
                    "🚨 THE PROCESSOR MUST DO THE SAME WORK AS THE PROTOTYPE METHOD - NO SHORTCUTS",
                    "",
                    "If you cannot find any business logic methods for an entity, create a simple processor that just returns the entity unchanged, but DO NOT create placeholder code that pretends to do business logic."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "processors_generated": {
      "transitions": {
        "generate_criteria_from_workflows": {
          "next": "criteria_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_entity_pojo_contents",
                    "description": "Get entity POJO contents to understand the data model and available properties",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "entity_name": {
                          "type": "string",
                          "description": "Name of the entity to get POJO contents for (e.g., 'User', 'Order', 'Product')"
                        }
                      },
                      "required": [
                        "entity_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add application resource file with path and content",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Full relative path to the resource including filename"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Content of the file to be written"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ]
                    }
                  }
                }
              ],
              "memory_tags": [
                "generate_workflow_from_prototype"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now for each criterion (if the workflow json has any criteria of type function and only for them) that you've outlined in the workflows configurations,",
                    "please provide the code for it based on the prototype code and call add_application_resource tool with criterion name and content - criterion java code.",
                    "",
                    "BEFORE WRITING ANY CRITERIA CODE:",
                    "1. Use get_entity_pojo_contents tool to understand the entity data model and available properties",
                    "2. Review the entity POJO structure to see what getters/setters are actually available",
                    "3. Only use properties that exist in the entity POJO - do not invent or assume properties",
                    "",
                    "IMPORTANT: The criterion class name and the name used in the supports() method MUST EXACTLY MATCH the criteria name from the workflow configuration (condition.name). Do not modify or change these names in any way.",
                    "",
                    "CRITICAL: Only access existing POJO properties in your code. Do not use getters/setters for properties that don't exist in the entity class. If you're unsure about entity properties, use get_entity_pojo_contents to check the actual entity structure.",
                    "",
                    "Call add_application_resource with:",
                    "- resource_path: 'src/main/java/com/java_template/application/criterion/{ExampleCriterionName}.java'",
                    "- file_contents: criterion java code using CyodaCriterion interface",
                    "",
                    "Criterion Interface Requirements",
                    "",
                    "public interface CyodaCriterion {",
                    "    EntityCriteriaCalculationResponse check(CyodaEventContext<EntityCriteriaCalculationRequest> request);",
                    "    boolean supports(OperationSpecification opsSpec);",
                    "}",
                    "",
                    "Supports method implementation:",
                    "",
                    "@Override",
                    "public boolean supports(OperationSpecification modelSpec) {",
                    "    return \"ExampleCriterionName\".equals(modelSpec.operationName()) &&",
                    "           \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "           Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "}",
                    "",
                    "",
                    "Processor Class Criterion (Use this pattern)",
                    "",
                    "import com.java_template.application.entity.EntityName;",
                    "import com.java_template.common.serializer.CriterionSerializer;",
                    "import com.java_template.common.serializer.ErrorInfo;",
                    "import com.java_template.common.serializer.EvaluationOutcome;",
                    "import com.java_template.common.serializer.ReasonAttachmentStrategy;",
                    "import com.java_template.common.serializer.SerializerFactory;",
                    "import com.java_template.common.serializer.StandardEvalReasonCategories",
                    "import com.java_template.common.config.Config;",
                    "import com.java_template.common.workflow.CyodaCriterion;",
                    "import com.java_template.common.workflow.CyodaEventContext;",
                    "import com.java_template.common.workflow.OperationSpecification;",
                    "import org.cyoda.cloud.api.event.common.ModelSpec;",
                    "import org.cyoda.cloud.api.event.processing.EntityCriteriaCalculationRequest;",
                    "import org.cyoda.cloud.api.event.processing.EntityCriteriaCalculationResponse;",
                    "import org.slf4j.Logger;",
                    "import org.slf4j.LoggerFactory;",
                    "import org.springframework.stereotype.Component;",
                    "import java.util.Set;",
                    "@Component",
                    "public class ExampleCriterionName implements CyodaCriterion {",
                    "",
                    "    private final Logger logger = LoggerFactory.getLogger(this.getClass());",
                    "    private final CriterionSerializer serializer;",
                    "",
                    "    public ExampleCriterionName(SerializerFactory serializerFactory) {",
                    "        this.serializer = serializerFactory.getDefaultCriteriaSerializer();",
                    "        logger.info(\"ExampleCriterionName initialized with SerializerFactory\");",
                    "    }",
                    "",
                    "    @Override",
                    "    public EntityCriteriaCalculationResponse check(CyodaEventContext<EntityCriteriaCalculationRequest> context) {",
                    "        EntityCriteriaCalculationRequest request = context.getEvent();",
                    "",
                    "        return serializer.withRequest(request)",
                    "            .evaluateEntity(EntityName.class, this::applyValidation1)",
                    "            .withReasonAttachment(ReasonAttachmentStrategy.toWarnings())",
                    "            .complete();",
                    "    }",
                    "",
                    "    @Override",
                    "    public boolean supports(OperationSpecification modelSpec) {",
                    "        return \"ExampleCriterionName\".equals(modelSpec.operationName()) &&",
                    "               \"entityName\".equalsIgnoreCase(modelSpec.modelKey().getName()) &&",
                    "               Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();",
                    "    }",
                    "",
                    "    // Helper methods like isValidEntity, applyValidation1, etc.",
                    "}",
                    "Replace:",
                    "",
                    "ExampleCriterionName with the EXACT criterion name from workflow configuration (condition.name) - use it exactly as written, no modifications",
                    "EntityName with your actual entity class",
                    "entityName with your actual entity name (camelCase)",
                    "",
                    "Logic placeholders (applyTransformation1, handleEntityNameError, etc.) with real implementations as needed.",
                    "ONLY use existing entity properties - do not access non-existent getters/setters.",
                    "",
                    "Standard evaluation reason categories available:",
                    "public enum StandardEvalReasonCategories {",
                    "    VALIDATION_FAILURE(\"VALIDATION_FAILURE\"),",
                    "    BUSINESS_RULE_FAILURE(\"BUSINESS_RULE_FAILURE\"),",
                    "    DATA_QUALITY_FAILURE(\"DATA_QUALITY_FAILURE\"),",
                    "    public String getCode() { return code; }",
                    "}",
                    "",
                    "    public interface CriterionSerializer {",
                    "        <T extends CyodaEntity> T extractEntity(EntityCriteriaCalculationRequest request, Class<T> clazz);",
                    "        JsonNode extractPayload(EntityCriteriaCalculationRequest request);",
                    "        <T extends CyodaEntity> JsonNode entityToJsonNode(T entity);",
                    "        String getType();",
                    "        ResponseBuilder.CriterionResponseBuilder responseBuilder(EntityCriteriaCalculationRequest request);",
                    "        default EvaluationChain withRequest(EntityCriteriaCalculationRequest request) {",
                    "            return new EvaluationChainImpl(this, request);",
                    "        }",
                    "        interface EvaluationChain {",
                    "            EvaluationChain evaluate(Function<JsonNode, EvaluationOutcome> evaluator);",
                    "            <T extends CyodaEntity> EvaluationChain evaluateEntity(Class<T> clazz, Function<T, EvaluationOutcome> evaluator);",
                    "            EvaluationChain withErrorHandler(BiFunction<Throwable, JsonNode, ErrorInfo> errorHandler);",
                    "            EvaluationChain withReasonAttachment(ReasonAttachmentStrategy strategy);",
                    "            EntityCriteriaCalculationResponse complete();",
                    "        }",
                    "",
                    "// EvaluationOutcome usage:",
                    "// Success: EvaluationOutcome.success()",
                    "// Failure: EvaluationOutcome.fail(\"reason\") or EvaluationOutcome.fail(\"reason\", category)",
                    "// Categories: businessRuleFailure(), dataQualityFailure(), structuralFailure()",
                    "// Check: outcome.isSuccess(), outcome.isFailure()",
                    "",
                    "@FunctionalInterface",
                    "public interface ReasonAttachmentStrategy {",
                    "    void attachReason(EntityCriteriaCalculationResponse response, EvaluationReason reason);",
                    "",
                    "",
                    "add_application_resource Tool Usage",
                    "",
                    "After each criterion is generated, call the add_application_resource tool like:"
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "criteria_generated": {
      "transitions": {
        "validate_workflow_implementation": {
          "next": "workflow_implementation_validated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "memory_tags": [
                "generate_workflow_from_prototype"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "validate_workflow_implementation",
                    "description": "Validate that all processors and criteria from workflow configuration have been implemented correctly. Returns validation results showing missing or extra components.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_file_path": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/application/workflow"
                          ],
                          "description": "Path to the workflow directory containing workflow JSON files"
                        },
                        "processors_path": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/application/processor"
                          ],
                          "description": "Path to the processors directory containing Java processor classes"
                        },
                        "criteria_path": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/application/criterion"
                          ],
                          "description": "Path to the criteria directory containing Java criteria classes"
                        }
                      },
                      "required": [
                        "workflow_file_path",
                        "processors_path",
                        "criteria_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add a missing processor or criteria implementation file. Use this to create missing components identified by validation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Path where to save the file. Use EXACT patterns: For processors: 'src/main/java/com/java_template/application/processor/{ProcessorName}.java' where {ProcessorName} is the EXACT name from workflow config. For criteria: 'src/main/java/com/java_template/application/criterion/{CriteriaName}.java' where {CriteriaName} is the EXACT name from workflow config. Examples: 'src/main/java/com/java_template/application/processor/clone_repo.java', 'src/main/java/com/java_template/application/criterion/build_new_app_criteria.java'"
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Complete Java code content for the processor or criteria class"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please validate that all processors and criteria from the workflow configuration have been properly implemented.",
                    "",
                    "1. First, call validate_workflow_implementation to check the current state",
                    "2. If validation shows missing processors or criteria, create them using add_application_resource",
                    "3. For missing processors: use the processor template with the EXACT name from workflow config",
                    "   - Path pattern: 'src/main/java/com/java_template/application/processor/{ProcessorName}.java'",
                    "   - Class name: {ProcessorName} (exact match from workflow)",
                    "4. For missing criteria: use the criteria template with the EXACT name from workflow config",
                    "   - Path pattern: 'src/main/java/com/java_template/application/criterion/{CriteriaName}.java'",
                    "   - Class name: {CriteriaName} (exact match from workflow)",
                    "5. Do NOT create or modify extra components that are not in the workflow configuration",
                    "",
                    "IMPORTANT: When creating missing components, the class name and supports() method MUST use the EXACT name from the workflow configuration.",
                    "",
                    "Examples:",
                    "- Processor '{ProcessorName}' → 'src/main/java/com/java_template/application/processor/{ProcessorName}.java'",
                    "- Criteria '{CriteriaName}' → 'src/main/java/com/java_template/application/criterion/{CriteriaName}.java'",
                    "",
                    "After creating any missing components, call validate_workflow_implementation again to confirm everything is correct."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 10,
              "approve": true
            }
          }
        }
      }
    },
    "workflow_implementation_validated": {
      "transitions": {
        "finish_app_generation_flow": {
          "next": "finished_app_generation_flow"
        }
      }
    },
    "finished_app_generation_flow": {
      "transitions": {
        "update_routes_file": {
          "next": "updated_routes_file",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "memory_tags": [
                "adding_controller"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_file_contents",
                    "description": "Get file contents by path to review existing code structure",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "file_path": {
                          "type": "string",
                          "description": "Path to the file to read. Examples: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java', 'src/main/java/com/java_template/entity/EntityName.java', 'src/main/java/com/java_template/application/processor/ProcessorName.java', 'src/main/java/com/java_template/application/criteria/CriteriaName.java'"
                        }
                      },
                      "required": [
                        "file_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list. Examples: 'src/main/java/com/java_template/application/processor', 'src/main/java/com/java_template/application/criteria', 'src/main/java/com/java_template/entity', 'com/java_template/application/workflow'"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You need to refactor the CyodaEntityControllerPrototype into a clean Controller class.",
                    "",
                    "CONTEXT: During previous steps, we:",
                    "1. Analyzed CyodaEntityControllerPrototype code",
                    "2. Identified business logic and moved it to workflow processors and criteria",
                    "3. Created separate POJO entities based on the prototype",
                    "4. Generated workflows with processors for business operations",
                    "5. Validated that processor logic migration was completed successfully",
                    "",
                    "YOUR TASK:",
                    "1. First, use get_file_contents to review the original CyodaEntityControllerPrototype.java",
                    "2. Use list_directory_files to see what processors and criteria were created in their respective directories",
                    "3. Review any specific entities, processors, and criteria files (if you need to understand what was moved)",
                    "4. Create a new Controller class that:",
                    "   - Keeps the REST API endpoints from CyodaEntityControllerPrototype",
                    "   - PRESERVES ALL EntityService invocations, especially .addItem() calls - these MUST stay intact",
                    "   - Removes business logic that was moved to processors/criteria",
                    "   - Removes code that is no longer necessary",
                    "   - Renames the class to 'Controller'",
                    "   - Fixes imports appropriately",
                    "   - Do not import anything from CyodaEntityControllerPrototype directly, as CyodaEntityControllerPrototype will be deleted. Use entities from the entity package instead. And then copy the rest of DTOs and necessary inner classes from CyodaEntityControllerPrototype to your code.",
                    "   - Injects ObjectMapper via constructor instead of creating new instances",
                    "   - Use private final RestTemplate restTemplate = new RestTemplate(); if necessary",
                    "   - Includes proper SLF4J logging",
                    "   - Follows Spring Boot best practices",
                    "   - Use package com.java_template.controller;",
                    "   - Make sure at least one entityService.addItem() call is present in the controller.",
                    "",
                    "CRITICAL: EntityService calls (especially .addItem()) must remain in the controller because:",
                    "- Processors are triggered by Cyoda external orchestration AFTER entity persistence",
                    "- The controller is responsible for persisting entities via EntityService",
                    "- Business logic was moved to processors, but persistence logic stays in controller",
                    "",
                    "IMPORTANT: Focus on keeping only the API layer responsibilities - routing, request/response handling, and delegation to services.",
                    "Remove any business logic, data processing, or validation that should be in processors/criteria, but keep all EntityService persistence calls.",
                    "",
                    "OUTPUT: Provide the complete refactored Controller.java code. The system will automatically save it to the correct location.",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```.",
                    "When creating Spring Boot REST controllers that use EntityService:",
                    "1. Import all necessary classes: UUID, CompletableFuture, ExecutionException, InterruptedException, JsonProcessingException",
                    "2. Define entity name constants at class level",
                    "3. Use correct EntityService method signatures: addItem(entityModel, entityVersion, entity)",
                    "4. Handle async operations properly with CompletableFuture.get() and declare throws ExecutionException, InterruptedException",
                    "5. Wrap ObjectMapper.treeToValue() calls in try-catch blocks for JsonProcessingException",
                    "6. Use proper UUID.toString() conversions for response objects",
                    "7. Use entity search by conditions if necessary instead of non-existent convenience methods",
                    "8. Import static ENTITY_VERSION from Config class"
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 10,
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/prototype/CyodaEntityControllerPrototype.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/controller/Controller.java"
                ]
              },
              "approve": true
            }
          }
        },
        "rollback": {
          "next": "finished_prototype_cyoda_workflow_json",
          "manual": true
        }
      }
    },
    "updated_routes_file": {
      "transitions": {
        "update_routes_file": {
          "next": "validated_controller",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "memory_tags": [
                "controller_validation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_file_contents",
                    "description": "Get file contents by path to review existing code structure",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "file_path": {
                          "type": "string",
                          "description": "Path to the file to read. Examples: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java', 'src/main/java/com/java_template/entity/EntityName.java', 'src/main/java/com/java_template/application/processor/ProcessorName.java', 'src/main/java/com/java_template/application/criteria/CriteriaName.java'"
                        }
                      },
                      "required": [
                        "file_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list. Examples: 'src/main/java/com/java_template/application/processor', 'src/main/java/com/java_template/application/criteria', 'src/main/java/com/java_template/entity', 'com/java_template/application/workflow'"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "get_entity_pojo_contents",
                    "description": "Get entity POJO contents to understand the data model and available properties",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "entity_name": {
                          "type": "string",
                          "description": "Name of the entity to get POJO contents"
                        }
                      },
                      "required": [
                        "entity_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You need to check and fix the Controller class.",
                    "",
                    "When writing Spring Boot REST controllers that interact with EntityService:",
                    " Use get_pojo_contents tool to understand the entity data model and available properties",
                    "",
                    "CRITICAL RULES:",
                    "- EntityService methods are: getItem(), addItem(), updateItem(), deleteItem() - NOT findItemById() or deleteItemById()",
                    "- EntityService methods expect UUID technicalId parameters, not String - always use UUID.fromString(stringId)",
                    "- EntityService.getItem() returns ObjectNode - use objectMapper.treeToValue(node, EntityClass.class) to convert to entity",
                    "- EntityService.deleteItem() returns UUID (the deleted ID), not boolean",
                    "- Add JsonProcessingException to method signatures when using objectMapper.treeToValue()",
                    "- Entity technicalId fields are UUID type - use UUID.fromString() when setting from String DTOs",
                    "- Map DTO fields correctly to entity fields (check entity class for actual field names)",
                    "- Always import: UUID, JsonProcessingException, ObjectNode when using EntityService",
                    "",
                    "VALIDATION CHECKLIST:",
                    "□ Method names match EntityService interface exactly",
                    "□ UUID conversions applied where needed",
                    "□ ObjectMapper used for ObjectNode → Entity conversion",
                    "□ Exception handling includes JsonProcessingException",
                    "□ DTO → Entity field mapping verified against actual entity classes",
                    "□ All required imports present",
                    "",
                    "When managing imports in Spring Boot controllers using EntityService:",
                    "",
                    "REQUIRED IMPORTS CHECKLIST:",
                    "□ com.fasterxml.jackson.core.JsonProcessingException (when using objectMapper.treeToValue)",
                    "□ com.fasterxml.jackson.databind.ObjectMapper (for JSON operations)",
                    "□ com.fasterxml.jackson.databind.node.ObjectNode (EntityService return type)",
                    "□ java.util.UUID (for technicalId conversions)",
                    "□ java.util.concurrent.ExecutionException (for CompletableFuture.get())",
                    "□ jakarta.validation.Valid (for request validation)",
                    "□ jakarta.validation.constraints.NotBlank (for field validation)",
                    "□ org.springframework.http.ResponseEntity (for REST responses)",
                    "□ org.springframework.web.bind.annotation.* (for REST mappings)",
                    "",
                    "COMMON MISSING IMPORTS:",
                    "- JsonProcessingException when using objectMapper.treeToValue()",
                    "- UUID when converting String IDs to UUID",
                    "- ObjectNode when working with EntityService responses",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 10,
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/controller/Controller.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/controller/Controller.java"
                ]
              },
              "approve": true
            }
          }
        },
        "rollback": {
          "next": "finished_prototype_cyoda_workflow_json",
          "manual": true
        }
      }
    },
    "validated_controller": {
      "transitions": {
        "validate_app_quality": {
          "next": "validated_app_quality",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "model": {},
              "memory_tags": [
                "entity_processing_logic_validation"
              ],
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_file_contents",
                    "description": "Get file contents by path to review existing code structure",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "file_path": {
                          "type": "string",
                          "description": "Path to the file to read. Examples: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java', 'src/main/java/com/java_template/controller/Controller.java', 'src/main/java/com/java_template/entity/EntityName.java', 'src/main/java/com/java_template/application/processor/ProcessorName.java', 'src/main/java/com/java_template/application/criteria/CriteriaName.java'"
                        }
                      },
                      "required": [
                        "file_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "list_directory_files",
                    "description": "List all files in a directory to see what processors, criteria, workflows, or entities were created",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "directory_path": {
                          "type": "string",
                          "description": "Path to the directory to list. Examples: 'src/main/java/com/java_template/application/processor', 'src/main/java/com/java_template/application/criteria', 'src/main/java/com/java_template/entity', 'src/main/java/com/java_template/application/workflow'"
                        }
                      },
                      "required": [
                        "directory_path"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "add_application_resource",
                    "description": "Add or rewrite a processor, criteria, or controller implementation file. Use this to create missing components or rewrite existing ones when validation shows they need to be fixed.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "resource_path": {
                          "type": "string",
                          "description": "Path where to save the file. Use EXACT patterns: For processors: 'src/main/java/com/java_template/application/processor/{ProcessorName}.java' where {ProcessorName} is the EXACT name from workflow config. For criteria: 'src/main/java/com/java_template/application/criteria/{CriteriaName}.java' where {CriteriaName} is the EXACT name from workflow config. For controller: 'src/main/java/com/java_template/controller/Controller.java'."
                        },
                        "file_contents": {
                          "type": "string",
                          "description": "Complete Java code content for the processor, criteria, or controller class"
                        }
                      },
                      "required": [
                        "resource_path",
                        "file_contents"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You need to validate that entity processing logic has been successfully transferred from the prototype controller to processors and criteria, ensuring no logic duplication and that workflows make sense.",
                    "",
                    "CONTEXT: During previous steps, we:",
                    "1. Analyzed EntityControllerPrototype code and identified business logic",
                    "2. Extracted entity processing logic and moved it to workflow processors and criteria",
                    "3. Created separate POJO entities based on the prototype",
                    "4. Generated workflows with processors for business operations",
                    "5. Created a Controller class that should only handle API routing and entity persistence",
                    "",
                    "THIS IS A VALIDATION AND REFACTORING TASK: take action to correct things if necessary",
                    "Your job is to validate if the refactoring was successful and fix any issues found.",
                    "",
                    "YOUR VALIDATION TASKS:",
                    "1. Read the prototype controller using get_file_contents: 'src/main/java/com/java_template/prototype/EntityControllerPrototype.java'",
                    "2. Read the current controller using get_file_contents: 'src/main/java/com/java_template/controller/Controller.java'",
                    "Notice that process code has been removed from the controller.",
                    "3. Use list_directory_files to examine what workflows, processors, and criteria were created:",
                    "   - 'src/main/java/com/java_template/application/workflow'",
                    "   - 'src/main/java/com/java_template/application/processor'",
                    "   - 'src/main/java/com/java_template/application/criteria'",
                    "5. Read each workflow, processor, and criteria files to understand what business logic was moved",
                    "",
                    "VALIDATION CHECKS:",
                    "A. **Entity Processing Logic Migration Validation:**",
                    "   - Compare prototype controller business logic with processor implementations",
                    "   - Ensure complex entity processing operations were moved to processors. Not just left as placeholders or todos in processors.",
                    "   - Verify that processEntityName methods from prototype are properly implemented in processors",
                    "   - Check that processors follow the correct interface and naming conventions",
                    "   - Validate that entity transformation and business rules are in processors, not controller",
                    "",
                    "B. **Controller Logic Duplication Check:**",
                    "   - Verify controller only contains API routing and entity persistence (entityService.addItem calls)",
                    "   - Ensure NO business logic remains in controller that should be in processors",
                    "   - Check that controller properly delegates to EntityService for persistence only",
                    "   - Validate that complex processing logic was completely removed from controller",
                    "",
                    "C. **Criteria Implementation Validation:**",
                    "   - Verify criteria properly implement validation logic from prototype",
                    "   - Check that criteria follow the correct interface and naming conventions",
                    "   - Ensure criteria contain meaningful validation rules, not just placeholder code",
                    "",
                    "D. **Workflow Logic Validation:**",
                    "   - Verify workflows make logical sense and follow proper state transitions",
                    "   - Check that workflow processors and criteria names match implemented classes",
                    "   - Ensure workflow states represent meaningful business processes",
                    "   - Validate that workflows properly orchestrate entity processing flow",
                    "",
                    "CORRECTIVE ACTIONS (if validation fails):",
                    "Use add_application_resource to rewrite files that don't meet validation criteria:",
                    "- **Processors**: Rewrite if they don't properly implement entity processing logic from prototype",
                    "- **Criteria**: Rewrite if they don't properly implement validation logic from prototype",
                    "- **Controller**: Rewrite if it still contains business logic that should be in processors",
                    "- **Workflows**: Create missing processors or criteria identified by validate_workflow_implementation",
                    "",
                    "VALIDATION SUCCESS CRITERIA:",
                    "- Entity processing logic is properly separated: complex business logic in processors, simple persistence in controller",
                    "- No logic duplication between controller and processors",
                    "- Workflows represent meaningful business processes and make logical sense",
                    "- All processors and criteria are properly implemented and follow naming conventions",
                    "- Controller is thin and only handles API routing + EntityService persistence calls",
                    "",
                    "OUTPUT: Provide a detailed validation report. If issues are found, fix them using add_application_resource. If everything is correct, confirm that the entity processing logic migration was successful and workflows make sense."
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 15,
              "approve": true
            }
          }
        }
      }
    },

    "validated_app_quality": {
      "transitions": {
        "save_env_file": {
          "next": "saved_env_file",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "save_env_file",
                "description": "save_env_file",
                "parameters": {
                  "filename": ".env.template"
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "saved_env_file": {
      "transitions": {
        "delete_files": {
          "next": "deleted_files",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "delete_files",
                "description": "delete_files",
                "parameters": {
                  "files": [
                    "src/main/java/com/java_template/prototype/CyodaEntityControllerPrototype.java"
                  ]
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "deleted_files": {
      "transitions": {
        "question_to_proceed_with_generated_app_editing": {
          "next": "questioned_to_proceed_with_generated_app_editing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "✅ Your application is ready in the {git_branch} branch!\n\n [Cyoda GitHub](https://github.com/Cyoda-platform/java-client-template/tree/{git_branch}) \uD83D\uDC40 \n\nLet’s bring it to life — together. Please make sure you've logged in to proceed.  A new account will be created automatically if you don't have one yet.\n\n ",
              "publish": true
            }
          }
        }
      }
    },
    "questioned_to_proceed_with_generated_app_editing": {
      "transitions": {
        "launch_setup_assistant": {
          "next": "launched_setup_assistant",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_setup_workflow",
                "description": "init_setup_workflow",
                "parameters": {
                  "user_request": "Hello! Please help me start my new application.",
                  "programming_language": "JAVA"
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "launched_setup_assistant": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}