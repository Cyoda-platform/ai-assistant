{
  "initial_state": "none",
  "workflow_name": "build_general_application_java",
  "states": {
    "none": {
      "transitions": {
        "initialize": {
          "next": "initialized"
        }
      }
    },
    "initialized": {
      "transitions": {
        "build_new_app": {
          "next": "building_new_app",
          "condition": {
            "name": "build_new_app_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "build_new_app",
                "type": "simple"
              }
            ]
          }
        },
        "discuss_functional_requirements": {
          "next": "chats_initialized",
          "condition": {
            "name": "discuss_functional_requirements_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "discuss_functional_requirements",
                "type": "simple"
              }
            ]
          }
        },
        "edit_functional_requirements": {
          "next": "functional_requirements_specified",
          "condition": {
            "name": "edit_functional_requirements_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "edit_functional_requirements",
                "type": "simple"
              }
            ]
          }
        },
        "prototype_discussion_requested": {
          "next": "prototype_discussion_requested_submitted_answer",
          "condition": {
            "name": "prototype_discussion_requested_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "prototype_discussion_requested",
                "type": "simple"
              }
            ]
          }
        },
        "resume_migration": {
          "next": "migration_confirmation_completed",
          "condition": {
            "name": "resume_migration_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_migration",
                "type": "simple"
              }
            ]
          }
        },
        "resume_prototype_cyoda_workflow": {
          "next": "generated_initial_cyoda_prototype",
          "condition": {
            "name": "resume_prototype_cyoda_workflow_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_prototype_cyoda_workflow",
                "type": "simple"
              }
            ]
          }
        },
        "resume_gen_prototype_cyoda_workflow_json": {
          "next": "finished_prototype_cyoda_workflow",
          "condition": {
            "name": "resume_gen_prototype_cyoda_workflow_json_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_gen_prototype_cyoda_workflow_json",
                "type": "simple"
              }
            ]
          }
        },
        "resume_gen_entities": {
          "next": "finished_prototype_cyoda_workflow_json",
          "condition": {
            "name": "v_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_gen_entities",
                "type": "simple"
              }
            ]
          }
        },
        "resume_post_app_build_steps": {
          "next": "finished_app_generation_flow",
          "condition": {
            "name": "resume_post_app_build_steps_criteria",
            "type": "group",
            "operator": "AND",
            "parameters": [
              {
                "jsonPath": "resume_transition",
                "operatorType": "IEQUALS",
                "value": "resume_post_app_build_steps",
                "type": "simple"
              }
            ]
          }
        }
      }
    },
    "building_new_app": {
      "transitions": {
        "welcome_user": {
          "next": "greeting_sent",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "👋 Welcome to Cyoda Application Builder!\nWe’re excited to work with you on building your app.\n\n🔧 Here's how the process works:\n\n**Define & confirm functional requirements**\nWe'll discuss what your app needs to do and confirm the necessary API endpoints.\n\n**Prototype phase**\nWe’ll create a controller-based sketch prototype focused on core logic only.\n\n**Backend migration**\nOnce you're happy with the prototype, we'll migrate it to the Cyoda backend, introducing our event-driven architecture and non-functional requirements.\n👉 Learn more: https://cyoda.com\n\n🚀 After that, you’ll get guidance on launching your app—and we can continue editing it as needed.\n\n🌱 We're in alpha!\nIf something goes wrong or you have questions, reach out on [Discord](https://discord.gg/95rdAyBZr2) or click Restart workflows in the entities progress window.\n\nLet’s build something great together!\n\n```mermaid\ngraph TD\n    A([Define & Confirm Functional Requirements]):::bar e1@== build_general_application.functional_requirements_specified\n    ==> B([Build Sketch Prototype]):::bar\n    B e2@== functional_requirements_generated ==> C([Validate Functionality & API Endpoints]):::bar\n    C e3@== prototype_discussion_requested ==> D{Are You Happy With the Prototype?}:::bar\n    D e4@== migration_confirmation_requested ==> E([Migrate to Cyoda Backend]):::bar\n    E e5@== finished_app_generation_flow ==> F([Event-Driven Architecture + Non-Functional Requirements]):::bar\n    F e6@== init_setup_workflow ==> G([Launch Your App]):::bar\n    G e7@== edit_existing_workflow ==> H([Iterate & Edit as Needed]):::bar\n\n    D e1@== No ==> B\n\n    H e8@== locked_chat ==> I([Need Help? Click Retry or Ask on Discord]):::bar\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    e7@{ animate: true }\n    e8@{ animate: true }\n    classDef bar stroke:#0f0\n```",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "greeting_sent": {
      "transitions": {
        "clone_repo": {
          "next": "repository_cloned",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "clone_repo",
                "description": "Clones template repository"
              },
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "repository_cloned": {
      "transitions": {
        "init_chats": {
          "next": "chats_initialized",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_chats",
                "description": "Initialises ai service"
              },
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "chats_initialized": {
      "transitions": {
        "process_initial_question": {
          "next": "app_requirements_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a Java Spring Boot developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks, databases or technologies, the final application will be in Java Spring Boot on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. Format it with markdown.",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested": {
      "transitions": {
        "submit_answer": {
          "next": "app_requirements_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "app_requirements_finalized",
          "manual": true
        }
      }
    },
    "app_requirements_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "app_requirements_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if you have enough information or the user asks to proceed to the next question. Summarise the requirement in a couple of sentences and set to true if the user chooses your example answers or after 6 attempts! Do not hold the user too long.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "process_application_requirement"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! You are a Java Spring Boot developer.",
                    " You're building a backend application.",
                    " Currently you are focusing on functional requirements, and will cover any non-functional requirement later.",
                    " Let's analyse this request for application building, and clarify any important functional requirements that necessary.",
                    " Max 3 questions and suggestions at a time - ask only if absolutely necessary. Keep it short so that the user is kept engaged. It is better to say something like - Would you like to A or B, Do i understand correct and you'd prefer A to B - etc",
                    " Ask questions if something is not clear enough and make suggestions that will help us formulate formal specification in the next iterations.",
                    " Make sure your answers are friendly but up-to-the point and do not start with any exclamations, but rather answer the question. Max tokens = 300.",
                    " If there are any links or action requests in my requirement, please first follow these links or do any requested action in order to get the full understanding, and only then proceed to answering the question.",
                    " Do not ask about any specific frameworks, databases or technologies, the final application will be inJava Spring Boot on Cyoda platform - no other choices.",
                    " At the end of the message provide an example human-readable response that the user can just copy paste if they don't have any specific in mind. format it with markdown ",
                    " Do not clarify any non-functional details, including health checks, deployment details, recovery from failure, logs (just use logger)",
                    " Call finish_discussion immediately after 6 attempts. Do not hold the user too long they will bored.",
                    " Be polite, please ",
                    " Here is my requirement: "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "app_requirements_requested_processing": {
      "transitions": {
        "process_application_requirement_processing": {
          "next": "app_requirements_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "description": "not_stage_completed",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        },
        "process_application_requirement_success": {
          "next": "app_requirements_finalized",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "description": "Clones template repository",
                "parameters": {
                  "transition": "process_application_requirement"
                }
              }
            }
          }
        }
      }
    },
    "app_requirements_finalized": {
      "transitions": {
        "ask_about_api": {
          "next": "proceeded_to_functional_requirements",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "Next up: functional requirements.\nStay tuned — thoughtful thinking in progress. \uD83E\uDDE0✨",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "proceeded_to_functional_requirements": {
      "transitions": {
        "define_functional_requirements": {
          "next": "functional_requirements_specified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Please, help me define the functional requirements for my project.",
                    "Outline the necessary API endpoints (adhering to Restful rules, any business logic that invokes external data source, retrieves data or does any calculations needs to be done in POST endpoint, GET is used only for my application results retrieval (external data retrieval should be implemented in POST endpoint)),",
                    "including details on request/response formats. Additionally, provide a visual representation of the user-app interaction using Mermaid diagrams (e.g. journey/sequence).",
                    "Ensure that **each Mermaid diagram is enclosed in a complete and valid Markdown code block**, starting with ```mermaid and ending with ``` (on a separate line).",
                    "Please return markdown document without any additional information and without wrapping it in triple backticks.",
                    "Make sure there are no unclosed Mermaid blocks — every diagram must end with a closing triple backtick on a separate line."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "functional_requirements_specified": {
      "transitions": {
        "ask_about_api": {
          "next": "api_inquired",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "Would you like to improve or make adjustments to the functional requirements and the API?\nOpen to feedback if you’ve got any ideas — I’m all ears\uD83D\uDC42\uD83D\uDC42, well... sort of\uD83D\uDE0F.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "api_inquired": {
      "transitions": {
        "submit_answer": {
          "next": "api_inquired_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "api_discussion_completed",
          "manual": true
        }
      }
    },
    "api_inquired_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "api_inquired_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Use if the user asks to proceed or if the user is satisfied with the current result (e.g. says it is correct, valid, works for them). If set to false notify the user you're going to proceed with prototype generation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_api"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Please, adjust the the functional requirements and the API according to the user request. ",
                    " Once the user is happy with the result or has no more questions, please call finish_discussion. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "api_inquired_processing": {
      "transitions": {
        "process_api_inquiry_processing": {
          "next": "api_inquired",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        },
        "process_api_inquiry_success": {
          "next": "api_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_api"
                }
              }
            }
          }
        }
      }
    },
    "api_discussion_completed": {
      "transitions": {
        "notify_prototype_generation": {
          "next": "prototype_generation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🌟 Let’s get started on the first prototype! 🛠️\n\nJust give me a moment to think everything through... 🤔💭\n\nI'll finalize the functional requirements first, then dive into prototype generation. 🧠✨\n\n🚧 Initial prototype is now in progress... 🚀💡\n\nWant to learn more about entity databases and event-driven architectures?\nCheck these out:\n- [What’s an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_generation_notified": {
      "transitions": {
        "generate_functional_requirements": {
          "next": "functional_requirements_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "allow_anonymous_users": true,
              "model": {},
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return well-formatted final version of the functional requirements which was confirmed by the user."
                  ]
                }
              ],
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/functional_requirement.md"
                ]
              }
            }
          }
        }
      }
    },
    "functional_requirements_generated": {
      "transitions": {
        "generate_prototype_sketch": {
          "next": "prototype_sketch_generated",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "allow_anonymous_users": true,
              "model": {},
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Now that we’ve finalized the API design, please provide the code for the EntityControllerPrototype.java file for a Spring Boot application.",
                    "The implementation should be a working prototype rather than a production-ready solution.",
                    "Incorporate any details I’ve already specified—such as entity model classes, external APIs, or specific logic—and use mocks or placeholders only where requirements are unclear or incomplete.",
                    "Please use real API endpoints where possible. If you introduce mocks or placeholders, clearly mark them with a TODO comment indicating what should be replaced.",
                    "The goal is to validate the UX and the overall structure of the API before proceeding with a full implementation.",
                    "Use Spring Web RestController (`@RestController`, `@RequestMapping`, etc.) and annotate endpoints clearly with HTTP verbs like `@GetMapping`, `@PostMapping`, etc. import org.springframework.web.bind.annotation.*;",
                    "Add prefix 'prototype' to the base path in @RequestMapping (e.g. @RequestMapping(path = \"/prototype/)",
                    "Do not include persistence or service layer implementations unless required for clarity—mock them with `Map` or `ConcurrentHashMap`.",
                    "Include proper logging using SLF4J (e.g., `Logger logger = LoggerFactory.getLogger(EntityControllerPrototype.class);`) and use `logger.info(...)` or `logger.error(...)` appropriately.",
                    "Use Lombok annotations like @Data, @Getter, etc. import lombok.Data etc.",
                    "Use jakarta validations if necessary. import jakarta.validation.constraints.NotBlank for example",
                    "For asynchronous or background tasks, you may use `@Async` methods or `java.util.concurrent.CompletableFuture.runAsync(...)`, and add TODO comments where fire-and-forget logic is used.",
                    "Add basic error handling using `@ExceptionHandler` where relevant, but keep it minimal.",
                    "When handling org.springframework.web.server.ResponseStatusException, always use getStatusCode() instead of getStatus(). Do not use getReasonPhrase(); use getStatusCode().toString() instead for error field.",
                    "You are welcome to use patterns like `entityJobs.put(jobId, new JobStatus(\"processing\", requestedAt)); // fire-and-forget the processing` if relevant.",
                    "Avoid configuration files, focus only on controller logic in a single file.",
                    "When fetching and parsing JSON responses from external APIs, use com.fasterxml.jackson.databind.ObjectMapper.readTree(...) to convert the raw response into a JsonNode, instead of deserializing directly into a Map or a List. This ensures compatibility with both JSON objects and arrays.",
                    "Use `package com.java_template.entity.prototype;` as the package declaration for this file",
                    "Please double-check that you are using all the information provided earlier."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_sketch_generated": {
      "transitions": {
        "generate_prototype": {
          "next": "prototype_completed",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {
                "model_name": "o4-mini"
              },
              "input": {},
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                ]
              },
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Use `package com.java_template.entity.prototype;` as the package declaration for this file",
                    "Please, add validation annotations for request bodies and query parameters using javax/jakarta validation annotations:",
                    "import jakarta.validation.constraints.*;",
                    "Use @Validated on the controller class if needed to enable validation.",
                    "Use @Valid on method parameters that are request bodies.",
                    "Use @NotNull, @Size, @Pattern, etc. inside DTO classes for validation. Please use only primitives or String, no nested objects.",
                    "",
                    "For POST and PUT requests:",
                    "Use @PostMapping(\"/test\") or @PutMapping(\"/test\") at the top of the method.",
                    "Use @RequestBody @Valid for input DTOs.",
                    "Example:",
                    "@PostMapping(\"/test\") // must be first",
                    "public ResponseEntity<String> createTodo(@RequestBody @Valid Todo todo) { ... }",
                    "",
                    "For GET requests with query parameters:",
                    "Use @GetMapping(\"/test\") at the top of the method.",
                    "Use @RequestParam with constraint annotations directly on method parameters, or bind a DTO using @ModelAttribute + @Valid.",
                    "DO NOT use @RequestBody in GET methods – it will throw an error.",
                    "Correct example:",
                    "@GetMapping(\"/test\") // must be first",
                    "public ResponseEntity<String> getTodo(@RequestParam @NotBlank String task) { ... }",
                    "",
                    "Alternative correct example with DTO:",
                    "@Data",
                    "public static class Example {",
                    "    @NotBlank //optional",
                    "    private String example;",
                    "}",
                    "",
                    "@GetMapping(\"/test\") // must be first",
                    "public ResponseEntity<String> getTodo(@Valid @ModelAttribute TodoQuery query) { ... }",
                    "",
                    "Wrong example:",
                    "public ResponseEntity<String> getTodo(@RequestBody Todo todo) // this will not work for GET requests",
                    "",
                    "Please follow the rule:",
                    "Always place @PostMapping/@GetMapping as the first annotation.",
                    "Use @Valid with @RequestBody for POST/PUT, and with @ModelAttribute for GET.",
                    "Add a comment explaining the workaround where needed, especially if using @ModelAttribute in GET.",
                    "Include proper logging using SLF4J (e.g., `Logger logger = LoggerFactory.getLogger(EntityControllerPrototype.class);`) and use `logger.info(...)` or `logger.error(...)` appropriately.",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Java comments are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "prototype_completed": {
      "transitions": {
        "ask_to_discuss_prototype": {
          "next": "prototype_discussion_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "✅ First Prototype Ready!\n\nThe initial prototype based on your functional requirements is now ready! You can run and test it locally or directly in **GitHub Codespaces**.\n\n---\n\n### ▶️ How to Run the Prototype\n\n#### **Option 1: GitHub Codespaces **\nYou can open the repo in GitHub Codespaces and launch the prototype there:\n\n1. Open the repository in [GitHub Codespaces](https://github.com/Cyoda-platform/java-client-template/tree/{git_branch}).\n2. In the Codespace terminal, run:\n\n```bash\n# Update package list\nsudo apt update\n# Install Java 21 (headless — no GUI tools)\nsudo apt install -y openjdk-21-jdk-headless\n# Set Java 21 as active version\nexport JAVA_HOME=/usr/lib/jvm/java-21-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n# Run the prototype app\n./gradlew runApp -PmainClass=com.java_template.Prototype\n```\n\n3. Make the app accessible from the browser:\n - In the **Ports** panel (bottom of the IDE), right-click on port `8080` and select **\"Change Port Visibility\" → \"Public\"**\n - Alternatively, after starting the app, click **\"Make Public\"** in the popup.\n\n4. Preview the app in the browser:\n `/swagger-ui/index.html` - Swagger UI: `https://<your-codespace-url>/swagger-ui/index.html`\n - OpenAPI specification: `https://<your-codespace-url>/v3/api-docs`\n\n> *Codespaces will provide a forwarded port URL — just append `/swagger-ui/index.html` or `/v3/api-docs` to it.*\n\n---\n\n#### **Option 2: Local Environment**\n\n1. Make sure you're on the correct branch and up to date:\n\n```bash\ngit checkout {git_branch}\ngit pull\n```\n\n2. Run the app:\n\n```bash\n./gradlew runApp -PmainClass=com.java_template.Prototype\n```\n\n3. Open your browser and go to:\n- [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)\n- or [http://localhost:8080/v3/api-docs](http://localhost:8080/v3/api-docs)\n\n---\n\n### 🧪 Testing\n\nYou’ll find example requests and responses in:\n📄 `entity/functional_requirement.md`\n\nUse these to test the API via the Swagger UI.\n\n---\n\n### ✅ Approval or Feedback\n\nIf everything looks good, feel free to approve it.\nIf anything’s off or you’d like changes, just ping me here. 🙌\n\n> ⚠️ **Note:**: This code is part of an early alpha version of the system. Some parts may not compile or behave as expected.",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested": {
      "transitions": {
        "submit_answer": {
          "next": "prototype_discussion_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "prototype_discussion_completed",
          "manual": true
        }
      }
    },
    "prototype_discussion_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "prototype_discussion_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                          ]
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "save_file",
                    "description": "Save changes to src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java to the repository so that the user can view the changes. Apply this if you make changes; omit if just answering a general question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "new_content": {
                          "type": "string"
                        },
                        "filename": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                          ]
                        }
                      },
                      "required": [
                        "new_content",
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "discuss_prototype"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated EntityControllerPrototype.java code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user. Do not simply reuse the file content you read; always generate a new, modified version of the code that reflects the user's latest requests.",
                    " Finally, make sure to save the file only after you have applied the required changes. Carefully verify that the updated content reflects your modifications, and do not proceed with saving unless actual updates have been made. Finally apply the necessary changes to the src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the EntityControllerPrototype.java file if necessary, answer the question, no save needed in this case.",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "prototype_discussion_requested_processing": {
      "transitions": {
        "process_prototype_discussion_processing": {
          "next": "prototype_discussion_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        },
        "process_prototype_discussion_success": {
          "next": "prototype_discussion_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "discuss_prototype"
                }
              }
            }
          }
        }
      }
    },
    "prototype_discussion_completed": {
      "transitions": {
        "ask_to_confirm_migration": {
          "next": "migration_confirmation_requested",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "\"\uD83C\uDF89 **Congratulations on completing your application prototype!**\n\nYou've done an incredible job bringing your idea to life — it's exciting to see it in action. \uD83E\uDD73\n\n**\uD83E\uDDD0 This is a major milestone — well done!**\nThat said, while your prototype is impressive, it's not quite production-ready yet. A few key areas still need attention:\n\n- **Scalability & High Availability**\n- **Data Persistence & Integrity**\n- **Production-Ready Features**\n\nTo bridge these gaps, we recommend refactoring your solution using the **Cyoda Framework** and deploying to a **High Availability (HA)** cluster on **Cyoda Cloud**. This will give you:\n\n✅ Enterprise-grade reliability & failover  \n✅ Seamless data persistence  \n✅ Effortless deployment & scaling  \n✅ A full suite of production-ready tools  \n\n**Ready to take it to the next level?**  \nGive me a \uD83D\uDC4D and we’ll start refactoring to make your app robust, scalable, and fully deployable on Cyoda Cloud.\n\nIf you’d like to learn more about Cyoda, just ask!\"\n",
              "publish": true,
              "approve": true,
              "allow_anonymous_users": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested": {
      "transitions": {
        "submit_answer": {
          "next": "migration_confirmation_requested_submitted_answer",
          "manual": true
        },
        "manual_approve": {
          "next": "migration_confirmation_completed",
          "manual": true
        }
      }
    },
    "migration_confirmation_requested_submitted_answer": {
      "transitions": {
        "process_user_input": {
          "next": "migration_confirmation_requested_processing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "agent",
              "publish": true,
              "allow_anonymous_users": true,
              "model": {},
              "tools": [
                {
                  "type": "function",
                  "function": {
                    "name": "get_cyoda_guidelines",
                    "description": "Use this tool to generate configurations (workflows, entities, Cyoda settings) for informational purposes only, without modifying the application or saving data. If your goal is to change the application, this tool is not suitable. If it's unclear whether you need to modify the application or just need information, please clarify. The retrieved information can then be used to generate the required data without altering the application.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "workflow_name": {
                          "type": "string",
                          "enum": [
                            "generate_workflow",
                            "generate_processors",
                            "configure_trino",
                            "generate_entity",
                            "start_app",
                            "cyoda_best_practice"
                          ]
                        }
                      },
                      "required": [
                        "workflow_name"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_search",
                    "description": "Search the web using Google Custom Search API. Use this function when you need to formulate questions or requirements for information to be searched online. For example, if the user wants to add data sources for an API but does not provide an exact link or documentation.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "query"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_link",
                    "description": "Read content from a URL. Use this function when you need to fetch content from a web resource. For example, if the user wants to add data sources for an API and provides an exact link, you should first read the link contents before proceeding with analysis.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "web_scrape",
                    "description": "Scrape content from a webpage using a CSS selector. Use this function when you need to scrape online content. For example, if the user wants to add data sources for an API and provides an exact link for web scraping, you should scrape the resource before analyzing the question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "selector": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "url",
                        "selector"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "read_file",
                    "description": "Read the contents of src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java file.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "filename": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                          ]
                        }
                      },
                      "required": [
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "save_file",
                    "description": "Save changes to src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java to the repository so that the user can view the changes to the entity/EntityControllerPrototype.java. Apply this function if you make changes to entity/EntityControllerPrototype.java (fix issues, make improvements, adjustments according to the user request). No need to apply this function if the code does not require changes and you're answering a general question.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "new_content": {
                          "type": "string"
                        },
                        "filename": {
                          "type": "string",
                          "enum": [
                            "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                          ]
                        }
                      },
                      "required": [
                        "new_content",
                        "filename"
                      ],
                      "additionalProperties": false
                    }
                  }
                },
                {
                  "type": "function",
                  "function": {
                    "name": "finish_discussion",
                    "description": "Finish the iteration if the user is happy with the result and has no more questions.",
                    "strict": true,
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "transition": {
                          "type": "string",
                          "enum": [
                            "migration_confirmation"
                          ]
                        }
                      },
                      "required": [
                        "transition"
                      ],
                      "additionalProperties": false
                    }
                  }
                }
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    " Hello! Please do your best to help the user with just generated src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java code.",
                    " If the user asks you to make any improvements or fix any issues please first read the file src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java to get the latest version.",
                    " Then use your own judgement to introduce changes necessary for the user. Do not simply reuse the file content you read; always generate a new, modified version of the code that reflects the user's latest requests.",
                    " Finally, make sure to save the file only after you have applied the required changes. Carefully verify that the updated content reflects your modifications, and do not proceed with saving unless actual updates have been made. Finally apply the necessary changes to the src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java file. And let the user know what changes you introduced and why.",
                    " If the user just asks any general question or a question about the code, read the prototype file if necessary, answer the question, no save needed in this case.",
                    " Call finish_discussion only once the user is happy with the result or asks to proceed. "
                  ]
                }
              ],
              "tool_choice": "auto",
              "max_iteration": 30,
              "approve": true
            }
          }
        }
      }
    },
    "migration_confirmation_requested_processing": {
      "transitions": {
        "process_migration_confirmation_processing": {
          "next": "migration_confirmation_requested",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "not_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        },
        "process_migration_confirmation_success": {
          "next": "migration_confirmation_completed",
          "condition": {
            "config": {
              "type": "function",
              "function": {
                "name": "is_stage_completed",
                "parameters": {
                  "transition": "migration_confirmation"
                }
              }
            }
          }
        }
      }
    },
    "migration_confirmation_completed": {
      "transitions": {
        "migration_confirmation_notify": {
          "next": "migration_confirmation_notified",
          "action": {
            "name": "process_event",
            "config": {
              "type": "notification",
              "notification": "🚀 **Let’s generate your application code!**\n\nI’ll take care of everything — no need to lift a finger.\n\n⏳ While the code is being generated (~10 min), feel free to grab a coffee ☕ and relax.\n\n**Here’s what’s happening behind the scenes:**\n- **Entity Design:** Defining JSON structures for your entities (`entity/*`)\n- **Workflow Design:** Mapping transitions (`entity/*/workflow.json`)\n- **Workflow Processor:** Java logic that powers it all (`entity/*/*Workflow.java`)\n\n🛠️ This step brings your app to life — from requirements to real, running code.\n\n✅ I’ll notify you as soon as everything’s ready to review.\n\nWant to dive deeper into the concepts?\nCheck these out:\n- [What’s an Entity Database?](https://medium.com/@paul_42036/whats-an-entity-database-11f8538b631a)\n- [Entity Workflows for Event-Driven Architectures](https://medium.com/@paul_42036/entity-workflows-for-event-driven-architectures-4d491cf898a5)",
              "publish": true
            }
          }
        }
      }
    },
    "migration_confirmation_notified": {
      "transitions": {
        "generate_initial_cyoda_prototype": {
          "next": "generated_initial_cyoda_prototype",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_initial_cyoda_prototype"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are provided with a Java codebase that implements a REST API (using Spring Boot framework).",
                    "Currently, the code uses local in‑memory dictionaries (and counters) to store and manage data for one or more entity types.",
                    "Your task is to refactor the code so that all interactions with the local cache are replaced by calls to an external service called com.java_template.common.service.EntityService. Note, that EntityService is a bean, so inject it with CyodaEntityControllerPrototype constructor.",
                    "You can use only these functions for replacement - if this is not enough just skip and leave as is",
                    "1. CompletableFuture<UUID> idFuture = entityService.addItem(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    entity=data  # the validated data object",
                    ")",
                    "Note: entityService.addItem returns technicalId of the created entity.",
                    "CompletableFuture<List<UUID>> addItems idsFuture = entityService.addItems(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    entities=data",
                    ")",
                    "Note: entityService.addItems returns a list of technicalIds of the created entities.",
                    "2. Data retrieval:",
                    "CompletableFuture<ObjectNode> itemFuture = entityService.getItem(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,",
                    "    technicalId=<id>",
                    ")",
                    "CompletableFuture<ArrayNode> itemsFuture = entityService.getItems(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,",
                    ")",
                    "CompletableFuture<ArrayNode> filteredItemsFuture = entityService.getItemsByCondition(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,",
                    "    condition=condition",
                    ")",
                    "Note: when retrieving or returning entities via entityService.getItem / getItems / getItemsByCondition, the unique identifier is stored in the field \"technicalId\" (not \"id\"). Use \"technicalId\" to extract or compare entity IDs.\n",
                    "Please use the following classes to construct search conditions for entity queries:",
                    "Condition (com.java_template.common.util.Condition) and SearchConditionRequest (com.java_template.common.util.SearchConditionRequest)",
                    "",
                    "To create a single condition, wrap it into a SearchConditionRequest with one element in the list:",
                    "com.java_template.common.util.SearchConditionRequest.group(\"AND\",",
                    "    com.java_template.common.util.Condition.of(\"$.field\", \"EQUALS\", \"value\")",
                    ")",
                    "",
                    "To create a group of multiple conditions with logical operator AND or OR, use:",
                    "com.java_template.common.util.SearchConditionRequest.group(\"OR\",",
                    "    com.java_template.common.util.Condition.of(\"$.field1\", \"EQUALS\", \"value1\"),",
                    "    com.java_template.common.util.Condition.of(\"$.field2\", \"GREATER_THAN\", 10)",
                    ")",
                    "",
                    "Supported operatorType values (for Condition):",
                    "\"EQUALS\", \"NOT_EQUAL\", \"IEQUALS\", \"INOT_EQUAL\", \"IS_NULL\", \"NOT_NULL\",",
                    "\"GREATER_THAN\", \"GREATER_OR_EQUAL\", \"LESS_THAN\", \"LESS_OR_EQUAL\",",
                    "\"ICONTAINS\", \"ISTARTS_WITH\", \"IENDS_WITH\", \"INOT_CONTAINS\",",
                    "\"INOT_STARTS_WITH\", \"INOT_ENDS_WITH\", \"MATCHES_PATTERN\",",
                    "\"BETWEEN\", \"BETWEEN_INCLUSIVE\"",
                    "",
                    "Note: If the operatorType starts with the letter 'I', it means the comparison should ignore case (e.g., \"IEQUALS\" = equals ignoring case).",
                    "",
                    "Supported operator values (for SearchConditionRequest): \"AND\", \"OR\"",
                    "",
                    "Pass the resulting SearchConditionRequest as the third argument (condition) to:",
                    "entityService.getItemsByCondition(entityModel, entityVersion, condition)",
                    "3. CompletableFuture<UUID> updatedItemId = entityService.updateItem(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    technicalId=id, #technicalId is required",
                    "    entity=data,",
                    ")",
                    "Note: entityService.updateItem returns technicalId of the updated entity.",
                    "Use @JsonIgnore on fields like 'technicalId' and pass the original Java object directly to addItem or updateItem without converting to ObjectNode.",
                    "4. CompletableFuture<UUID> deletedItemId = entityService.deleteItem(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    "    technicalId=id,",
                    ")",
                    "Note: entityService.deleteItem returns technicalId of the deleted entity.",
                    "5. CompletableFuture<ArrayNode> deletedItemsInfo = entityService.deleteItems(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,  # always use this constant",
                    ")",
                    "Note: entityService.deleteItems returns an array containing result information, for example: '[{\"entityModelClassId\": \"d16a966a-37e4-11f0-8bfa-00000ae966a9\",\"deleteResult\": {\"numberOfEntitites\": 18,\"numberOfEntititesRemoved\": 18,\"idToError\": {}}}]'",
                    "use 'import static com.java_template.common.config.Config.*;' to import ENTITY_VERSION",
                    "Add this code:",
                    "package com.java_template.entity;",
                    "use this class name 'CyodaEntityControllerPrototype'",
                    "Lombok is already configured in the project via io.freefair.lombok plugin. Please use Lombok annotations like @Data, @Getter, @Setter, @AllArgsConstructor, @NoArgsConstructor, etc., instead of manually writing getters, setters, and constructors, and make sure to include the necessary Lombok imports in the generated code.",
                    "Make sure to assign a unique @RequestMapping path to each controller to avoid conflicts. Do not reuse the same base path across multiple controllers.\n",
                    "Preserve the endpoint routes and any other essential business logic.",
                    "Generate a controller that calls service methods directly and lets exceptions propagate. Do not use try-catch. Let the service throw ResponseStatusException when needed. Avoid using getReasonPhrase(); use getStatusCode().toString() instead for error field.",
                    "Please make sure you keep all the necessary business logic, like data ingestion, calling any external apis, mocks, calculations etc.",
                    "Please take into account that entity ObjectNode has 'technicalId'",
                    "Please return only Java code without additional information. If you'd like to add any comments please use // comment",
                    "Please use correct logging, e.g.:",
                    "org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(CyodaEntityControllerPrototype.class);",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/prototype/EntityControllerPrototype.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/CyodaEntityControllerPrototype.java"
                ]
              }
            }
          }
        }
      }
    },
    "generated_initial_cyoda_prototype": {
      "transitions": {
        "generate_prototype_cyoda_workflow": {
          "next": "generated_prototype_cyoda_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Hello, entityService.addItem has changed, now it additionally expects entity workflow function as an argument. This function will be applied to the entity before it is persisted.",
                    "e.g.",
                    "CompletableFuture<UUID> idFuture = entityService.addItem(",
                    "    entityModel=\"{entity_name}\",",
                    "    entityVersion=ENTITY_VERSION,  // always use this constant",
                    "    entity=data,  // the validated data object",
                    "    workflow=process{entity_name} // Workflow function applied to the entity asynchronously before persistence. This function takes this entity data as the only argument and returns it back. You can change entity state inside this function, get and add entities with a different entityModel (but cannot add/update/delete entity of the same entityModel - it will cause infinite recursion)",
                    ")",
                    "workflow=process{entity_name}, this function should have a prefix 'process' which is followed by the entity name.",
                    "Could you please update this code: add workflow function as a parameter and implement it. Return complete Java code."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/CyodaEntityControllerPrototype.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.java"
                ]
              }
            }
          }
        }
      }
    },
    "generated_prototype_cyoda_workflow": {
      "transitions": {
        "generate_improved_prototype_cyoda_workflow": {
          "next": "generated_improved_prototype_cyoda_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "What do you think, can we move any logic from the endpoint inside newly added functions (workflow=process{entity_name}) that will be invoked right before persisting entity.",
                    "It will make our code more robust and will 'free' the controllers from excessive logic.",
                    "Any async task (including fire and forget functions) is definitely a candidate to be replaced with process{entity_name} function as workflow function supports asynchronous code and is a direct alternative for such tasks. It is the right approach - this is required.",
                    "Please do your best to move all the async functions to workflow=process{entity_name} functions.",
                    "Workflow function applied to the entity asynchronously before persistence. This function takes this entity data as the only argument. You can change entity state inside this function e.g. entity.put(...).",
                    "You can get and add secondary/supplementary/raw data entities of a different entityModel.",
                    "You cannot apply entityService.addItem/updateItem/deleteItem on the current entity! The entity is an ObjectNode. If you need to change this entity state - modify directly e.g. entity.put(...). The new state will be persisted."
                  ]
                }
              ],
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.java"
                ]
              }
            }
          }
        }
      }
    },
    "generated_improved_prototype_cyoda_workflow": {
      "transitions": {
        "finish_prototype_cyoda_workflow": {
          "next": "finished_prototype_cyoda_workflow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "Please return complete refactored application with all functions implemented.",
                    "No detail can be missed. Reason about potential issues and prevent them.",
                    "",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Regular Java comments (// like this) are allowed, but avoid extra narrative or markdown-style formatting."
                  ]
                }
              ],
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.java"
                ]
              }
            }
          }
        }
      }
    },
    "finished_prototype_cyoda_workflow": {
      "transitions": {
        "transform_prototype_cyoda_workflow": {
          "next": "finished_prototype_cyoda_workflow_json",
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "memory_tags": [
                "generate_prototype_cyoda_workflow"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "You are given a Java Spring Boot code that includes definitions and usage of an `entityService` bean.",
                    "This service `addItem` method accepts an `entityModel` argument and optionally a `workflow` function reference.",
                    "## 1. Entity Model Node:",
                    "Task: Extract all `entityModel` references passed to `entityService.addItem(...)`.",
                    "Example Java code:",
                    "```java",
                    "import java.util.UUID;",
                    "import com.java_template.common.service.EntityService",
                    "import java.util.concurrent.CompletableFuture;",
                    "",
                    "public class MyService {",
                    "    private final EntityService entityService;",
                    "",
                    "    public MyService(EntityService entityService) {",
                    "        this.entityService = entityService;",
                    "    }",
                    "",
                    "    public CompletableFuture<UUID> createEntity(Data data) {",
                    "        return entityService.addItem(",
                    "            entityModel = \"example\",",
                    "            entityVersion = ENTITY_VERSION,",
                    "            entity = data,",
                    "            workflow = this::processExample",
                    "        );",
                    "    }",
                    "",
                    "    private Data processExample(Data data) {",
                    "        // Sample processing",
                    "        data.setProcessed(true);",
                    "        return data;",
                    "    }",
                    "}",
                    "```",
                    "- Here, `entityModel` is `'example'`",
                    "- `workflow` is a reference to `processExample`, which must be fully extracted",
                    "You must extract:",
                    "- `entity_model_name`: e.g. `'example'`",
                    "- Workflow function details:",
                    "    - `name`: the method name, e.g. `processExample`",
                    "    - `content`: the full method block",
                    "    - `code_with_necessary_imports_and_constants`: include any top-level imports or constants used by the method, if applicable",
                    "JSON Output Example for `entity_models`:",
                    "```json",
                    "{",
                    "  \"entity_model_name\": \"example\",",
                    "  \"workflow_function\": {",
                    "    \"name\": \"processExample\",",
                    "    \"content\": \"private Data processExample(Data data) {\\n    data.setProcessed(true);\\n    return data;\\n}\",",
                    "    \"code_with_necessary_imports_and_constants\": \"import java.util.UUID;\\nimport java.util.concurrent.CompletableFuture;\"",
                    "  }",
                    "}",
                    "```",
                    "## 2. File Without Workflow Node:",
                    "Task: Return the full original Java code, but with all `workflow` arguments removed.",
                    "For the above code, this means:",
                    "- Original:",
                    "```java",
                    "return entityService.addItem(",
                    "    entityModel = \"example\",",
                    "    entityVersion = ENTITY_VERSION,",
                    "    entity = data,",
                    "    workflow = this::processExample",
                    ");",
                    "```",
                    "- Becomes:",
                    "```java",
                    "return entityService.addItem(",
                    "    entityModel = \"example\",",
                    "    entityVersion = ENTITY_VERSION,",
                    "    entity = data",
                    ");",
                    "```",
                    "You can remove unused code, but make sure the code that doesn't reference workflow functions stays intact.",
                    "JSON Output Example for `file_without_workflow`:",
                    "{",
                    "  \"code\": \"return entityService.addItem(\\n    entityModel = \\\"example\\\",\\n    entityVersion = ENTITY_VERSION,\\n    entity = data\\n);\"",
                    "}",
                    "```",
                    "## Combined JSON Structure Example (Final Output):",
                    "{",
                    "  \"entity_models\": [",
                    "    {",
                    "      \"entity_model_name\": \"example\", #always lowercase",
                    "      \"workflow_function\": {",
                    "        \"name\": \"processExample\",",
                    "        \"content\": \"private Data processExample(Data data):\\n    data.setProcessed(true);\\n    return data;\",",
                    "        \"code_with_necessary_imports_and_constants\": \"import java.util.UUID;\\nimport java.util.concurrent.CompletableFuture;\"",
                    "      }",
                    "    }",
                    "  ],",
                    "  \"file_without_workflow\": {",
                    "    \"code\": \"return entityService.addItem(\\n    entityModel = \\\"example\\\",\\n    entityVersion = ENTITY_VERSION,\\n    entity = data\\n);\"",
                    "  }"
                  ]
                }
              ],
              "response_format": {
                "name": "workflow_schema",
                "description": "Schema for entity models and workflow functions",
                "schema": {
                  "type": "object",
                  "properties": {
                    "entity_models": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entity_model_name": {
                            "type": "string"
                          },
                          "workflow_function": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "code_with_necessary_imports_and_constants": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "name",
                              "content"
                            ]
                          }
                        },
                        "required": [
                          "entity_model_name",
                          "workflow_function"
                        ]
                      }
                    },
                    "file_without_workflow": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "code"
                      ]
                    }
                  },
                  "required": [
                    "entity_models",
                    "file_without_workflow"
                  ]
                }
              },
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.json"
                ]
              }
            }
          }
        }
      }
    },
    "finished_prototype_cyoda_workflow_json": {
      "transitions": {
        "register_workflow_with_app": {
          "next": "finished_app_generation_flow",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "register_workflow_with_app",
                "description": "register_workflow_with_app",
                "parameters": {
                  "filename": "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.json",
                  "routes_file": "src/main/java/com/java_template/controller/Controller.java"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "finished_app_generation_flow": {
      "transitions": {
        "update_routes_file": {
          "next": "updated_routes_file",
          "manual": true,
          "action": {
            "name": "process_event",
            "config": {
              "type": "prompt",
              "publish": false,
              "model": {},
              "memory_tags": [
                "update_routes_file"
              ],
              "messages": [
                {
                  "role": "user",
                  "content": [
                    "hello, please update Controller.java file contents renaming its class to Controller and fixing imports. Remember you are Spring Boot developer.",
                    "inject com.fasterxml.jackson.databind.ObjectMapper via constructor instead of creating a new one.",
                    "Include proper logging using org.slf4j.Logger (e.g., `Logger logger = LoggerFactory.getLogger(EntityControllerPrototype.class);`) and use `logger.info(...)` or `logger.error(...)` appropriately.",
                    "Response format: respond with only the code. No markdown formatting, no explanation. Java comments are allowed, but avoid extra narrative or markdown-style formatting. Do not include code block markers like ```."
                  ]
                }
              ],
              "input": {
                "local_fs": [
                  "src/main/java/com/java_template/controller/Controller.java"
                ]
              },
              "output": {
                "local_fs": [
                  "src/main/java/com/java_template/controller/Controller.java"
                ]
              }
            }
          }
        },
        "rollback": {
          "next": "finished_prototype_cyoda_workflow_json",
          "manual": true
        }
      }
    },
    "updated_routes_file": {
      "transitions": {
        "save_env_file": {
          "next": "saved_env_file",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "save_env_file",
                "description": "save_env_file",
                "parameters": {
                  "filename": ".env.template"
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "saved_env_file": {
      "transitions": {
        "delete_files": {
          "next": "deleted_files",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "delete_files",
                "description": "delete_files",
                "parameters": {
                  "files": [
                    "src/main/java/com/java_template/entity/CyodaEntityControllerPrototype.java",
                    "src/main/java/com/java_template/entity/PrototypeCyodaWorkflow.java"
                  ]
                }
              },
              "publish": true
            }
          }
        }
      }
    },
    "deleted_files": {
      "transitions": {
        "question_to_proceed_with_generated_app_editing": {
          "next": "questioned_to_proceed_with_generated_app_editing",
          "action": {
            "name": "process_event",
            "config": {
              "type": "question",
              "question": "✅ Your application is ready in the {git_branch} branch!\n\n [Cyoda GitHub](https://github.com/Cyoda-platform/java-client-template/tree/{git_branch}) \uD83D\uDC40 \n\nLet’s bring it to life — together. Please make sure you've logged in to proceed.  A new account will be created automatically if you don't have one yet.\n\n ",
              "publish": true
            }
          }
        }
      }
    },
    "questioned_to_proceed_with_generated_app_editing": {
      "transitions": {
        "launch_setup_assistant": {
          "next": "launched_setup_assistant",
          "action": {
            "name": "process_event",
            "config": {
              "type": "function",
              "function": {
                "name": "init_setup_workflow",
                "description": "init_setup_workflow",
                "parameters": {
                  "user_request": "Hello! Please help me start my new application.",
                  "programming_language": "JAVA"
                }
              },
              "publish": false
            }
          }
        }
      }
    },
    "launched_setup_assistant": {
      "transitions": {
        "lock_chat": {
          "next": "locked_chat"
        }
      }
    }
  }
}