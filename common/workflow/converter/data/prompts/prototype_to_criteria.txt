Now for each criterion that you've outlined in the workflows configurations,
please provide the code for it based on the prototype code and call add_criterion tool with criterion name and content - criterion java code.

Criterion Interface Requirements

public interface CyodaCriterion {
    EntityCriteriaCalculationResponse check(CyodaEventContext<EntityCriteriaCalculationRequest> request);
    boolean supports(OperationSpecification opsSpec);
}

Supports method implementation:

@Override
public boolean supports(OperationSpecification modelSpec) {
    return "entity_name".equals(modelSpec.modelKey().getName()) &&
           Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();
}


Processor Class Criterion (Use this pattern)

import com.java_template.application.entity.pet.Pet;
import com.java_template.common.serializer.CriterionSerializer;
import com.java_template.common.serializer.ErrorInfo;
import com.java_template.common.serializer.EvaluationOutcome;
import com.java_template.common.serializer.ReasonAttachmentStrategy;
import com.java_template.common.serializer.SerializerFactory;
import com.java_template.common.config.Config;
import com.java_template.common.workflow.CyodaCriterion;
import com.java_template.common.workflow.CyodaEventContext;
import com.java_template.common.workflow.OperationSpecification;
import org.cyoda.cloud.api.event.common.ModelSpec;
import org.cyoda.cloud.api.event.processing.EntityCriteriaCalculationRequest;
import org.cyoda.cloud.api.event.processing.EntityCriteriaCalculationResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import java.util.Set;
@Component
public class ExampleCriterion implements CyodaCriterion {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    private final CriterionSerializer serializer;

    public ExampleCriterion(SerializerFactory serializerFactory) {
        this.serializer = serializerFactory.getDefaultCriteriaSerializer();
        logger.info("ExampleCriterion initialized with SerializerFactory");
    }

    @Override
        public EntityCriteriaCalculationResponse check(CyodaEventContext<EntityCriteriaCalculationRequest> context) {
            EntityCriteriaCalculationRequest request = context.getEvent();
            logger.debug("Checking EntityName validity for request: {}", request.getId());

            return serializer.withRequest(request)
                .evaluateEntity(EntityName.class, this::validateEntityName)
                .withReasonAttachment(ReasonAttachmentStrategy.toWarnings())
                .withErrorHandler((error, entityName) -> {
                    logger.debug("EntityName validation failed for request: {}", request.getId(), error);
                    return ErrorInfo.validationError("EntityName validation failed: " + error.getMessage());
                })
                .complete();
        }

    @Override
    public boolean supports(OperationSpecification modelSpec) {
        return "entity_name".equals(modelSpec.modelKey().getName()) &&
               Integer.parseInt(Config.ENTITY_VERSION) == modelSpec.modelKey().getVersion();
    }

    // Helper methods like isValidEntity, handleEntityNameError, etc.
}
Replace:

EntityName with your actual entity class

Logic placeholders (applyTransformation1, handleEntityNameError, etc.) with real implementations as needed.

    public interface CriterionSerializer {
        <T extends CyodaEntity> T extractEntity(EntityCriteriaCalculationRequest request, Class<T> clazz);
        JsonNode extractPayload(EntityCriteriaCalculationRequest request);
        <T extends CyodaEntity> JsonNode entityToJsonNode(T entity);
        String getType();
        ResponseBuilder.CriterionResponseBuilder responseBuilder(EntityCriteriaCalculationRequest request);
        default EvaluationChain withRequest(EntityCriteriaCalculationRequest request) {
            return new EvaluationChainImpl(this, request);
        }
        interface EvaluationChain {
            EvaluationChain evaluate(Function<JsonNode, EvaluationOutcome> evaluator);
            <T extends CyodaEntity> EvaluationChain evaluateEntity(Class<T> clazz, Function<T, EvaluationOutcome> evaluator);
            EvaluationChain withErrorHandler(BiFunction<Throwable, JsonNode, ErrorInfo> errorHandler);
            EvaluationChain withReasonAttachment(ReasonAttachmentStrategy strategy);
            EntityCriteriaCalculationResponse complete();
        }

@FunctionalInterface
public interface ReasonAttachmentStrategy {
    void attachReason(EntityCriteriaCalculationResponse response, EvaluationReason reason);


add_criterion Tool Usage

After each criterion is generated, call the add_criterion tool like:

