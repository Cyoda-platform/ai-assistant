Requirement:
Here’s an outline of the functional requirements for your application in the form of user stories and use cases. Each user story includes the necessary API endpoints, request/response formats, and a visual representation of the user-app interaction using Mermaid diagrams.

### User Stories

1. **User Authentication and Authorization**
   - **As a** user,
   - **I want to** authenticate using a Bearer token,
   - **So that** I can access protected resources in the application.

   - **API Endpoint:** `POST /deploy/cyoda-env`
     - **Request Format:**
       ```json
       {
         "user_name": "test"
       }
       ```
     - **Response Format:**
       ```json
       {
         "token": "your_jwt_token"
       }
       ```

2. **Submit Deployment Request**
   - **As a** user,
   - **I want to** submit a deployment request for my environment,
   - **So that** a build is triggered with my configurations.

   - **API Endpoint:** `POST /deploy/cyoda-env`
     - **Request Format:**
       ```json
       {
         "user_name": "test"
       }
       ```
     - **Response Format:**
       ```json
       {
         "build_id": "12345"
       }
       ```

3. **Submit User Application Deployment Request**
   - **As a** user,
   - **I want to** submit a deployment request for my application,
   - **So that** it can be built and deployed with my repository.

   - **API Endpoint:** `POST /deploy/user_app`
     - **Request Format:**
       ```json
       {
         "repository_url": "http://example.com/repo.git",
         "is_public": "true"
       }
       ```
     - **Response Format:**
       ```json
       {
         "build_id": "54321"
       }
       ```

4. **Check Deployment Status**
   - **As a** user,
   - **I want to** check the status of my deployment,
   - **So that** I know if it succeeded or failed.

   - **API Endpoint:** `GET /deploy/cyoda-env/status/$id`
     - **Response Format:**
       ```json
       {
         "status": "successful",
         "details": {
           "repository_url": "http://example.com/repo.git",
           "is_public": "true"
         }
       }
       ```

5. **Get Deployment Statistics**
   - **As a** user,
   - **I want to** retrieve statistics for my deployment,
   - **So that** I can analyze the build performance.

   - **API Endpoint:** `GET /deploy/cyoda-env/statistics/$id`
     - **Response Format:**
       ```json
       {
         "build_time": "5min",
         "success_rate": "95%"
       }
       ```

6. **Cancel User Application Deployment**
   - **As a** user,
   - **I want to** cancel a deployment that is currently queued,
   - **So that** I can stop it from processing.

   - **API Endpoint:** `POST /deploy/cancel/user_app/$id`
     - **Request Format:**
       ```json
       {
         "comment": "Canceling a queued build",
         "readdIntoQueue": false
       }
       ```
     - **Response Format:**
       ```json
       {
         "message": "Build canceled successfully"
       }
       ```

### Mermaid Diagrams

Here’s a simple visualization of the user-app interaction using Mermaid syntax:

```mermaid
graph TD;
    User-->Auth[Authenticate with Bearer Token]
    Auth-->DeployEnv[Submit Deployment Request]
    DeployEnv-->BuildStatus[Check Deployment Status]
    DeployEnv-->BuildStatistics[Get Deployment Statistics]
    User-->CancelDeploy[Cancel User Application Deployment]
    CancelDeploy-->Feedback[Receive Cancel Feedback]
```

### Summary

The application will abide by RESTful principles, allowing users to manage deployment and environment configurations conveniently through a well-defined API. Each user story is translated into specific functionalities with a clear mapping of API requests and responses, creating a structured approach to develop your backend application.

Prototype

# Here’s a prototype implementation of the `api.py` file for your backend application using the Quart framework, aiohttp for HTTP requests, and a Blueprint for structuring the API. This code will serve your outlined API design and provide mock responses where necessary.
#
# ```python
from quart import Blueprint, request, jsonify
from aiohttp import ClientSession
import asyncio

api = Blueprint('api', __name__)

TEAMCITY_URL = 'https://teamcity.test/app/rest/'

async def post_build_queue(build_type_id, properties):
    async with ClientSession() as session:
        async with session.post(
            f"{TEAMCITY_URL}/buildQueue",
            json={
                "buildType": {"id": build_type_id},
                "properties": {"property": properties}
            }
        ) as response:
            return await response.json()

async def get_build_status(build_id):
    async with ClientSession() as session:
        async with session.get(f"{TEAMCITY_URL}/buildQueue/id:{build_id}") as response:
            return await response.json()

async def get_build_statistics(build_id):
    async with ClientSession() as session:
        async with session.get(f"{TEAMCITY_URL}/builds/id:{build_id}/statistics/") as response:
            return await response.json()

async def cancel_build(build_id):
    async with ClientSession() as session:
        async with session.post(
            f"{TEAMCITY_URL}/builds/id:{build_id}",
            json={"comment": "Canceling a queued build", "readdIntoQueue": False}
        ) as response:
            return await response.json()

@api.route('/deploy/cyoda-env', methods=['POST'])
async def deploy_cyoda_env():
    data = await request.get_json()
    user_name = data.get('user_name')
    properties = [
        {"name": "user_defined_keyspace", "value": user_name},
        {"name": "user_defined_namespace", "value": user_name}
    ]
    # TODO: Add error handling and validation here
    build_response = await post_build_queue("KubernetesPipeline_CyodaSaas", properties)
    return jsonify(build_response), 200  # Return build ID or any relevant response

@api.route('/deploy/user_app', methods=['POST'])
async def deploy_user_app():
    data = await request.get_json()
    repository_url = data.get('repository_url')
    is_public = data.get('is_public')
    user_name = data.get('user_name')  # Assuming user_name is sent along; add validation if needed
    properties = [
        {"name": "user_defined_keyspace", "value": user_name},
        {"name": "user_defined_namespace", "value": user_name}
    ]
    # TODO: Add error handling and validation here
    build_response = await post_build_queue("KubernetesPipeline_CyodaSaasUserEnv", properties)
    return jsonify(build_response), 200  # Return build ID or any relevant response

@api.route('/deploy/cyoda-env/status/<int:id>', methods=['GET'])
async def cyoda_env_status(id):
    status = await get_build_status(id)
    return jsonify(status), 200  # Return relevant status response

@api.route('/deploy/cyoda-env/statistics/<int:id>', methods=['GET'])
async def cyoda_env_statistics(id):
    stats = await get_build_statistics(id)
    return jsonify(stats), 200  # Return relevant statistics

@api.route('/deploy/user_app/status/<int:id>', methods=['GET'])
async def user_app_status(id):
    status = await get_build_status(id)
    return jsonify(status), 200  # Return relevant status response

@api.route('/deploy/user_app/statistics/<int:id>', methods=['GET'])
async def user_app_statistics(id):
    stats = await get_build_statistics(id)
    return jsonify(stats), 200  # Return relevant statistics

@api.route('/deploy/cancel/user_app/<int:id>', methods=['POST'])
async def cancel_user_app(id):
    cancel_response = await cancel_build(id)
    return jsonify(cancel_response), 200  # Return any relevant cancellation response

# ```
#
# ### Overview of the Code:
# 1. **Blueprints**: The app uses a `Blueprint` to easily manage routes for the API.
# 2. **Async Functions**: Each endpoint's internal functionality uses asynchronous functions to make the necessary POST and GET requests to the TeamCity API.
# 3. **Endpoints**: Each functional requirement corresponds to an API endpoint, matching your specifications.
# 4. **Mocking & TODOs**: Where necessary, placeholders and TODO comments are included to signal areas requiring further development or clarity.
#
# ### Next Steps
# - **Testing**: You can deploy this prototype locally and start testing the endpoints to ensure that interactions behave as expected.
# - **Error Handling**: Refine the implementation to properly handle errors for a production environment.
#
# This prototype can be built upon with further iterations regarding the non-functional requirements and more nuanced features.