<?xml version="1.0" encoding="UTF-8"?>
<suite>
    <id>S12</id>
    <name>Smoke testing</name>
    <description>Smoke tests for AI Assistant functions</description>
    <sections>
        <section>
            <name>Web Search</name>
            <description>Tests for performing a web search</description>
            <cases>
                <case>
                    <title>Web search returns results for valid query</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Call web_search with query "latest news about AI".</steps>
                        <expected>Returns relevant search results without error.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Read Link</name>
            <description>Tests for fetching content from a URL</description>
            <cases>
                <case>
                    <title>Read link returns content for a valid URL</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Call read_link with a working URL "https://example.com".</steps>
                        <expected>Content from the page is returned successfully.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Web Scraping</name>
            <description>Tests for scraping webpage content using CSS selectors</description>
            <cases>
                <case>
                    <title>Scrape valid content using valid selector</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Call web_scrape with a valid URL and correct CSS selector.</steps>
                        <expected>Expected HTML content is returned.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Build New Application</name>
            <description>Tests for full build workflow including requirement gathering, repository setup, and prototype
                generation
            </description>
            <cases>
                <case>
                    <title>Build weather data application</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Critical</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Submit user_request: "Build an app to fetch weather data".</steps>
                        <expected>Workflow starts successfully and confirms creation process.</expected>
                    </custom>
                </case>
                <case>
                    <title>Build empty request validation</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Submit an empty user_request field.</steps>
                        <expected>Returns error or validation message indicating required input.</expected>
                    </custom>
                </case>
                <case>
                    <title>Build application with complex description</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Submit a user_request: "Build an app that scrapes multiple financial news sites and
                            visualizes trends using charts."
                        </steps>
                        <expected>Returns success message, workflow initiates with all features planned.</expected>
                    </custom>
                </case>
                <case>
                    <title>Application build workflow starts with welcome notification</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Trigger application build with valid user_request.
                            2. Verify welcome notification is sent.
                        </steps>
                        <expected>Welcome message is published and flow transitions to greeting_sent state.</expected>
                    </custom>
                </case>
                <case>
                    <title>Repository is cloned after greeting</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Transition to greeting_sent.
                            2. Trigger clone_repo event.
                        </steps>
                        <expected>Template repository is cloned and state changes to repository_cloned.</expected>
                    </custom>
                </case>
                <case>
                    <title>AI chat initialization completes successfully</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. From repository_cloned state, trigger init_chats.
                            2. Verify chat initialization.
                        </steps>
                        <expected>Chat service is initialized, transition to chats_initialized.</expected>
                    </custom>
                </case>
                <case>
                    <title>Functional requirement questions are asked and clarified</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Trigger process_initial_question.
                            2. Engage in back-and-forth clarification.
                        </steps>
                        <expected>App transitions to app_requirements_requested and gathers necessary input.</expected>
                    </custom>
                </case>
                <case>
                    <title>Final version of functional requirements is generated</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Complete requirement gathering.
                            2. Trigger generate_functional_requirements.
                        </steps>
                        <expected>A markdown file functional_requirement.md is generated.</expected>
                    </custom>
                </case>
                <case>
                    <title>Initial prototype is created and saved</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Use finalized requirements.
                            2. Trigger prototype generation.
                        </steps>
                        <expected>A functional prototype.py file is saved to entity/.</expected>
                    </custom>
                </case>
                <case>
                    <title>Prototype is refactored to Cyoda format</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Trigger refactor to Cyoda model.
                            2. Check entity_service usage.
                        </steps>
                        <expected>prototype_cyoda.py with proper entity_service code is generated.</expected>
                    </custom>
                </case>
                <case>
                    <title>Entity design JSON is created</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Trigger generate_entities_data_design.
                            2. Use inputs from functional requirement and prototype.
                        </steps>
                        <expected>entities_data_design.json with valid entity structure is created.</expected>
                    </custom>
                </case>
                <case>
                    <title>Workflow code is generated and registered</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Generate prototype_cyoda_workflow.py.
                            2. Register it with app.
                        </steps>
                        <expected>Workflow file is generated and linked correctly with Cyoda system.</expected>
                    </custom>
                </case>
                <case>
                    <title>Application finishes with saved .env template</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Low</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Finish flow and generate .env.template.
                            2. Notify user with setup instructions.
                        </steps>
                        <expected>.env.template is saved and instructions sent to user.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Deploy Cyoda Environment</name>
            <description>Tests for triggering deployment of Cyoda internal infrastructure</description>
            <cases>
                <case>
                    <title>Deploy Cyoda environment successfully</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Critical</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Submit user_request: "Deploy Cyoda environment".</steps>
                        <expected>Returns success response and confirms environment deployment started.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Edit Existing Application</name>
            <description>Tests for editing or enhancing an existing application</description>
            <cases>
                <case>
                    <title>Add dashboard feature to app</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>High</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Use git_branch "feature-branch" and user_request "Add analytics dashboard".</steps>
                        <expected>Returns success message for feature addition planning.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Add New Entity</name>
            <description>Tests for creating new entities within an existing app</description>
            <cases>
                <case>
                    <title>Add Customer entity to existing app</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Critical</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Use git_branch "dev-branch", user_request "Add new entity", and entity_name
                            "Customer".
                        </steps>
                        <expected>Entity creation process is initiated successfully.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Deploy User Application</name>
            <description>Tests for deploying a client application</description>
            <cases>
                <case>
                    <title>Deploy user application to production</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Critical</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Use git_branch "release-1.0" and user_request "Deploy application".</steps>
                        <expected>Client application deployment starts and returns confirmation.</expected>
                    </custom>
                </case>
            </cases>
        </section>
        <section>
            <name>Guidelines Generation</name>
            <description>Tests for generating static guidelines and templates</description>
            <cases>
                <case>
                    <title>Generate workflow configuration</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Provide workflow_name "generate_workflow".</steps>
                        <expected>Returns a workflow configuration template or setup guide.</expected>
                    </custom>
                </case>
                <case>
                    <title>Generate processors configuration</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Provide workflow_name "generate_processors".</steps>
                        <expected>Returns processor template and code layout suggestions.</expected>
                    </custom>
                </case>
                <case>
                    <title>Generate Trino configuration</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Provide workflow_name "configure_trino".</steps>
                        <expected>Returns configuration steps for Trino setup and connection.</expected>
                    </custom>
                </case>
                <case>
                    <title>Generate entity configuration</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Medium</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Provide workflow_name "generate_entity".</steps>
                        <expected>Returns a complete entity schema or template structure.</expected>
                    </custom>
                </case>
                <case>
                    <title>Generate Python app startup guide</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Low</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Provide workflow_name "start_python_app".</steps>
                        <expected>Returns guidelines for initializing a Python application using the Cyoda framework.
                        </expected>
                    </custom>
                </case>
                <case>
                    <title>Generate Cyoda best practice guide</title>
                    <template>Test Case (Text)</template>
                    <type>Smoke &amp; Sanity</type>
                    <priority>Low</priority>
                    <custom>
                        <automation_type>
                            <id>0</id>
                            <value>None</value>
                        </automation_type>
                        <steps>1. Provide workflow_name "cyoda_best_practice".</steps>
                        <expected>Returns documented best practices and recommendations for using Cyoda efficiently.
                        </expected>
                    </custom>
                </case>
            </cases>
        </section>
    </sections>
</suite>
